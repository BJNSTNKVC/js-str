{"version":3,"file":"main.esm.js","sources":["../src/main.ts"],"sourcesContent":["export type HtmlStringType = HTMLElement | Node | string;\r\n\r\nexport type ExcerptOptions = { radius?: number, omission?: string }\r\n\r\nexport type Value<T> = boolean | ((instance: T) => boolean);\r\n\r\nexport type Callback<T> = (instance: T, value: boolean) => T | void | undefined;\r\n\r\nexport type Fallback<T> = Callback<T> | null;\r\n\r\nexport enum Mode {\r\n    MB_CASE_UPPER        = 0,\r\n    MB_CASE_LOWER        = 1,\r\n    MB_CASE_TITLE        = 2,\r\n    MB_CASE_FOLD         = 3,\r\n    MB_CASE_UPPER_SIMPLE = 4,\r\n    MB_CASE_LOWER_SIMPLE = 5,\r\n    MB_CASE_TITLE_SIMPLE = 6,\r\n    MB_CASE_FOLD_SIMPLE  = 7\r\n}\r\n\r\nexport class Str {\r\n    /**\r\n     * The callback that should be used to generate UUIDs.\r\n     *\r\n     * @type { Function | null }\r\n     */\r\n    protected static uuidFactory: Function | null = null;\r\n\r\n    /**\r\n     * The callback that should be used to generate ULIDs.\r\n     *\r\n     * @type { Function | null }\r\n     */\r\n    protected static ulidFactory: Function | null = null;\r\n\r\n    /**\r\n     * The callback that should be used to generate random strings.\r\n     *\r\n     * @type { Function | null }\r\n     */\r\n    protected static randomStringFactory: Function | null = null;\r\n\r\n    /**\r\n     * Get a new Stringable object from the given string.\r\n     *\r\n     * @param { string } string\r\n     */\r\n    static of(string: string): Stringable {\r\n        return new Stringable(string);\r\n    }\r\n\r\n    /**\r\n     * Return the remainder of a string after the first occurrence of a given value.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } search\r\n     *\r\n     * @return { string }\r\n     */\r\n    static after(subject: string, search: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        return subject.slice(subject.indexOf(search) + search.length);\r\n    }\r\n\r\n    /**\r\n     * Return the remainder of a string after the last occurrence of a given value.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } search\r\n     *\r\n     * @return { string }\r\n     */\r\n    static afterLast(subject: string, search: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        const position: number = subject.lastIndexOf(search);\r\n\r\n        if (position === -1) {\r\n            return subject;\r\n        }\r\n\r\n        return subject.substring(position + search.length);\r\n    }\r\n\r\n    /**\r\n     * Transliterate a UTF-8 value to ASCII.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static ascii(value: string): string {\r\n        return value.normalize('NFD')\r\n            .replace(/[\\u0300-\\u036f]/g, '')\r\n            .replace(/[^a-zA-Z0-9]/g, '');\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string before the first occurrence of a given value.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } search\r\n     *\r\n     * @return { string }\r\n     */\r\n    static before(subject: string, search: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        const result: string = subject.substring(0, subject.indexOf(search));\r\n\r\n        if (result === '') {\r\n            return subject;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string before the last occurrence of a given value.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } search\r\n     *\r\n     * @return { string }\r\n     */\r\n    static beforeLast(subject: string, search: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        const position: number | null = subject.lastIndexOf(search) ?? null;\r\n\r\n        if (position === -1) {\r\n            return subject;\r\n        }\r\n\r\n        return this.substr(subject, 0, position);\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string between two given values.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } from\r\n     * @param { string } to\r\n     *\r\n     * @return { string }\r\n     */\r\n    static between(subject: string, from: string, to: string): string {\r\n        if (from === '' || to === '') {\r\n            return subject;\r\n        }\r\n\r\n        return this.beforeLast(this.after(subject, from), to);\r\n    }\r\n\r\n    /**\r\n     * Get the smallest possible portion of a string between two given values.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } from\r\n     * @param { string } to\r\n     *\r\n     * @return { string }\r\n     */\r\n    static betweenFirst(subject: string, from: string, to: string): string {\r\n        if (from === '' || to === '') {\r\n            return subject;\r\n        }\r\n\r\n        return this.before(this.after(subject, from), to);\r\n    }\r\n\r\n    /**\r\n     * Convert a value to camel case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static camel(value: string): string {\r\n        return this.lcfirst(this.studly(value));\r\n    }\r\n\r\n    /**\r\n     * Get the character at the specified index.\r\n     *\r\n     * @param { string } subject\r\n     * @param { number } index\r\n     *\r\n     * @return { string | false }\r\n     */\r\n    static charAt(subject: string, index: number): string | false {\r\n        return subject.charAt(index);\r\n    }\r\n\r\n    /**\r\n     * Remove the given string(s) if it exists at the start of the haystack.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string | string[] } needle\r\n     *\r\n     * @return string\r\n     */\r\n    static chopStart(subject: string, needle: string | string[]): string {\r\n        let results: string = subject;\r\n\r\n        needle = Array.isArray(needle) ? needle : [needle];\r\n\r\n        needle.forEach((word: string): void => {\r\n            if (subject.startsWith(word)) {\r\n                results = subject.substring(word.length);\r\n            }\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Remove the given string(s) if it exists at the end of the haystack.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string | string[] } needle\r\n     *\r\n     * @return string\r\n     *\r\n     */\r\n    static chopEnd(subject: string, needle: string | string[]): string {\r\n        let results: string = subject;\r\n\r\n        needle = Array.isArray(needle) ? needle : [needle];\r\n\r\n        needle.forEach((word: string): void => {\r\n            if (subject.endsWith(word)) {\r\n                results = subject.substring(0, subject.length - word.length);\r\n            }\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string contains a given substring.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string | string[] } needles\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static contains(haystack: string, needles: string | string[], ignoreCase: boolean = false): boolean {\r\n        let result: boolean = false;\r\n\r\n        if (ignoreCase) {\r\n            haystack = haystack.toLowerCase();\r\n        }\r\n\r\n        needles = Array.isArray(needles) ? needles : [needles];\r\n\r\n        needles.forEach((needle: string): void => {\r\n            if (ignoreCase) {\r\n                needle = needle.toLowerCase();\r\n            }\r\n\r\n            if (needle !== '' && haystack.includes(needle)) {\r\n                result = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string contains all array values.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string[] } needles\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static containsAll(haystack: string, needles: string[], ignoreCase: boolean = false): boolean {\r\n        let result: boolean = true;\r\n\r\n        needles.forEach((needle: string): void => {\r\n            if (!this.contains(haystack, needle, ignoreCase)) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string doesn't contain a given substring.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string | string[] } needles\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static doesntContain(haystack: string, needles: string | string[], ignoreCase: boolean = false): boolean {\r\n        return !this.contains(haystack, needles, ignoreCase);\r\n    }\r\n\r\n    /**\r\n     * Convert the case of a string.\r\n     *\r\n     * @param { string } string\r\n     * @param { Mode | number } mode\r\n     *\r\n     * @return { string }\r\n     */\r\n    static convertCase(string: string, mode: Mode | number = Mode.MB_CASE_FOLD): string {\r\n        switch (mode) {\r\n            case Mode.MB_CASE_UPPER: {\r\n                string = string.toLocaleUpperCase();\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_LOWER: {\r\n                string = string.toLocaleLowerCase();\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_TITLE: {\r\n                string = this.title(string);\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_FOLD: {\r\n                string = string.toLocaleLowerCase();\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_UPPER_SIMPLE: {\r\n                string = string.toUpperCase();\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_LOWER_SIMPLE: {\r\n                string = string.toLowerCase();\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_TITLE_SIMPLE: {\r\n                string = this.title(string);\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_FOLD_SIMPLE: {\r\n                string = string.toLowerCase();\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        return string;\r\n    }\r\n\r\n    /**\r\n     * Replace consecutive instances of a given character with a single character in the given string.\r\n     *\r\n     * @param { string } string\r\n     * @param { string | string[] } characters\r\n     *\r\n     * @return { string }\r\n     */\r\n    static deduplicate(string: string, characters: string | string[] = ' '): string {\r\n        if (Array.isArray(characters)) {\r\n            return characters.reduce((carry: string, character: string): string => carry.replace(new RegExp(`${character.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}+`, 'gu'), character), string);\r\n        }\r\n\r\n        return string.replace(new RegExp(`${preg_quote(characters)}+`, 'gu'), characters);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string ends with a given substring.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string | string[] } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static endsWith(haystack: string, needles: string | string[]): boolean {\r\n        needles = Array.isArray(needles) ? needles : [needles];\r\n\r\n        return needles.some((needle: string): boolean => needle !== '' && haystack.endsWith(needle));\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string doesn't end with a given substring.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string | string[] } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static doesntEndWith(haystack: string, needles: string | string[]): boolean {\r\n        return !this.endsWith(haystack, needles);\r\n    }\r\n\r\n    /**\r\n     * Extracts an excerpt from text that matches the first instance of a phrase.\r\n     *\r\n     * @param { string } text\r\n     * @param { string } phrase\r\n     * @param { ExcerptOptions } options\r\n     *\r\n     * @return { string | null }\r\n     */\r\n    static excerpt(text: string, phrase: string = '', options: ExcerptOptions = {}): string | null {\r\n        const radius: number = options.radius ?? 100;\r\n        const omission: string = options.omission ?? '...';\r\n        const results: string[] = text.split(phrase);\r\n\r\n        if (results.length === 1) {\r\n            return null;\r\n        }\r\n\r\n        const matches: string[] = [text, (results[0] as string), phrase, results.splice(1).join(phrase)];\r\n\r\n        let start: string = (matches[1] as string).trimStart();\r\n        let end: string = (matches[3] as string).trimEnd();\r\n\r\n        start = this.of(this.substr(start, Math.max((start.length - radius), 0), radius))\r\n            .ltrim()\r\n            .unless(\r\n                (startWithRadius: Stringable): boolean => startWithRadius.exactly(start),\r\n                (startWithRadius: Stringable): Stringable => startWithRadius.prepend(omission))\r\n            .toString();\r\n\r\n        end = this.of(this.substr(end, 0, radius))\r\n            .rtrim()\r\n            .unless(\r\n                (endWithRadius: Stringable): boolean => endWithRadius.exactly(end),\r\n                (endWithRadius: Stringable): Stringable => endWithRadius.append(omission))\r\n            .toString();\r\n\r\n        return (start + ' ' + matches[2] + end).replace(/\\s+/g, ' ').trim();\r\n    }\r\n\r\n    /**\r\n     * Cap a string with a single instance of a given value.\r\n     *\r\n     * @param { string } value\r\n     * @param { string } cap\r\n     *\r\n     * @return { string }\r\n     */\r\n    static finish(value: string, cap: string): string {\r\n        return value.endsWith(cap) ? value : value + cap;\r\n    }\r\n\r\n    /**\r\n     * Wrap the string with the given strings.\r\n     *\r\n     * @param { string } value\r\n     * @param { string } before\r\n     * @param { string | null } after\r\n     *\r\n     * @return string\r\n     */\r\n    static wrap(value: string, before: string, after: string | null = null): string {\r\n        return before + value + (after ?? before);\r\n    }\r\n\r\n    /**\r\n     * Unwrap the string with the given strings.\r\n     *\r\n     * @param { string } value\r\n     * @param { string } before\r\n     * @param { string | null } after\r\n     *\r\n     * @return { string }\r\n     */\r\n    static unwrap(value: string, before: string, after: string | null = null): string {\r\n        if (this.startsWith(value, before)) {\r\n            value = this.replaceFirst(before, '', value);\r\n        }\r\n\r\n        if (this.endsWith(value, after ?? before)) {\r\n            value = this.replaceLast(after ?? before, '', value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string matches a given pattern.\r\n     *\r\n     * @param { string | string[] } pattern\r\n     * @param { string } value\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static is(pattern: string | string[], value: string, ignoreCase: boolean = false): boolean {\r\n        let patterns: string[] = Array.isArray(pattern) ? pattern : [pattern];\r\n\r\n        for (let pattern of patterns) {\r\n            if (pattern === value) {\r\n                return true;\r\n            }\r\n\r\n            if (ignoreCase && pattern.toLowerCase() === value.toLowerCase()) {\r\n                return true;\r\n            }\r\n\r\n            pattern = pattern.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&').replace(/\\\\\\*/g, '.*');\r\n\r\n            const regex: RegExp = new RegExp('^' + pattern + '$', ignoreCase ? 'iu' : 'u');\r\n\r\n            if (regex.test(value)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is 7-bit ASCII.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isAscii(value: string): boolean {\r\n        return !/[^ -~\\t\\r\\n]/.test(value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is valid JSON.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isJson(value: string): boolean {\r\n        try {\r\n            JSON.parse(value);\r\n        } catch {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given value is a valid URL.\r\n     *\r\n     * @param { string } value\r\n     * @param { string[] } protocols\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isUrl(value: string, protocols: string[] = []): boolean {\r\n        const protocolPattern: string = protocols.length === 0 ? 'https?|ftp|file|mailto|tel|data|irc|magnet' : protocols.join('|');\r\n\r\n        const pattern: RegExp = new RegExp(`^(?:${protocolPattern}):\\\\/\\\\/(?:[\\\\w-]+(?:\\\\.[\\\\w-]+)+|localhost|\\\\d{1,3}(?:\\\\.\\\\d{1,3}){3})(?::\\\\d+)?(?:\\\\S*)?$`, 'i');\r\n\r\n        return pattern.test(value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is a valid UUID.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isUuid(value: string): boolean {\r\n        return new RegExp(/^[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/).test(value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is a valid ULID.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isUlid(value: string): boolean {\r\n        if (value.length !== 26) {\r\n            return false;\r\n        }\r\n\r\n        if (value.length !== value.match(/[0123456789ABCDEFGHJKMNPQRSTVWXYZabcdefghjkmnpqrstvwxyz]/g)?.length) {\r\n            return false;\r\n        }\r\n\r\n        return Number(value.charAt(0)) <= 7;\r\n    }\r\n\r\n    /**\r\n     * Convert a string to kebab case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static kebab(value: string): string {\r\n        return this.snake(value, '-');\r\n    }\r\n\r\n    /**\r\n     * Return the length of the given string.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { number }\r\n     */\r\n    static length(value: string): number {\r\n        return value.length;\r\n    }\r\n\r\n    /**\r\n     * Limit the number of characters in a string.\r\n     *\r\n     * @param { string } value\r\n     * @param { number } limit\r\n     * @param { string } end\r\n     * @param { boolean } preserveWords\r\n     *\r\n     * @return { string }\r\n     */\r\n    static limit(value: string, limit: number = 100, end: string = '...', preserveWords: boolean = false): string {\r\n        if (value.length <= limit) {\r\n            return value;\r\n        }\r\n\r\n        if (!preserveWords) {\r\n            return this.substr(value, 0, limit).trim() + end;\r\n        }\r\n\r\n        value = value.replace(/[\\n\\r]+/, ' ');\r\n\r\n        const trimmed: string = this.substr(value, 0, limit).trim();\r\n\r\n        if (this.substr(value, limit, 1) === ' ') {\r\n            return `${trimmed}${end}`;\r\n        }\r\n\r\n        return `${trimmed.replace(/(.*)\\s.*/, '$1')}${end}`;\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to lower-case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static lower(value: string): string {\r\n        return value.toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Limit the number of words in a string.\r\n     *\r\n     * @param { string } value\r\n     * @param { number } words\r\n     * @param { string } end\r\n     *\r\n     * @return { string }\r\n     */\r\n    static words(value: string, words: number = 100, end: string = '...'): string {\r\n        const wordsArray: string[] = value.match(/\\S+\\s*/g)?.splice(0, words) ?? [];\r\n\r\n        const result: string = wordsArray.join('');\r\n\r\n        if (wordsArray.length === 1 || this.length(value) === this.length(result)) {\r\n            return value;\r\n        }\r\n\r\n        return result.trim() + end;\r\n    }\r\n\r\n    /**\r\n     * Masks a portion of a string with a repeated character.\r\n     *\r\n     * @param { string } string\r\n     * @param { string } character\r\n     * @param { number } index\r\n     * @param { number | null } length\r\n     *\r\n     * @return { string }\r\n     */\r\n    static mask(string: string, character: string, index: number, length: number | null = null): string {\r\n        if (character === '') {\r\n            return string;\r\n        }\r\n\r\n        let start: number | string = index;\r\n        let endIndex: number = length ?? string.length;\r\n\r\n        if (start < 0) {\r\n            start = string.length + start;\r\n            endIndex = start + (length ?? 0);\r\n        }\r\n\r\n        if (endIndex === 0) {\r\n            endIndex = start;\r\n        }\r\n\r\n        let segment: string = string.substring(start, endIndex);\r\n\r\n        if (segment === '') {\r\n            return string;\r\n        }\r\n\r\n        let strLen: number = string.length;\r\n        let startIndex: number = index;\r\n\r\n        if (index < 0) {\r\n            startIndex = index < -strLen ? 0 : strLen + index;\r\n        }\r\n\r\n        start = string.substring(0, startIndex);\r\n\r\n        let segmentLen: number = segment.length;\r\n        let end: string = string.substring(startIndex + segmentLen);\r\n\r\n        return start + character.substring(0, 1).repeat(segmentLen) + end;\r\n    }\r\n\r\n    /**\r\n     * Get the string matching the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static match(pattern: string, subject: string): string {\r\n        const body: string = RegExpString.make(/^\\/(.*)\\/\\w*$/, pattern);\r\n        const flags: string = RegExpString.make(/^\\/.*\\/(\\w*)$/, pattern);\r\n        const expression: RegExp = new RegExp(body, flags);\r\n\r\n        const matches: RegExpMatchArray | null = RegExp(expression).exec(subject);\r\n\r\n        if (!matches) {\r\n            return '';\r\n        }\r\n\r\n        return matches[1] ?? matches[0];\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string matches a given pattern.\r\n     *\r\n     * @param { string | string[] } pattern\r\n     * @param { string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isMatch(pattern: string | string[], value: string): boolean {\r\n        let result: boolean = false;\r\n\r\n        pattern = Array.isArray(pattern) ? pattern : [pattern];\r\n\r\n        pattern.forEach((item: string): void => {\r\n            if (item === value) {\r\n                result = true;\r\n            }\r\n\r\n            let body: string = (/^\\/(.*)\\/\\w*$/.exec(item) as string[])[1] as string;\r\n            let flags: string = (/^\\/.*\\/(\\w*)$/.exec(item) as string[])[1] as string;\r\n            let expression: RegExp = new RegExp(body, flags);\r\n\r\n            if (expression.exec(value)) {\r\n                result = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the string matching the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { string } subject\r\n     *\r\n     * @return { string[] }\r\n     */\r\n    static matchAll(pattern: string, subject: string): string[] {\r\n        const body: string = RegExpString.make(/^\\/(.*)\\/\\w*$/, pattern);\r\n        const flags: string = RegExpString.make(/^\\/.*\\/(\\w*)$/, pattern);\r\n\r\n        const expression: RegExp = new RegExp(body, flags + (flags.indexOf('g') !== -1 ? '' : 'g'));\r\n\r\n        const matches: RegExpMatchArray[] = [...subject.matchAll(new RegExp(expression, 'g'))];\r\n\r\n        if (matches.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        return matches.map((match: RegExpMatchArray): string => String(match.length === 1 ? match[0] : match[1]));\r\n    }\r\n\r\n    /**\r\n     * Remove all non-numeric characters from a string.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static numbers(value: string): string {\r\n        return value.replace(/\\D/g, '');\r\n    }\r\n\r\n    /**\r\n     * Pad both sides of a string with another.\r\n     *\r\n     * @param { string } value\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { string }\r\n     */\r\n    static padBoth(value: string, length: number, pad: string = ' '): string {\r\n        const short: number = Math.max(0, length - value.length);\r\n        const shortLeft: number = Math.floor(short / 2);\r\n        const shortRight: number = Math.ceil(short / 2);\r\n\r\n        return pad.repeat(shortLeft).substring(0, shortLeft) + value + pad.repeat(shortRight).substring(0, shortRight);\r\n    }\r\n\r\n    /**\r\n     * Pad the left side of a string with another.\r\n     *\r\n     * @param { string } value\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { string }\r\n     */\r\n    static padLeft(value: string, length: number, pad: string = ' '): string {\r\n        const short: number = Math.max(0, length - (value.length ?? 0));\r\n\r\n        return pad.repeat(short).substring(0, short) + value;\r\n    }\r\n\r\n    /**\r\n     * Pad the right side of a string with another.\r\n     *\r\n     * @param { string } value\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { string }\r\n     */\r\n    static padRight(value: string, length: number, pad: string = ' '): string {\r\n        const short: number = Math.max(0, length - value.length);\r\n\r\n        return value + pad.repeat(short).substring(0, short);\r\n    }\r\n\r\n    /**\r\n     * Get the plural form of an English word.\r\n     *\r\n     * @param { string } value\r\n     * @param { number | array } count\r\n     *\r\n     * @return { string }\r\n     */\r\n    static plural(value: string, count: number | number[] = 2): string {\r\n        if ((count !== undefined && count === 1) || value.trim() === '') {\r\n            return value;\r\n        }\r\n\r\n        // List of rules for plural words.\r\n        const plural: { [key: string]: string } = {\r\n            // Special cases (unchanged plurals)\r\n            '^(.*)menu$': '$1menus',\r\n            '^tights$'  : 'tights',\r\n            '^shorts$'  : 'shorts',\r\n            '^glasses$' : 'glasses',\r\n            '^pants$'   : 'pants',\r\n\r\n            // -us -> -i (second declension nouns)\r\n            '(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$': '$1i',\r\n            '(vir)us$'                                                           : '$1i',\r\n\r\n            // -um/on -> -a (neuter nouns)\r\n            '([ti])um$'   : '$1a',\r\n            '(tax)on$'    : '$1a',\r\n            '(criteri)on$': '$1a',\r\n\r\n            // -ix/ex -> -ices\r\n            '(matr)ix$'    : '$1ices',\r\n            '(vert|ind)ex$': '$1ices',\r\n\r\n            // -o -> -oes\r\n            '(buffal|her|potat|tomat|volcan)o$': '$1oes',\r\n\r\n            // -ouse -> -ouses\r\n            '(h|bl)ouse$': '$1ouses',\r\n            'ouse$'      : 'ouses',\r\n\r\n            // -y -> -ies\r\n            '([^aeiouy]|qu)y$': '$1ies',\r\n\r\n            // -f/fe -> -ves\r\n            '([lr])f$'             : '$1ves',\r\n            '([^fo])fe$'           : '$1ves',\r\n            '(shea|loa|lea|thie)f$': '$1ves',\r\n            '(li|wi|kni)fe$'       : '$1ves',\r\n\r\n            // -is -> -es\r\n            '(analys|ax|cris|test|thes)is$': '$1es',\r\n\r\n            // -e exceptions\r\n            '(alias|status|bus)$'          : '$1es',\r\n            '(shoe|slave)$'                : '$1s',\r\n            '(corpse)$'                    : '$1s',\r\n            '(drive|dive|hive|olive|tive)$': '$1s',\r\n\r\n            // -x -> -xes\r\n            '([ftw]ax)$': '$1es',\r\n\r\n            // -ouse -> -ice\r\n            '([m|l])ouse$': '$1ice',\r\n\r\n            // -e -> -es\r\n            '(x|ch|ss|sh)$': '$1es',\r\n            'o$'           : 'oes',\r\n\r\n            // -ze -> -zes\r\n            '(quiz)$': '$1zes',\r\n\r\n            // -ox -> -oxen\r\n            '^(ox)$': '$1en',\r\n\r\n            // -person -> -people\r\n            '(p)erson$': '$1eople',\r\n\r\n            // Irregular singulars\r\n            '(m)an$'  : '$1en',\r\n            '(c)hild$': '$1hildren',\r\n            '(f)oot$' : '$1eet',\r\n            '(m)ouse$': '$1ice',\r\n            '(t)ooth$': '$1eeth',\r\n            '(g)oose$': '$1eese',\r\n\r\n            // -news (unchanged)\r\n            '(n)ews$': '$1ews',\r\n\r\n            // -eau -> -eaus\r\n            'eau$': 'eaus',\r\n\r\n            // -sis -> -ses\r\n            '(^analy)sis$'                                                 : '$1ses',\r\n            '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)sis$': '$1$2ses',\r\n\r\n            // -ovie -> -ovies\r\n            '(m)ovie$': '$1ovies',\r\n\r\n            // -eries -> -eries (unchanged)\r\n            '(s)eries$': '$1eries',\r\n\r\n            // -us -> -uses\r\n            '([^a])us$': '$1uses',\r\n            'us$'      : 'uses',\r\n\r\n            // -status -> -statuses\r\n            '(s)tatus$': '$1tatuses',\r\n\r\n            // -campus -> -campuses\r\n            '(c)ampus$': '$1ampuses',\r\n\r\n            // General case (add -s)\r\n            '$': 's'\r\n        };\r\n\r\n        // List of words that change irregularly.\r\n        const irregular: { [key: string]: string } = {\r\n            // A\r\n            'abuse'    : 'abuses',\r\n            'alumna'   : 'alumnae',\r\n            'alumnus'  : 'alumni',\r\n            'analysis' : 'analyses',\r\n            'appendix' : 'appendices',\r\n            'atlas'    : 'atlases',\r\n            'avalanche': 'avalanches',\r\n            'axis'     : 'axes',\r\n            'axe'      : 'axes',\r\n\r\n            // B\r\n            'bacillus' : 'bacilli',\r\n            'bacterium': 'bacteria',\r\n            'basis'    : 'bases',\r\n            'beau'     : 'beaux',\r\n            'beef'     : 'beefs',\r\n            'blouse'   : 'blouses',\r\n            'brother'  : 'brothers',\r\n            'brownie'  : 'brownies',\r\n            'bureau'   : 'bureaux',\r\n\r\n            // C\r\n            'cache'     : 'caches',\r\n            'cactus'    : 'cacti',\r\n            'cafe'      : 'cafes',\r\n            'calf'      : 'calves',\r\n            'canvas'    : 'canvases',\r\n            'cave'      : 'caves',\r\n            'chateau'   : 'chateaux',\r\n            'child'     : 'children',\r\n            'cookie'    : 'cookies',\r\n            'corpus'    : 'corpuses',\r\n            'cow'       : 'cows',\r\n            'crisis'    : 'crises',\r\n            'criterion' : 'criteria',\r\n            'curriculum': 'curricula',\r\n            'curve'     : 'curves',\r\n\r\n            // D\r\n            'datum'    : 'data',\r\n            'deer'     : 'deer',\r\n            'demo'     : 'demos',\r\n            'diagnosis': 'diagnoses',\r\n            'domino'   : 'dominoes',\r\n\r\n            // E\r\n            'echo'    : 'echoes',\r\n            'elf'     : 'elves',\r\n            'ellipsis': 'ellipses',\r\n            'emphasis': 'emphases',\r\n            'epoch'   : 'epochs',\r\n\r\n            // F\r\n            'fish'   : 'fish',\r\n            'focus'  : 'foci',\r\n            'foe'    : 'foes',\r\n            'foot'   : 'feet',\r\n            'formula': 'formulae',\r\n            'fungus' : 'fungi',\r\n\r\n            // G\r\n            'ganglion': 'ganglions',\r\n            'gas'     : 'gases',\r\n            'genie'   : 'genies',\r\n            'genus'   : 'genera',\r\n            'goose'   : 'geese',\r\n            'graffito': 'graffiti',\r\n            'grave'   : 'graves',\r\n\r\n            // H\r\n            'half'        : 'halves',\r\n            'hippopotamus': 'hippopotami',\r\n            'hoax'        : 'hoaxes',\r\n            'hoof'        : 'hoofs',\r\n            'human'       : 'humans',\r\n\r\n            // I\r\n            'iris': 'irises',\r\n\r\n            // K\r\n            'knife': 'knives',\r\n\r\n            // L\r\n            'larva': 'larvae',\r\n            'leaf' : 'leaves',\r\n            'lens' : 'lenses',\r\n            'life' : 'lives',\r\n            'loaf' : 'loaves',\r\n\r\n            // M\r\n            'man'       : 'men',\r\n            'matrix'    : 'matrices',\r\n            'means'     : 'means',\r\n            'medium'    : 'media',\r\n            'memorandum': 'memoranda',\r\n            'money'     : 'monies',\r\n            'mongoose'  : 'mongooses',\r\n            'mouse'     : 'mice',\r\n            'motto'     : 'mottoes',\r\n            'move'      : 'moves',\r\n            'mythos'    : 'mythoi',\r\n\r\n            // N\r\n            'nebula'  : 'nebulae',\r\n            'neurosis': 'neuroses',\r\n            'niche'   : 'niches',\r\n            'niveau'  : 'niveaux',\r\n            'nucleus' : 'nuclei',\r\n            'numen'   : 'numina',\r\n\r\n            // O\r\n            'oasis'    : 'oases',\r\n            'occiput'  : 'occiputs',\r\n            'octopus'  : 'octopuses',\r\n            'offspring': 'offspring',\r\n            'opus'     : 'opuses',\r\n            'ox'       : 'oxen',\r\n\r\n            // P\r\n            'parenthesis': 'parentheses', 'passerby': 'passersby',\r\n            'penis'      : 'penises',\r\n            'person'     : 'people',\r\n            'phenomenon' : 'phenomena',\r\n            'plateau'    : 'plateaux',\r\n\r\n            // R\r\n            'radius'   : 'radii',\r\n            'runner-up': 'runners-up',\r\n\r\n            // S\r\n            'safe'      : 'safes',\r\n            'save'      : 'saves',\r\n            'scarf'     : 'scarves',\r\n            'self'      : 'selves',\r\n            'series'    : 'series',\r\n            'sex'       : 'sexes',\r\n            'sheep'     : 'sheep',\r\n            'shelf'     : 'shelves',\r\n            'sieve'     : 'sieves',\r\n            'soliloquy' : 'soliloquies',\r\n            'son-in-law': 'sons-in-law',\r\n            'species'   : 'species',\r\n            'stadium'   : 'stadiums',\r\n            'stimulus'  : 'stimuli',\r\n            'stratum'   : 'strata',\r\n            'swine'     : 'swine',\r\n            'syllabus'  : 'syllabi',\r\n            'synthesis' : 'syntheses',\r\n\r\n            // T\r\n            'testis' : 'testes',\r\n            'thesis' : 'theses',\r\n            'thief'  : 'thieves',\r\n            'tooth'  : 'teeth',\r\n            'tornado': 'tornadoes',\r\n            'trilby' : 'trilbys',\r\n            'turf'   : 'turfs',\r\n\r\n            // V\r\n            'valve'  : 'valves',\r\n            'volcano': 'volcanoes',\r\n\r\n            // W\r\n            'wave': 'waves',\r\n            'wife': 'wives',\r\n            'wolf': 'wolves',\r\n\r\n            // Z\r\n            'zombie': 'zombies'\r\n        };\r\n\r\n        // List of words that do not change.\r\n        const uncountable: string[] = [\r\n            // A\r\n            'advice',\r\n            'aircraft',\r\n            'amoyese',\r\n            'art',\r\n            'audio',\r\n\r\n            // B\r\n            'baggage',\r\n            'bison',\r\n            'borghese',\r\n            'bream',\r\n            'breeches',\r\n            'britches',\r\n            'buffalo',\r\n            'butter',\r\n\r\n            // C\r\n            'cantus',\r\n            'carp',\r\n            'cattle',\r\n            'chassis',\r\n            'clippers',\r\n            'clothing',\r\n            'coal',\r\n            'cod',\r\n            'coitus',\r\n            'compensation',\r\n            'congoese',\r\n            'contretemps',\r\n            'coreopsis',\r\n            'corps',\r\n            'cotton',\r\n\r\n            // D\r\n            'data',\r\n            'debris',\r\n            'deer',\r\n            'diabetes',\r\n            'djinn',\r\n\r\n            // E\r\n            'education',\r\n            'eland',\r\n            'elk',\r\n            'emoji',\r\n            'equipment',\r\n            'evidence',\r\n\r\n            // F\r\n            'faroese',\r\n            'feedback',\r\n            'fish',\r\n            'flounder',\r\n            'flour',\r\n            'foochowese',\r\n            'food',\r\n            'furniture',\r\n\r\n            // G\r\n            'gallows',\r\n            'genevese',\r\n            'genoese',\r\n            'gilbertese',\r\n            'gold',\r\n\r\n            // H\r\n            'headquarters',\r\n            'herpes',\r\n            'hijinks',\r\n            'homework',\r\n            'hovercraft',\r\n            'hottentotese',\r\n\r\n            // I\r\n            'impatience',\r\n            'information',\r\n            'innings',\r\n\r\n            // J\r\n            'jackanapes',\r\n            'jeans',\r\n            'jedi',\r\n\r\n            // K\r\n            'kin',\r\n            'kiplingese',\r\n            'knowledge',\r\n            'kongoese',\r\n\r\n            // L\r\n            'leather',\r\n            'love',\r\n            'lucchese',\r\n            'luggage',\r\n\r\n            // M\r\n            'mackerel',\r\n            'Maltese',\r\n            'management',\r\n            'metadata',\r\n            'mews',\r\n            'money',\r\n            'moose',\r\n            'mumps',\r\n            'music',\r\n\r\n            // N\r\n            'nankingese',\r\n            'news',\r\n            'nexus',\r\n            'niasese',\r\n            'nutrition',\r\n\r\n            // O\r\n            'oil',\r\n            'offspring',\r\n\r\n            // P\r\n            'patience',\r\n            'pekingese',\r\n            'piedmontese',\r\n            'pike',\r\n            'pincers',\r\n            'pistoiese',\r\n            'plankton',\r\n            'pliers',\r\n            'pokemon',\r\n            'police',\r\n            'polish',\r\n            'portuguese',\r\n            'proceedings',\r\n            'progress',\r\n\r\n            // Q\r\n            // (none yet)\r\n\r\n            // R\r\n            'rabies',\r\n            'rain',\r\n            'research',\r\n            'rhinoceros',\r\n            'rice',\r\n\r\n            // S\r\n            'salmon',\r\n            'sand',\r\n            'sarawakese',\r\n            'scissors',\r\n            'sea[- ]bass',\r\n            'series',\r\n            'shavese',\r\n            'shears',\r\n            'sheep',\r\n            'shrimp',\r\n            'siemens',\r\n            'silk',\r\n            'sms',\r\n            'soap',\r\n            'social media',\r\n            'spacecraft',\r\n            'spam',\r\n            'species',\r\n            'staff',\r\n            'sugar',\r\n            'swine',\r\n\r\n            // T\r\n            'talent',\r\n            'toothpaste',\r\n            'traffic',\r\n            'travel',\r\n            'trousers',\r\n            'trout',\r\n            'tuna',\r\n\r\n            // U\r\n            'us',\r\n\r\n            // V\r\n            'vermontese',\r\n            'vinegar',\r\n\r\n            // W\r\n            'weather',\r\n            'wenchowese',\r\n            'wheat',\r\n            'whiting',\r\n            'wildebeest',\r\n            'wood',\r\n            'wool',\r\n\r\n            // Y\r\n            'yengeese',\r\n            'you'\r\n        ];\r\n\r\n        if (uncountable.indexOf(value.toLowerCase()) >= 0) {\r\n            return matchCase(value, value);\r\n        }\r\n\r\n        for (const word in irregular) {\r\n            const pattern: RegExp = new RegExp(`${word}$`, 'i');\r\n\r\n            if (pattern.test(value)) {\r\n                return matchCase(value.replace(pattern, (irregular[word] as string)), value);\r\n            }\r\n        }\r\n\r\n        for (const word in plural) {\r\n            const pattern: RegExp = new RegExp(word, 'i');\r\n\r\n            if (pattern.test(value)) {\r\n                return matchCase(value.replace(pattern, (plural[word] as string)), value);\r\n            }\r\n        }\r\n\r\n        return matchCase(value, value);\r\n    }\r\n\r\n    /**\r\n     * Pluralize the last word of an English, studly caps case string.\r\n     *\r\n     * @param { string } value\r\n     * @param { number | array } count\r\n     *\r\n     * @return { string }\r\n     */\r\n    static pluralStudly(value: string, count: number | number[] = 2): string {\r\n        const parts: string[] = value.split(/(.)(?=[A-Z])/);\r\n\r\n        const lastWord: string = (parts.pop() as string);\r\n\r\n        return parts.join('') + this.ucfirst(this.plural(lastWord, count));\r\n    }\r\n\r\n    /**\r\n     * Pluralize the last word of an English, Pascal case string.\r\n     *\r\n     * @param { string } value\r\n     * @param { number | array } count\r\n     *\r\n     * @return { string }\r\n     */\r\n    static pluralPascal(value: string, count: number | number[] = 2): string {\r\n        return this.pluralStudly(value, count);\r\n    }\r\n\r\n    /**\r\n     * Generate a random, secure password.\r\n     *\r\n     * @param { number } length\r\n     * @param { boolean } letters\r\n     * @param { boolean } numbers\r\n     * @param { boolean } symbols\r\n     * @param { boolean } spaces\r\n     *\r\n     * @return { string }\r\n     */\r\n    static password(length: number = 32, letters: boolean = true, numbers: boolean = true, symbols: boolean = true, spaces: boolean = false): string {\r\n        let password: string[] = [];\r\n        let collection: string[] = [];\r\n\r\n        while (password.length < length) {\r\n            if (letters) {\r\n                collection = collection.concat([\r\n                    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\r\n                    'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\r\n                    'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\r\n                    'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\r\n                    'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\r\n                ]);\r\n            }\r\n\r\n            if (numbers) {\r\n                collection = collection.concat([\r\n                    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\r\n                ]);\r\n            }\r\n\r\n            if (symbols) {\r\n                collection = collection.concat([\r\n                    '~', '!', '#', '$', '%', '^', '&', '*', '(', ')', '-',\r\n                    '_', '.', ',', '<', '>', '?', '/', '\\\\', '{', '}', '[',\r\n                    ']', '|', ':', ';',\r\n                ]);\r\n            }\r\n\r\n            if (spaces) {\r\n                collection = collection.concat([' ']);\r\n            }\r\n\r\n            password.push((collection[Math.floor(Math.random() * collection.length)] as string));\r\n        }\r\n\r\n        return password.join('');\r\n    }\r\n\r\n    /**\r\n     * Find the position of the first occurrence of a given substring in a string.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string } needle\r\n     * @param { number } offset\r\n     *\r\n     * @return { number | false }\r\n     */\r\n    static position(haystack: string, needle: string, offset: number = 0): number | false {\r\n        const position: number = haystack.indexOf(needle, Math.max(offset, 0));\r\n\r\n        return position !== -1 ? position : false;\r\n    }\r\n\r\n    /**\r\n     * Generate a more truly \"random\" alpha-numeric string.\r\n     *\r\n     * @param { number } length\r\n     *\r\n     * @return { string }\r\n     */\r\n    static random(length: number = 16): string {\r\n        if (this.randomStringFactory !== null) {\r\n            return this.randomStringFactory(length);\r\n        }\r\n\r\n        let byteSize: number = Math.ceil((length) / 3) * 3;\r\n\r\n        let bytes: string = crypto.getRandomValues(new Uint8Array(byteSize)).join('');\r\n\r\n        let string: string = btoa(bytes);\r\n\r\n        ['/', '+', '='].forEach((character: string): string => string = string.replace(character, ''));\r\n\r\n        return string.substring(0, length);\r\n    }\r\n\r\n    /**\r\n     * Set the callable that will be used to generate random strings.\r\n     *\r\n     * @param { ((length: number) => string) | null } factory\r\n     *\r\n     * @return { void }\r\n     */\r\n    static createRandomStringsUsing(factory: ((length: number) => string) | null = null): void {\r\n        this.randomStringFactory = factory;\r\n    }\r\n\r\n    /**\r\n     * Set the sequence that will be used to generate random strings.\r\n     *\r\n     * @param { (string | undefined)[] } sequence\r\n     * @param { Function | null } whenMissing\r\n     *\r\n     * @return { void }\r\n     */\r\n    static createRandomStringsUsingSequence(sequence: (string | undefined)[], whenMissing: Function | null = null): void {\r\n        let next: number = 0;\r\n\r\n        whenMissing ??= (length: number): string => {\r\n            const factoryCache: Function | null = this.randomStringFactory;\r\n\r\n            this.randomStringFactory = null;\r\n\r\n            const randomString: string = this.random(length);\r\n\r\n            this.randomStringFactory = factoryCache;\r\n\r\n            next++;\r\n\r\n            return randomString;\r\n        };\r\n\r\n        this.createRandomStringsUsing((length: number): any => {\r\n            if (sequence[next] !== undefined) {\r\n                return sequence[next++];\r\n            }\r\n\r\n            return whenMissing(length);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Indicate that random strings should be created normally and not using a custom factory.\r\n     *\r\n     * @return { void }\r\n     */\r\n    static createRandomStringsNormally(): void {\r\n        this.randomStringFactory = null;\r\n    }\r\n\r\n    /**\r\n     * Repeat the given string.\r\n     *\r\n     * @param { string } string\r\n     * @param { number } times\r\n     *\r\n     * @return { string }\r\n     */\r\n    static repeat(string: string, times: number = 1): string {\r\n        return string.repeat(times);\r\n    }\r\n\r\n    /**\r\n     * Replace a given value in the string sequentially with an array.\r\n     *\r\n     * @param { string[] } replace\r\n     * @param { string } subject\r\n     * @param { string } search\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceArray(search: string, replace: string[], subject: string): string {\r\n        const segments: string[] = subject.split(search);\r\n\r\n        let result: string = segments.shift()!;\r\n\r\n        segments.forEach((segment: string): string => result += Str.toStringOr(replace.shift() ?? search, search) + segment);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Convert the given value to a string or return the given fallback on failure.\r\n     *\r\n     * @param { * } value\r\n     * @param { string } fallback\r\n     *\r\n     * @return { string }\r\n     */\r\n    static toStringOr(value: any, fallback: string): string {\r\n        try {\r\n            let result: string = String(value);\r\n\r\n            if (result === 'undefined' || result === 'null') {\r\n                return fallback;\r\n            }\r\n\r\n            return result;\r\n        } catch {\r\n            return fallback;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replace the given value in the given string.\r\n     *\r\n     * @param { string | string[] } search\r\n     * @param { string } replace\r\n     * @param { string } subject\r\n     * @param { boolean } caseSensitive\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replace(search: string | string[], replace: string, subject: string, caseSensitive: boolean = true): string {\r\n        search = Array.isArray(search) ? search : [search];\r\n\r\n        search.forEach((term: string | RegExp): void => {\r\n            if (!caseSensitive) {\r\n                term = new RegExp(term, 'gi');\r\n            }\r\n\r\n            subject = subject.replaceAll(term, replace);\r\n        });\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Replace the first occurrence of a given value in the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceFirst(search: string, replace: string, subject: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        let position: number = subject.indexOf(search);\r\n\r\n        if (position !== undefined) {\r\n            return subject.replace(search, replace);\r\n        }\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Replace the first occurrence of the given value if it appears at the start of the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceStart(search: string, replace: string, subject: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        if (this.startsWith(subject, search)) {\r\n            return this.replaceFirst(search, replace, subject);\r\n        }\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Replace the last occurrence of a given value in the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceLast(search: string, replace: string, subject: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        let position: number = subject.lastIndexOf(search);\r\n\r\n        if (position !== 0) {\r\n            return subject.substring(0, position) + replace + subject.substring(position + search.length);\r\n        }\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Replace the last occurrence of a given value if it appears at the end of the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceEnd(search: string, replace: string, subject: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        if (this.endsWith(subject, search)) {\r\n            return this.replaceLast(search, replace, subject);\r\n        }\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Replace the patterns matching the given regular expression.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { string | function } replace\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceMatches(pattern: string, replace: string | Function, subject: string): string {\r\n        const body: string = RegExpString.make(/^\\/(.*)\\/\\w*$/, pattern);\r\n        const flags: string = RegExpString.make(/^\\/.*\\/(\\w*)$/, pattern);\r\n        const expression: RegExp = new RegExp(body, flags + (flags.indexOf('g') !== -1 ? '' : 'g'));\r\n\r\n        if (replace instanceof Function) {\r\n            subject = subject.replace(expression, (matched: string): string => matched);\r\n        }\r\n\r\n        return subject.replace(expression, (replace as string));\r\n    }\r\n\r\n    /**\r\n     * Remove any occurrence of the given string in the subject.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } subject\r\n     * @param { boolean } caseSensitive\r\n     *\r\n     * @return { string }\r\n     */\r\n    static remove(search: string, subject: string, caseSensitive: boolean = true): string {\r\n        return subject.replace(new RegExp(search, caseSensitive ? 'g' : 'gi'), '');\r\n    }\r\n\r\n    /**\r\n     * Reverse the given string.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static reverse(value: string): string {\r\n        return value.split('').reverse().join('');\r\n    }\r\n\r\n    /**\r\n     * Begin a string with a single instance of a given value.\r\n     *\r\n     * @param { string } value\r\n     * @param { string } prefix\r\n     *\r\n     * @return { string }\r\n     */\r\n    static start(value: string, prefix: string): string {\r\n        const quoted: string = preg_quote(prefix, '/');\r\n\r\n        return prefix + value.replace(new RegExp(`^(?:${quoted})+`, 'u'), '');\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to upper-case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static upper(value: string): string {\r\n        return value.toUpperCase();\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to title case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static title(value: string): string {\r\n        return value.split(/[^A-Za-z]/)\r\n            .map((word: string): string => this.ucfirst(word[0] + word.substring(1).toLowerCase()))\r\n            .join(' ');\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to title case for each word.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static headline(value: string): string {\r\n        let parts: string[] = value.split(' ');\r\n\r\n        parts = parts.length > 1\r\n            ? parts.map((part: string): string => this.title(part))\r\n            : this.ucsplit(parts.join('_')).map((part: string): string => this.title(part));\r\n\r\n        let collapsed: string = this.replace(['-', '_', ' '], '_', parts.join('_'));\r\n\r\n        return collapsed.split('_').join(' ').trim();\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to APA-style title case.\r\n     *\r\n     * @see https://apastyle.apa.org/style-grammar-guidelines/capitalization/title-case\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static apa(value: string): string {\r\n        if (value === '') {\r\n            return value;\r\n        }\r\n\r\n        const minorWords: string[] = [\r\n            'and', 'as', 'but', 'for', 'if', 'nor', 'or', 'so', 'yet', 'a', 'an',\r\n            'the', 'at', 'by', 'for', 'in', 'of', 'off', 'on', 'per', 'to', 'up', 'via',\r\n        ];\r\n\r\n        const endPunctuation: string[] = ['.', '!', '?', ':', '—', ','];\r\n\r\n        let words: string[] = value.split(/\\s+/).filter(Boolean);\r\n\r\n        words[0] = (words[0] as string).charAt(0).toUpperCase() + (words[0] as string).slice(1).toLowerCase();\r\n\r\n        for (let i: number = 0; i < words.length; i++) {\r\n            let lowercaseWord: string = (words[i] as string).toLowerCase();\r\n\r\n            if (lowercaseWord.includes('-')) {\r\n                let hyphenatedWords: string[] = lowercaseWord.split('-');\r\n\r\n                hyphenatedWords = hyphenatedWords.map((part: string): string =>\r\n                    (minorWords.includes(part) && part.length <= 3) ? part : this.ucfirst(part)\r\n                );\r\n\r\n                words[i] = hyphenatedWords.join('-');\r\n            } else if (minorWords.includes(lowercaseWord) &&\r\n                lowercaseWord.length <= 3 &&\r\n                !(i === 0 || endPunctuation.includes((words[i - 1] as string).slice(-1)))) {\r\n                words[i] = lowercaseWord;\r\n            } else {\r\n                words[i] = this.ucfirst(lowercaseWord);\r\n            }\r\n        }\r\n\r\n        return words.join(' ');\r\n    }\r\n\r\n    /**\r\n     * Get the singular form of an English word.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static singular(value: string): string {\r\n        // List of rules for singular words.\r\n        const singular: { [key: string]: string } = {\r\n            // Special cases\r\n            '^(.*)(menu)s$': '$1$2',\r\n            '^tights$'     : 'tights',\r\n            '^shorts$'     : 'shorts',\r\n            '^glasses$'    : 'glasses',\r\n            '^pants$'      : 'pants',\r\n\r\n            // -us -> -i (second declension nouns)\r\n            '(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|viri?)i$': '$1us',\r\n            '(vir)i$'                                                             : '$1us',\r\n\r\n            // -a -> -um/on (neuter nouns)\r\n            '([ti])a$'            : '$1um',\r\n            '([ti])a(?<!regatta)$': '$1um',\r\n            '(tax)a$'             : '$1on',\r\n            '(c)riteria$'         : '$1riterion',\r\n\r\n            // -ices -> -ex/ix\r\n            '(matr)ices$'    : '$1ix',\r\n            '(vert|ind)ices$': '$1ex',\r\n\r\n            // -oes -> -o\r\n            '(buffal|her|potat|tomat|volcan)oes$': '$1o',\r\n\r\n            // -ouses -> -ouse\r\n            '(h|bl)ouses$': '$1ouse',\r\n            'ouses$'      : 'ouse',\r\n\r\n            // -ies -> -y\r\n            '([^aeiouy]|qu)ies$': '$1y',\r\n\r\n            // -ves -> -f/fe\r\n            '([lr])ves$'             : '$1f',\r\n            '([^fo])ves$'            : '$1fe',\r\n            '(shea|loa|lea|thie)ves$': '$1f',\r\n            '(li|wi|kni)ves$'        : '$1fe',\r\n\r\n            // -es -> -is\r\n            '(analys|ax|cris|test|thes)es$': '$1is',\r\n            '(cris|ax|test)es$'            : '$1is',\r\n\r\n            // -es exceptions\r\n            '(alias|status|bus)es$'         : '$1',\r\n            '(shoe|slave)s$'                : '$1',\r\n            '(corpse)s$'                    : '$1',\r\n            '(drive|dive|hive|olive|tive)s$': '$1',\r\n\r\n            // -xes\r\n            '([ftw]ax)es': '$1',\r\n\r\n            // -ices -> -ouse\r\n            '([m|l])ice$': '$1ouse',\r\n\r\n            // -es -> -e\r\n            '(o)es$'         : '$1',\r\n            '(x|ch|ss|sh)es$': '$1',\r\n\r\n            // -zes -> -ze\r\n            '(quiz)zes$': '$1',\r\n\r\n            // -en -> - (oxen -> ox)\r\n            '^(ox)en$': '$1',\r\n\r\n            // -people -> -person\r\n            '(p)eople$': '$1erson',\r\n\r\n            // Irregular plurals\r\n            '(m)en$'     : '$1an',\r\n            '(c)hildren$': '$1hild',\r\n            '(f)eet$'    : '$1oot',\r\n            '(m)ice$'    : '$1ouse',\r\n            '(t)eeth$'   : '$1ooth',\r\n            '(g)eese$'   : '$1oose',\r\n\r\n            // -news\r\n            '(n)ews$': '$1ews',\r\n\r\n            // -eau\r\n            'eaus$': 'eau',\r\n\r\n            // -ses -> -sis\r\n            '(^analy)ses$'                                                 : '$1sis',\r\n            '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$': '$1$2sis',\r\n\r\n            // -movies\r\n            '(m)ovies$': '$1ovie',\r\n\r\n            // -series\r\n            '(s)eries$': '$1eries',\r\n\r\n            // -us\r\n            '([^a])uses$': '$1us',\r\n            '(us)es$'    : '$1',\r\n\r\n            // -status\r\n            '(s)tatus(es)?$': '$1tatus',\r\n\r\n            // -campus\r\n            '(c)ampus$': '$1ampus',\r\n\r\n            // General case\r\n            's$': ''\r\n        };\r\n\r\n        // List of words that change irregularly.\r\n        const irregular: { [key: string]: string } = {\r\n            // A\r\n            'abuses'    : 'abuse',\r\n            'alumnae'   : 'alumna',\r\n            'alumni'    : 'alumnus',\r\n            'analyses'  : 'analysis',\r\n            'appendices': 'appendix',\r\n            'atlases'   : 'atlas',\r\n            'avalanches': 'avalanche',\r\n            'axes'      : 'axis',  // Also covers 'axe'\r\n\r\n            // B\r\n            'bacilli' : 'bacillus',\r\n            'bacteria': 'bacterium',\r\n            'bases'   : 'basis',\r\n            'beaux'   : 'beau',\r\n            'beefs'   : 'beef',\r\n            'blouses' : 'blouse',\r\n            'brothers': 'brother',\r\n            'brownies': 'brownie',\r\n            'bureaux' : 'bureau',\r\n\r\n            // C\r\n            'caches'   : 'cache',\r\n            'cacti'    : 'cactus',\r\n            'cafes'    : 'cafe',\r\n            'calves'   : 'calf',\r\n            'canvases' : 'canvas',\r\n            'caves'    : 'cave',\r\n            'chateaux' : 'chateau',\r\n            'children' : 'child',\r\n            'cookies'  : 'cookie',\r\n            'corpuses' : 'corpus',\r\n            'cows'     : 'cow',\r\n            'crises'   : 'crisis',\r\n            'criteria' : 'criterion',\r\n            'curricula': 'curriculum',\r\n            'curves'   : 'curve',\r\n\r\n            // D\r\n            'deer'     : 'deer',\r\n            'demos'    : 'demo',\r\n            'diagnoses': 'diagnosis',\r\n            'dominoes' : 'domino',\r\n\r\n            // E\r\n            'echoes'  : 'echo',\r\n            'elves'   : 'elf',\r\n            'ellipses': 'ellipsis',\r\n            'emphases': 'emphasis',\r\n            'epochs'  : 'epoch',\r\n\r\n            // F\r\n            'fish'    : 'fish',\r\n            'foci'    : 'focus',\r\n            'foes'    : 'foe',\r\n            'feet'    : 'foot',\r\n            'formulae': 'formula',\r\n            'fungi'   : 'fungus',\r\n\r\n            // G\r\n            'ganglions': 'ganglion',\r\n            'gases'    : 'gas',\r\n            'genies'   : 'genie',\r\n            'genera'   : 'genus',\r\n            'geese'    : 'goose',\r\n            'graffiti' : 'graffito',\r\n            'graves'   : 'grave',\r\n\r\n            // H\r\n            'halves'     : 'half',\r\n            'hippopotami': 'hippopotamus',\r\n            'hoaxes'     : 'hoax',\r\n            'hoofs'      : 'hoof',  // Also acceptable: 'hooves'\r\n            'humans'     : 'human',\r\n\r\n            // I\r\n            'irises': 'iris',\r\n\r\n            // K\r\n            'knives': 'knife',\r\n\r\n            // L\r\n            'larvae': 'larva',\r\n            'leaves': 'leaf',\r\n            'lenses': 'lens',\r\n            'lives' : 'life',\r\n            'loaves': 'loaf',\r\n\r\n            // M\r\n            'men'      : 'man',\r\n            'matrices' : 'matrix',\r\n            'means'    : 'means',\r\n            'media'    : 'medium',\r\n            'memoranda': 'memorandum',\r\n            'monies'   : 'money',\r\n            'mongooses': 'mongoose',\r\n            'mice'     : 'mouse',\r\n            'mottoes'  : 'motto',\r\n            'moves'    : 'move',\r\n            'mythoi'   : 'mythos',\r\n\r\n            // N\r\n            'nebulae' : 'nebula',\r\n            'neuroses': 'neurosis',\r\n            'niches'  : 'niche',\r\n            'niveaux' : 'niveau',\r\n            'nuclei'  : 'nucleus',\r\n            'numina'  : 'numen',\r\n\r\n            // O\r\n            'oases'    : 'oasis',\r\n            'occiputs' : 'occiput',\r\n            'octopuses': 'octopus',\r\n            'offspring': 'offspring',\r\n            'opuses'   : 'opus',\r\n            'oxen'     : 'ox',\r\n\r\n            // P\r\n            'parentheses': 'parenthesis',\r\n            'passersby'  : 'passerby',\r\n            'penises'    : 'penis',\r\n            'people'     : 'person',\r\n            'phenomena'  : 'phenomenon',\r\n            'plateaux'   : 'plateau',\r\n\r\n            // R\r\n            'radii'     : 'radius',\r\n            'runners-up': 'runner-up',\r\n\r\n            // S\r\n            'safes'      : 'safe',\r\n            'saves'      : 'save',\r\n            'scarves'    : 'scarf',\r\n            'selves'     : 'self',\r\n            'series'     : 'series',\r\n            'sexes'      : 'sex',\r\n            'sheep'      : 'sheep',\r\n            'shelves'    : 'shelf',\r\n            'sieves'     : 'sieve',\r\n            'soliloquies': 'soliloquy',\r\n            'sons-in-law': 'son-in-law',\r\n            'species'    : 'species',\r\n            'stadiums'   : 'stadium',\r\n            'stimuli'    : 'stimulus',\r\n            'strata'     : 'stratum',\r\n            'swine'      : 'swine',\r\n            'syllabi'    : 'syllabus',\r\n            'syntheses'  : 'synthesis',\r\n\r\n            // T\r\n            'testes'   : 'testis',\r\n            'theses'   : 'thesis',\r\n            'thieves'  : 'thief',\r\n            'teeth'    : 'tooth',\r\n            'tornadoes': 'tornado',\r\n            'trilbys'  : 'trilby',\r\n            'turfs'    : 'turf',  // Also acceptable: 'turves'\r\n\r\n            // V\r\n            'valves'   : 'valve',\r\n            'volcanoes': 'volcano',\r\n\r\n            // W\r\n            'waves' : 'wave',\r\n            'wives' : 'wife',\r\n            'wolves': 'wolf',\r\n\r\n            // Z\r\n            'zombies': 'zombie'\r\n        };\r\n\r\n        // List of words that do not change.\r\n        const uncountable: string[] = [\r\n            // A\r\n            'advice',\r\n            'aircraft',\r\n            'amoyese',\r\n            'art',\r\n            'audio',\r\n\r\n            // B\r\n            'baggage',\r\n            'bison',\r\n            'borghese',\r\n            'bream',\r\n            'breeches',\r\n            'britches',\r\n            'buffalo',\r\n            'butter',\r\n\r\n            // C\r\n            'cantus',\r\n            'carp',\r\n            'cattle',\r\n            'chassis',\r\n            'clippers',\r\n            'clothing',\r\n            'coal',\r\n            'cod',\r\n            'coitus',\r\n            'compensation',\r\n            'congoese',\r\n            'contretemps',\r\n            'coreopsis',\r\n            'corps',\r\n            'cotton',\r\n\r\n            // D\r\n            'data',\r\n            'debris',\r\n            'deer',\r\n            'diabetes',\r\n            'djinn',\r\n\r\n            // E\r\n            'education',\r\n            'eland',\r\n            'elk',\r\n            'emoji',\r\n            'equipment',\r\n            'evidence',\r\n\r\n            // F\r\n            'faroese',\r\n            'feedback',\r\n            'fish',\r\n            'flounder',\r\n            'flour',\r\n            'foochowese',\r\n            'food',\r\n            'furniture',\r\n\r\n            // G\r\n            'gallows',\r\n            'genevese',\r\n            'genoese',\r\n            'gilbertese',\r\n            'gold',\r\n\r\n            // H\r\n            'headquarters',\r\n            'herpes',\r\n            'hijinks',\r\n            'homework',\r\n            'hovercraft',\r\n            'hottentotese',\r\n\r\n            // I\r\n            'impatience',\r\n            'information',\r\n            'innings',\r\n\r\n            // J\r\n            'jackanapes',\r\n            'jeans',\r\n            'jedi',\r\n\r\n            // K\r\n            'kin',\r\n            'kiplingese',\r\n            'knowledge',\r\n            'kongoese',\r\n\r\n            // L\r\n            'leather',\r\n            'love',\r\n            'lucchese',\r\n            'luggage',\r\n\r\n            // M\r\n            'mackerel',\r\n            'Maltese',\r\n            'management',\r\n            'metadata',\r\n            'mews',\r\n            'money',\r\n            'moose',\r\n            'mumps',\r\n            'music',\r\n\r\n            // N\r\n            'nankingese',\r\n            'news',\r\n            'nexus',\r\n            'niasese',\r\n            'nutrition',\r\n\r\n            // O\r\n            'oil',\r\n            'offspring',\r\n\r\n            // P\r\n            'patience',\r\n            'pekingese',\r\n            'piedmontese',\r\n            'pike',\r\n            'pincers',\r\n            'pistoiese',\r\n            'plankton',\r\n            'pliers',\r\n            'pokemon',\r\n            'police',\r\n            'polish',\r\n            'portuguese',\r\n            'proceedings',\r\n            'progress',\r\n\r\n            // Q\r\n            // (none yet)\r\n\r\n            // R\r\n            'rabies',\r\n            'rain',\r\n            'research',\r\n            'rhinoceros',\r\n            'rice',\r\n\r\n            // S\r\n            'salmon',\r\n            'sand',\r\n            'sarawakese',\r\n            'scissors',\r\n            'sea[- ]bass',\r\n            'series',\r\n            'shavese',\r\n            'shears',\r\n            'sheep',\r\n            'shrimp',\r\n            'siemens',\r\n            'silk',\r\n            'sms',\r\n            'soap',\r\n            'social media',\r\n            'spacecraft',\r\n            'spam',\r\n            'species',\r\n            'staff',\r\n            'sugar',\r\n            'swine',\r\n\r\n            // T\r\n            'talent',\r\n            'toothpaste',\r\n            'traffic',\r\n            'travel',\r\n            'trousers',\r\n            'trout',\r\n            'tuna',\r\n\r\n            // U\r\n            'us',\r\n\r\n            // V\r\n            'vermontese',\r\n            'vinegar',\r\n\r\n            // W\r\n            'weather',\r\n            'wenchowese',\r\n            'wheat',\r\n            'whiting',\r\n            'wildebeest',\r\n            'wood',\r\n            'wool',\r\n\r\n            // Y\r\n            'yengeese',\r\n            'you'\r\n        ];\r\n\r\n        if (uncountable.indexOf(value.toLowerCase()) >= 0) {\r\n            return matchCase(value, value);\r\n        }\r\n\r\n        for (const word in irregular) {\r\n            const pattern: RegExp = new RegExp(`${word}$`, 'i');\r\n\r\n            if (pattern.test(value)) {\r\n                return matchCase(value.replace(pattern, (irregular[word] as string)), value);\r\n            }\r\n        }\r\n\r\n        for (const word in singular) {\r\n            const pattern: RegExp = new RegExp(word, 'i');\r\n\r\n            if (pattern.test(value)) {\r\n                return matchCase(value.replace(pattern, (singular[word] as string)), value);\r\n            }\r\n        }\r\n\r\n        return matchCase(value, value);\r\n    }\r\n\r\n    /**\r\n     * Generate a URL friendly \"slug\" from a given string.\r\n     *\r\n     * @param { string } title\r\n     * @param { string } separator\r\n     * @param { object } dictionary\r\n     *\r\n     * @return { string }\r\n     */\r\n    static slug(title: string, separator: string = '-', dictionary: { [key: string]: string } = { '@': 'at' }): string {\r\n        let flip: string = separator === '-' ? '_' : '-';\r\n\r\n        title = title.replace(`![${preg_quote(flip)}]+!u`, separator);\r\n\r\n        for (let value in dictionary) {\r\n            dictionary[value] = separator + dictionary[value] + separator;\r\n        }\r\n\r\n        for (let value in dictionary) {\r\n            title = title.replaceAll(value, (dictionary[value] as string));\r\n        }\r\n\r\n        title = this.lower(title).replace(`![^${preg_quote(separator)}pLpNs]+!u`, '');\r\n\r\n        return title.replaceAll(/\\s/g, separator).replace(new RegExp('\\\\' + separator + '+', 'g'), separator);\r\n    }\r\n\r\n    /**\r\n     * Convert a string to snake case.\r\n     *\r\n     * @param { string } value\r\n     * @param { string } delimiter\r\n     *\r\n     * @return { string }\r\n     */\r\n    static snake(value: string, delimiter: string = '_'): string {\r\n        value = ucwords(value).replace(new RegExp(/\\s+/, 'u'), '');\r\n\r\n        value = this.lower(value.replace(new RegExp(/(.)(?=[A-Z])/, 'ug'), `$1${delimiter}`));\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Remove all whitespace from both ends of a string.\r\n     *\r\n     * @param { string } value\r\n     * @param { string | null } characters\r\n     *\r\n     * @return { string }\r\n     */\r\n    static trim(value: string, characters: string | null = null): string {\r\n        if (characters === null) {\r\n            return value.trim();\r\n        }\r\n\r\n        if (characters === '') {\r\n            return value;\r\n        }\r\n\r\n        if (characters === ' ') {\r\n            return value.replaceAll(' ', '');\r\n        }\r\n\r\n        characters = characters.split('').join('|');\r\n\r\n        const regex: RegExp = new RegExp(`${characters}+`, 'g');\r\n\r\n        return value.replace(regex, '') ?? value;\r\n    }\r\n\r\n    /**\r\n     * Remove all whitespace from the beginning of a string.\r\n     *\r\n     * @param { string } value\r\n     * @param { string | null } characters\r\n     *\r\n     * @return { string }\r\n     */\r\n    static ltrim(value: string, characters: string | null = null): string {\r\n        if (characters === null) {\r\n            return value.trimStart();\r\n        }\r\n\r\n        if (characters === '') {\r\n            return value;\r\n        }\r\n\r\n        if (characters === ' ') {\r\n            return this.replaceStart(' ', '', value);\r\n        }\r\n\r\n        characters.split('').forEach((character: string): string => value = this.replaceStart(character, '', value));\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Remove all whitespace from the end of a string.\r\n     *\r\n     * @param { string } value\r\n     * @param { string | null } characters\r\n     *\r\n     * @return { string }\r\n     */\r\n    static rtrim(value: string, characters: string | null = null): string {\r\n        if (characters === null) {\r\n            return value.trimEnd();\r\n        }\r\n\r\n        if (characters === '') {\r\n            return value;\r\n        }\r\n\r\n        if (characters === ' ') {\r\n            return this.replaceEnd(' ', '', value);\r\n        }\r\n\r\n        characters.split('').forEach((character: string): string => value = this.replaceEnd(character, '', value));\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Remove all \"extra\" blank space from the given string.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static squish(value: string): string {\r\n        return value.replace(/\\s\\s+/g, ' ').trim();\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string starts with a given substring.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string | string[] } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static startsWith(haystack: string, needles: string | string[]): boolean {\r\n        let result: boolean = false;\r\n\r\n        needles = Array.isArray(needles) ? needles : [needles];\r\n\r\n        needles.forEach((needle: string): void => {\r\n            if (needle !== '' && haystack.startsWith(needle)) {\r\n                result = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string doesn't start with a given substring.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string | string[] } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static doesntStartWith(haystack: string, needles: string | string[]): boolean {\r\n        return !this.startsWith(haystack, needles);\r\n    }\r\n\r\n    /**\r\n     * Convert a value to studly caps case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static studly(value: string): string {\r\n        const words: string[] = this.replace(['-', '_'], ' ', value).split(' ');\r\n\r\n        const studlyWords: string[] = words.map((word: string): string => this.ucfirst(word));\r\n\r\n        return studlyWords.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert a value to Pascal case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static pascal(value: string): string {\r\n        return this.studly(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the portion of the string specified by the start and length parameters.\r\n     *\r\n     * @param { string } string\r\n     * @param { number } start\r\n     * @param { number | null } length\r\n     *\r\n     * @return { string }\r\n     */\r\n    static substr(string: string, start: number, length: number | null = null): string {\r\n        if (start < 0) {\r\n            start = string.length + start;\r\n\r\n            if (start < 0) {\r\n                start = 0;\r\n            }\r\n        }\r\n\r\n        if (length !== null && length < 0) {\r\n            return '';\r\n        }\r\n\r\n        if (length === 0 || length === null) {\r\n            return string.substring(start, length ?? string.length);\r\n        }\r\n\r\n        return string.substring(start, start + length);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of substring occurrences.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string } needle\r\n     * @param { number } offset\r\n     * @param { number | null } length\r\n     *\r\n     * @return { number }\r\n     */\r\n    static substrCount(haystack: string, needle: string, offset: number = 0, length: number | null = null): number {\r\n        if (length) {\r\n            return haystack.substring(offset).substring(0, length).split(needle).length - 1;\r\n        }\r\n\r\n        return haystack.substring(offset).split(needle).length - 1;\r\n    }\r\n\r\n    /**\r\n     * Replace text within a portion of a string.\r\n     *\r\n     * @param { string } string\r\n     * @param { string } replace\r\n     * @param { number } offset\r\n     * @param { number | null } length\r\n     *\r\n     * @return { string }\r\n     */\r\n    static substrReplace(string: string, replace: string, offset: number = 0, length: number | null = null): string {\r\n        if (length !== null) {\r\n            return string.substring(0, offset) + replace + string.substring(offset);\r\n        }\r\n\r\n        return string.substring(0, offset) + replace;\r\n    }\r\n\r\n    /**\r\n     * Swap multiple keywords in a string with other keywords.\r\n     *\r\n     * @param { object } map\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static swap(map: Record<string, string>, subject: string): string {\r\n        for (const value in map) {\r\n            subject = subject.replace(value, (map[value] as string));\r\n        }\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Take the first or last {limit} characters of a string.\r\n     *\r\n     * @param { string } string\r\n     * @param { number } limit\r\n     *\r\n     * @return { string }\r\n     */\r\n    static take(string: string, limit: number): string {\r\n        if (limit < 0) {\r\n            return this.substr(string, limit);\r\n        }\r\n\r\n        return this.substr(string, 0, limit);\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to Base64 encoding.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { string }\r\n     */\r\n    static toBase64(string: string): string {\r\n        return btoa(string);\r\n    }\r\n\r\n    /**\r\n     * Decode the given Base64 encoded string.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { string }\r\n     */\r\n    static fromBase64(string: string): string {\r\n        return atob(string);\r\n    }\r\n\r\n    /**\r\n     * Make a string's first character lowercase.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { string }\r\n     */\r\n    static lcfirst(string: string): string {\r\n        return this.lower(this.substr(string, 0, 1)) + this.substr(string, 1, string.length);\r\n    }\r\n\r\n    /**\r\n     * Make a string's first character uppercase.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { string }\r\n     */\r\n    static ucfirst(string: string): string {\r\n        return this.upper(this.substr(string, 0, 1)) + this.substr(string, 1, string.length);\r\n    }\r\n\r\n    /**\r\n     * Split a string into pieces by uppercase characters.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { string[] }\r\n     */\r\n    static ucsplit(string: string): string[] {\r\n        return string.split(new RegExp(/(?=\\p{Lu})/u));\r\n    }\r\n\r\n    /**\r\n     * Get the number of words a string contains.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { number }\r\n     */\r\n    static wordCount(string: string): number {\r\n        return string.split(/\\s+/).length;\r\n    }\r\n\r\n    /**\r\n     * Wrap a string to a given number of characters.\r\n     *\r\n     * @param { string } string\r\n     * @param { number } characters\r\n     * @param { string } breakStr\r\n     * @param { boolean } cutLongWords\r\n     *\r\n     * @returns { string }\r\n     */\r\n    static wordWrap(string: string, characters: number = 75, breakStr: string = '\\n', cutLongWords: boolean = false): string {\r\n        const breakWithSpace: string = cutLongWords ? breakStr + '\\u00ad' : breakStr;\r\n        const regex: RegExp = new RegExp(`.{1,${characters}}`, 'g');\r\n        const result: string = string.replace(regex, (substr: string): string => substr.trim() + breakWithSpace);\r\n\r\n        return this.replaceLast(breakStr, '', result);\r\n    }\r\n\r\n    /**\r\n     * Generate a UUID (version 4).\r\n     *\r\n     * @return { string }\r\n     */\r\n    static uuid(): string {\r\n        if (this.uuidFactory !== null) {\r\n            return this.uuidFactory();\r\n        }\r\n\r\n        let time: number = parseInt((Math.random() * Number.MAX_SAFE_INTEGER + 1).toString().substring(0, 13));\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (character: string): string {\r\n            let randomChar: number = (time + Math.random() * 16) % 16 | 0;\r\n            time = Math.floor(time / 16);\r\n\r\n            return (character === 'x' ? randomChar : (randomChar & 0x3 | 0x8)).toString(16);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generate a UUID (version 7).\r\n     *\r\n     * @return { string }\r\n     */\r\n    static uuid7(time: Date | null = null): string {\r\n        if (this.uuidFactory !== null) {\r\n            return this.uuidFactory();\r\n        }\r\n\r\n        const values = new Uint32Array(3);\r\n\r\n        crypto.getRandomValues(values);\r\n\r\n        const timestamp: number = time ? time.getTime() : Date.now();\r\n\r\n        if (timestamp < 0 || timestamp > 281474976710655) {\r\n            throw new RangeError('Timestamp must be a 48-bit positive integer');\r\n        }\r\n\r\n        const [r1, r2, r3] = values;\r\n\r\n        const randomA: number = (r1 as number) & 0xfff;\r\n        const randomBHi: number = (r2 as number) & 0x3fffffff;\r\n        const randomBLo: number = r3 as number;\r\n\r\n        const bytes = new Uint8Array(16);\r\n\r\n        bytes[0] = timestamp / 2 ** 40;\r\n        bytes[1] = timestamp / 2 ** 32;\r\n        bytes[2] = timestamp / 2 ** 24;\r\n        bytes[3] = timestamp / 2 ** 16;\r\n        bytes[4] = timestamp / 2 ** 8;\r\n        bytes[5] = timestamp;\r\n        bytes[6] = 0x70 | (randomA >>> 8);\r\n        bytes[7] = randomA;\r\n        bytes[8] = 0x80 | (randomBHi >>> 24);\r\n        bytes[9] = randomBHi >>> 16;\r\n        bytes[10] = randomBHi >>> 8;\r\n        bytes[11] = randomBHi;\r\n        bytes[12] = randomBLo >>> 24;\r\n        bytes[13] = randomBLo >>> 16;\r\n        bytes[14] = randomBLo >>> 8;\r\n        bytes[15] = randomBLo;\r\n\r\n        const digits = '0123456789abcdef';\r\n\r\n        let result: string = '';\r\n\r\n        for (let i: number = 0; i < 16; i++) {\r\n            result += digits.charAt(bytes[i]! >>> 4);\r\n            result += digits.charAt(bytes[i]! & 0xf);\r\n\r\n            if (i === 3 || i === 5 || i === 7 || i === 9) {\r\n                result += '-';\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Generate a time-ordered UUID (version 4).\r\n     *\r\n     * @return { string }\r\n     */\r\n    static orderedUuid(): string {\r\n        if (this.uuidFactory !== null) {\r\n            return this.uuidFactory();\r\n        }\r\n\r\n        let time: number = new Date().getTime();\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (character: string): string {\r\n            let randomChar: number = (time + Math.random() * 16) % 16 | 0;\r\n            time = Math.floor(time / 16);\r\n\r\n            return (character === 'x' ? randomChar : (randomChar & 0x3 | 0x8)).toString(16);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the callable that will be used to generate UUIDs.\r\n     *\r\n     * @param { Function | null } factory\r\n     *\r\n     * @return { void }\r\n     */\r\n    static createUuidsUsing(factory: Function | null = null): void {\r\n        this.uuidFactory = factory;\r\n    }\r\n\r\n    /**\r\n     * Set the sequence that will be used to generate random strings.\r\n     *\r\n     * @param { (string | undefined)[] } sequence\r\n     * @param { Function | null } whenMissing\r\n     *\r\n     * @return { void }\r\n     */\r\n    static createUuidsUsingSequence(sequence: (string | undefined)[], whenMissing: Function | null = null): void {\r\n        let next: number = 0;\r\n\r\n        whenMissing ??= (): string => {\r\n            const factoryCache: Function | null = this.uuidFactory;\r\n\r\n            this.uuidFactory = null;\r\n\r\n            const uuid: string = this.uuid();\r\n\r\n            this.uuidFactory = factoryCache;\r\n\r\n            next++;\r\n\r\n            return uuid;\r\n        };\r\n\r\n        this.createUuidsUsing(() => {\r\n            if (sequence[next] !== undefined) {\r\n                return sequence[next++];\r\n            }\r\n\r\n            return whenMissing();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Always return the same UUID when generating new UUIDs.\r\n     *\r\n     * @param { Function | null } callback\r\n     *\r\n     * @return { string }\r\n     */\r\n    static freezeUuids(callback: Function | null = null): string {\r\n        const uuid: string = this.uuid();\r\n\r\n        this.createUuidsUsing((): string => uuid);\r\n\r\n        if (callback !== null) {\r\n            try {\r\n                callback(uuid);\r\n            } finally {\r\n                this.createUuidsNormally();\r\n            }\r\n        }\r\n\r\n        return uuid;\r\n    }\r\n\r\n    /**\r\n     * Indicate that UUIDs should be created normally and not using a custom factory.\r\n     *\r\n     * @return { void }\r\n     */\r\n    static createUuidsNormally(): void {\r\n        this.uuidFactory = null;\r\n    }\r\n\r\n    /**\r\n     * Generate a ULID.\r\n     *\r\n     * @return { string }\r\n     */\r\n    static ulid(): string {\r\n        if (this.ulidFactory !== null) {\r\n            return this.ulidFactory();\r\n        }\r\n\r\n        const encoding: string = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\r\n        const encodingLength: number = encoding.length;\r\n        const timeLength: number = 10;\r\n        const randomLength: number = 16;\r\n\r\n        /**\r\n         * Generate random Encoding Time.\r\n         *\r\n         * @return { string }\r\n         */\r\n        function generateEncodedTime(): string {\r\n            let encodedTime: string = '';\r\n            let now: number = new Date().getTime();\r\n\r\n            for (let length: number = timeLength; length > 0; length--) {\r\n                const mod: number = now % encodingLength;\r\n                encodedTime = encoding.charAt(mod) + encodedTime;\r\n                now = (now - mod) / encodingLength;\r\n            }\r\n\r\n            return encodedTime;\r\n        }\r\n\r\n        /**\r\n         * Generate random Number.\r\n         *\r\n         * @return { number }\r\n         */\r\n        function generateRandomNumber(): number {\r\n            const buffer: Uint8Array = new Uint8Array(1);\r\n\r\n            crypto.getRandomValues(buffer);\r\n\r\n            return (buffer[0] as number) / 0xff;\r\n        }\r\n\r\n        /**\r\n         * Generate random String.\r\n         *\r\n         * @return { string }\r\n         */\r\n        function generateRandomString(): string {\r\n            let string: string = '';\r\n\r\n            for (let length: number = randomLength; length > 0; length--) {\r\n                let randomNumber: number = Math.floor(generateRandomNumber() * encodingLength);\r\n\r\n                if (randomNumber === encodingLength) {\r\n                    randomNumber = encodingLength - 1;\r\n                }\r\n\r\n                string += encoding.charAt(randomNumber);\r\n            }\r\n\r\n            return string;\r\n        }\r\n\r\n        return generateEncodedTime() + generateRandomString();\r\n    }\r\n\r\n    /**\r\n     * Set the callable that will be used to generate ULIDs.\r\n     *\r\n     * @param { Function | null } factory\r\n     *\r\n     * @return { void }\r\n     */\r\n    static createUlidsUsing(factory: Function | null = null): void {\r\n        this.ulidFactory = factory;\r\n    }\r\n\r\n    /**\r\n     * Set the sequence that will be used to generate ULIDs.\r\n     *\r\n     * @param { (string | undefined)[] } sequence\r\n     * @param { Function | null } whenMissing\r\n     *\r\n     * @return { void }\r\n     */\r\n    static createUlidsUsingSequence(sequence: (string | undefined)[], whenMissing: Function | null = null): void {\r\n        let next: number = 0;\r\n\r\n        whenMissing ??= (): string => {\r\n            const factoryCache: Function | null = this.ulidFactory;\r\n\r\n            this.ulidFactory = null;\r\n\r\n            const ulid: string = this.ulid();\r\n\r\n            this.ulidFactory = factoryCache;\r\n\r\n            next++;\r\n\r\n            return ulid;\r\n        };\r\n\r\n        this.createUlidsUsing(() => {\r\n            if (sequence[next] !== undefined) {\r\n                return sequence[next++];\r\n            }\r\n\r\n            return whenMissing();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Always return the same UUID when generating new UUIDs.\r\n     *\r\n     * @param { Function | null } callback\r\n     *\r\n     * @return { string }\r\n     */\r\n    static freezeUlids(callback: Function | null = null): string {\r\n        const ulid: string = this.ulid();\r\n\r\n        this.createUlidsUsing(() => ulid);\r\n\r\n        if (callback !== null) {\r\n            try {\r\n                callback(ulid);\r\n            } finally {\r\n                this.createUlidsNormally();\r\n            }\r\n        }\r\n\r\n        return ulid;\r\n    }\r\n\r\n    /**\r\n     * Indicate that ULIDs should be created normally and not using a custom factory.\r\n     *\r\n     * @return { void }\r\n     */\r\n    static createUlidsNormally(): void {\r\n        this.ulidFactory = null;\r\n    }\r\n}\r\n\r\nexport class Stringable {\r\n    /**\r\n     * The underlying string value.\r\n     *\r\n     * @private\r\n     *\r\n     * @type { string }\r\n     */\r\n    readonly #value: string;\r\n\r\n    /**\r\n     * Create a new instance of the class.\r\n     *\r\n     * @param { string } value\r\n     */\r\n    constructor(value: string = '') {\r\n        this.#value = value;\r\n    }\r\n\r\n    /**\r\n     * Return the remainder of a string after the first occurrence of a given value.\r\n     *\r\n     * @param { string } search\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    after(search: string): Stringable {\r\n        return new Stringable(Str.after(this.#value, search));\r\n    }\r\n\r\n    /**\r\n     * Return the remainder of a string after the last occurrence of a given value.\r\n     *\r\n     * @param { string } search\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    afterLast(search: string): Stringable {\r\n        return new Stringable(Str.afterLast(this.#value, search));\r\n    }\r\n\r\n    /**\r\n     * Append the given values to the string.\r\n     *\r\n     * @param { string | string[] } values\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    append(...values: string[]): Stringable {\r\n        return new Stringable(this.#value + values.join(''));\r\n    }\r\n\r\n    /**\r\n     * Append a new line to the string.\r\n     *\r\n     * @param { number } count\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    newLine(count: number = 1): Stringable {\r\n        return this.append('\\n'.repeat(count));\r\n    }\r\n\r\n    /**\r\n     * Transliterate a UTF-8 value to ASCII.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    ascii(): Stringable {\r\n        return new Stringable(Str.ascii(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Get the trailing name component of the path.\r\n     *\r\n     * @param { string } suffix\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    basename(suffix: string = ''): Stringable {\r\n        let basename: string = this.#value;\r\n\r\n        if (this.#value.split('/')[0] !== this.#value) {\r\n            basename = (this.#value.split('/').pop() as string);\r\n        }\r\n\r\n        if (this.#value.split('\\\\')[0] !== this.#value) {\r\n            basename = (this.#value.split('\\\\').pop() as string);\r\n        }\r\n\r\n        if (suffix !== '') {\r\n            basename = basename.replace(suffix, '');\r\n        }\r\n\r\n        return new Stringable(basename);\r\n    }\r\n\r\n    /**\r\n     * Get the character at the specified index.\r\n     *\r\n     * @param { number } index\r\n     *\r\n     * @return { string | false }\r\n     */\r\n    charAt(index: number): string | false {\r\n        return Str.charAt(this.#value, index);\r\n    }\r\n\r\n    /**\r\n     * Remove the given string if it exists at the start of the current string.\r\n     *\r\n     * @param { string | string[] }  needle\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    chopStart(needle: string | string[]): Stringable {\r\n        return new Stringable(Str.chopStart(this.#value, needle));\r\n    }\r\n\r\n    /**\r\n     * Remove the given string if it exists at the end of the current string.\r\n     *\r\n     * @param { string | string[] }  needle\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    chopEnd(needle: string | string[]): Stringable {\r\n        return new Stringable(Str.chopEnd(this.#value, needle));\r\n    }\r\n\r\n    /**\r\n     * Get the basename of the class path.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    classBasename(): Stringable {\r\n        return this.basename();\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string before the first occurrence of a given value.\r\n     *\r\n     * @param { string } search\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    before(search: string): Stringable {\r\n        return new Stringable(Str.before(this.#value, search));\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string before the last occurrence of a given value.\r\n     *\r\n     * @param { string } search\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    beforeLast(search: string): Stringable {\r\n        return new Stringable(Str.beforeLast(this.#value, search));\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string between two given values.\r\n     *\r\n     * @param { string } from\r\n     * @param { string } to\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    between(from: string, to: string): Stringable {\r\n        return new Stringable(Str.between(this.#value, from, to));\r\n    }\r\n\r\n    /**\r\n     * Get the smallest possible portion of a string between two given values.\r\n     *\r\n     * @param { string } from\r\n     * @param { string } to\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    betweenFirst(from: string, to: string): Stringable {\r\n        return new Stringable(Str.betweenFirst(this.#value, from, to));\r\n    }\r\n\r\n    /**\r\n     * Convert a value to camel case.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    camel(): Stringable {\r\n        return new Stringable(Str.camel(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string contains a given substring.\r\n     *\r\n     * @param  { string | string[] } needles\r\n     * @param  { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    contains(needles: string | string[], ignoreCase: boolean = false): boolean {\r\n        return Str.contains(this.#value, needles, ignoreCase);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string contains all array values.\r\n     *\r\n     * @param { string[] } needles\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    containsAll(needles: string[], ignoreCase: boolean = false): boolean {\r\n        return Str.containsAll(this.#value, needles, ignoreCase);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string doesn't contain a given substring.\r\n     *\r\n     * @param  { string | string[] } needles\r\n     * @param  { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    doesntContain(needles: string | string[], ignoreCase: boolean = false): boolean {\r\n        return !this.contains(needles, ignoreCase);\r\n    }\r\n\r\n    /**\r\n     * Convert the case of a string.\r\n     *\r\n     * @param { Mode | number } mode\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    convertCase(mode: Mode | number = Mode.MB_CASE_FOLD): Stringable {\r\n        return new Stringable(Str.convertCase(this.#value, mode));\r\n    }\r\n\r\n    /**\r\n     * Replace consecutive instances of a given character with a single character in the given string.\r\n     *\r\n     * @param { string | string[] } characters\r\n     *\r\n     * @return { string }\r\n     */\r\n    deduplicate(characters: string | string[] = ' '): Stringable {\r\n        return new Stringable(Str.deduplicate(this.#value, characters));\r\n    }\r\n\r\n    /**\r\n     * Get the parent directory's path.\r\n     *\r\n     * @param { number } levels\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    dirname(levels: number = 1): Stringable {\r\n        let dirname: string = this.#value;\r\n        let parts: string[] = [];\r\n        let isValidDirname: boolean = false;\r\n        let hasValidLevels: boolean = false;\r\n\r\n        if (this.#value.split('/')[0] !== this.#value) {\r\n            parts = this.#value.split('/');\r\n            dirname = parts.slice(0, parts.length - levels).join('/');\r\n            isValidDirname = true;\r\n            hasValidLevels = parts.length <= levels + 1;\r\n        }\r\n\r\n        if (this.#value.split('\\\\')[0] !== this.#value) {\r\n            parts = this.#value.split('\\\\');\r\n            dirname = parts.slice(0, parts.length - levels).join('\\\\');\r\n            isValidDirname = true;\r\n            hasValidLevels = parts.length <= levels + 1;\r\n        }\r\n\r\n        if (!isValidDirname) {\r\n            dirname = '.';\r\n        }\r\n\r\n        if (isValidDirname && hasValidLevels) {\r\n            dirname = '\\\\';\r\n        }\r\n\r\n        return new Stringable(dirname);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string ends with a given substring.\r\n     *\r\n     * @param { string | string[] } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    endsWith(needles: string | string[]): boolean {\r\n        return Str.endsWith(this.#value, needles);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string doesn't end with a given substring.\r\n     *\r\n     * @param { string | string[] } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    doesntEndWith(needles: string | string[]): boolean {\r\n        return !this.endsWith(needles);\r\n    }\r\n\r\n    /**\r\n     * Determine if the string is an exact match with the given value.\r\n     *\r\n     * @param { Stringable | string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    exactly(value: Stringable | string): boolean {\r\n        if (value instanceof Stringable) {\r\n            value = value.toString();\r\n        }\r\n\r\n        return this.#value === value;\r\n    }\r\n\r\n    /**\r\n     * Extracts an excerpt from text that matches the first instance of a phrase.\r\n     *\r\n     * @param { string } phrase\r\n     * @param { ExcerptOptions } options\r\n     *\r\n     * @return { string | null }\r\n     */\r\n    excerpt(phrase: string = '', options: ExcerptOptions = {}): string | null {\r\n        return Str.excerpt(this.#value, phrase, options);\r\n    }\r\n\r\n    /**\r\n     * Explode the string into an array.\r\n     *\r\n     * @param { string } delimiter\r\n     * @param { number } limit\r\n     *\r\n     * @return { string[] }\r\n     */\r\n    explode(delimiter: string, limit: number = 0): string[] {\r\n        let wordsArray: string[] = this.#value.split(delimiter);\r\n\r\n        const position: number = limit - 1 >= wordsArray.length\r\n            ? wordsArray.length - 1\r\n            : limit - 1;\r\n\r\n        wordsArray = [...wordsArray.slice(0, position), wordsArray.splice(position).join(' ')];\r\n\r\n        return wordsArray;\r\n    }\r\n\r\n    /**\r\n     * Split a string using a regular expression or by length.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { number } limit\r\n     *\r\n     * @return { string[] }\r\n     */\r\n    split(pattern: string, limit: number = -1): string[] {\r\n        const body: string = RegExpString.make(/^\\/(.*)\\/\\w*$/, pattern);\r\n        const flags: string = RegExpString.make(/^\\/.*\\/(\\w*)$/, pattern);\r\n        const expression: RegExp = new RegExp(body, flags + (flags.indexOf('g') !== -1 ? '' : 'g'));\r\n\r\n        let segments: string[] = this.#value.split(expression);\r\n\r\n        if (limit !== -1) {\r\n            const position: number = limit - 1 >= segments.length\r\n                ? segments.length - 1\r\n                : limit - 1;\r\n\r\n            segments = [...segments.slice(0, position), segments.splice(position).join('')];\r\n        }\r\n\r\n        return segments.map((segment: string): string => segment.trim()) ?? [];\r\n    }\r\n\r\n    /**\r\n     * Cap a string with a single instance of a given value.\r\n     *\r\n     * @param { string } cap\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    finish(cap: string): Stringable {\r\n        return new Stringable(Str.finish(this.#value, cap));\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string matches a given pattern.\r\n     *\r\n     * @param { string | string[] } pattern\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    is(pattern: string | string[], ignoreCase: boolean = false): boolean {\r\n        return Str.is(pattern, this.#value, ignoreCase);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is 7-bit ASCII.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isAscii(): boolean {\r\n        return Str.isAscii(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is valid JSON.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isJson(): boolean {\r\n        return Str.isJson(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given value is a valid URL.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isUrl(): boolean {\r\n        return Str.isUrl(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is a valid UUID.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isUuid(): boolean {\r\n        return Str.isUuid(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is a valid ULID.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isUlid(): boolean {\r\n        return Str.isUlid(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if the given string is empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isEmpty(): boolean {\r\n        return this.#value.trim() === '';\r\n    }\r\n\r\n    /**\r\n     * Determine if the given string is not empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isNotEmpty(): boolean {\r\n        return !this.isEmpty();\r\n    }\r\n\r\n    /**\r\n     * Convert a string to kebab case.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    kebab(): Stringable {\r\n        return new Stringable(Str.kebab(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Return the length of the given string.\r\n     *\r\n     * @return { number }\r\n     */\r\n    length(): number {\r\n        return Str.length(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Limit the number of characters in a string.\r\n     *\r\n     * @param { number } limit\r\n     * @param { string } end\r\n     * @param { boolean } preserveWords\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    limit(limit: number = 100, end: string = '...', preserveWords: boolean = false): Stringable {\r\n        return new Stringable(Str.limit(this.#value, limit, end, preserveWords));\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to lower-case.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    lower(): Stringable {\r\n        return new Stringable(Str.lower(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Masks a portion of a string with a repeated character.\r\n     *\r\n     * @param { string } character\r\n     * @param { number } index\r\n     * @param { number | null }length\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    mask(character: string, index: number, length: number | null = null): Stringable {\r\n        return new Stringable(Str.mask(this.#value, character, index, length));\r\n    }\r\n\r\n    /**\r\n     * Get the string matching the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    match(pattern: string): Stringable {\r\n        return new Stringable(Str.match(pattern, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string matches a given pattern.\r\n     *\r\n     * @param { string | string[] } pattern\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isMatch(...pattern: string[]): boolean {\r\n        return Str.isMatch(pattern, this.#value);\r\n    }\r\n\r\n    /**\r\n     * Get the string matching the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     *\r\n     * @return { string[] }\r\n     */\r\n    matchAll(pattern: string): string[] {\r\n        return Str.matchAll(pattern, this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if the string matches the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    test(pattern: string): boolean {\r\n        return this.match(pattern).isNotEmpty();\r\n    }\r\n\r\n    /**\r\n     * Remove all non-numeric characters from a string.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    numbers(): Stringable {\r\n        return new Stringable(Str.numbers(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Pad both sides of the string with another.\r\n     *\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    padBoth(length: number, pad: string = ' '): Stringable {\r\n        return new Stringable(Str.padBoth(this.#value, length, pad));\r\n    }\r\n\r\n    /**\r\n     * Pad the left side of the string with another.\r\n     *\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    padLeft(length: number, pad: string = ' '): Stringable {\r\n        return new Stringable(Str.padLeft(this.#value, length, pad));\r\n    }\r\n\r\n    /**\r\n     * Pad the right side of the string with another.\r\n     *\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    padRight(length: number, pad: string = ' '): Stringable {\r\n        return new Stringable(Str.padRight(this.#value, length, pad));\r\n    }\r\n\r\n    /**\r\n     * Call the given callback and return a new string.\r\n     *\r\n     * @param { keyof string | ((instance: this) => any) } callback\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    pipe(callback: keyof string | ((instance: this) => any)): Stringable {\r\n        if (typeof callback === 'string') {\r\n            if ((this.#value as any)[callback] instanceof Function) {\r\n                return new Stringable((this.#value as any)[callback]());\r\n            }\r\n        }\r\n\r\n        return new Stringable((callback as (instance: this) => any)(this).toString());\r\n    }\r\n\r\n    /**\r\n     * Get the plural form of an English word.\r\n     *\r\n     * @param { number } count\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    plural(count: number = 2): Stringable {\r\n        return new Stringable(Str.plural(this.#value, count));\r\n    }\r\n\r\n    /**\r\n     * Pluralize the last word of an English, studly caps case string.\r\n     *\r\n     * @param { number } count\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    pluralStudly(count: number = 2): Stringable {\r\n        return new Stringable(Str.pluralStudly(this.#value, count));\r\n    }\r\n\r\n    /**\r\n     * Pluralize the last word of an English, Pascal case string.\r\n     *\r\n     * @param { number } count\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    pluralPascal(count: number = 2): Stringable {\r\n        return new Stringable(Str.pluralPascal(this.#value, count));\r\n    }\r\n\r\n    /**\r\n     * Find the multibyte safe position of the first occurrence of the given substring.\r\n     *\r\n     * @param { string } needle\r\n     * @param { number } offset\r\n     *\r\n     * @return { number | false }\r\n     */\r\n    position(needle: string, offset: number = 0): number | false {\r\n        return Str.position(this.#value, needle, offset);\r\n    }\r\n\r\n    /**\r\n     * Prepend the given values to the string.\r\n     *\r\n     * @param { string | string[] } values\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    prepend(...values: string[]): Stringable {\r\n        return new Stringable(values.join('') + this.#value);\r\n    }\r\n\r\n    /**\r\n     * Remove any occurrence of the given string in the subject.\r\n     *\r\n     * @param { string } search\r\n     * @param { boolean } caseSensitive\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    remove(search: string, caseSensitive: boolean = true): Stringable {\r\n        return new Stringable(Str.remove(search, this.#value, caseSensitive));\r\n    }\r\n\r\n    /**\r\n     * Reverse the string.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    reverse(): Stringable {\r\n        return new Stringable(Str.reverse(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Repeat the string.\r\n     *\r\n     * @param { number } times\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    repeat(times: number): Stringable {\r\n        return new Stringable(Str.repeat(this.#value, times));\r\n    }\r\n\r\n    /**\r\n     * Replace the given value in the given string.\r\n     *\r\n     * @param { string | string[] } search\r\n     * @param { string } replace\r\n     * @param { boolean } caseSensitive\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    replace(search: string | string[], replace: string, caseSensitive: boolean = true): Stringable {\r\n        return new Stringable(Str.replace(search, replace, this.#value, caseSensitive));\r\n    }\r\n\r\n    /**\r\n     * Replace a given value in the string sequentially with an array.\r\n     *\r\n     * @param { string } search\r\n     * @param { string[] } replace\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    replaceArray(search: string, replace: string[]): Stringable {\r\n        return new Stringable(Str.replaceArray(search, replace, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Replace the first occurrence of a given value in the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    replaceFirst(search: string, replace: string): Stringable {\r\n        return new Stringable(Str.replaceFirst(search, replace, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Replace the first occurrence of the given value if it appears at the start of the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    replaceStart(search: string, replace: string): Stringable {\r\n        return new Stringable(Str.replaceStart(search, replace, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Replace the last occurrence of a given value in the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    replaceLast(search: string, replace: string): Stringable {\r\n        return new Stringable(Str.replaceLast(search, replace, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Replace the last occurrence of a given value if it appears at the end of the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    replaceEnd(search: string, replace: string): Stringable {\r\n        return new Stringable(Str.replaceEnd(search, replace, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Replace the patterns matching the given regular expression.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { string | function } replace\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    replaceMatches(pattern: string, replace: string | Function): Stringable {\r\n        const body: string = RegExpString.make(/^\\/(.*)\\/\\w*$/, pattern);\r\n        const flags: string = RegExpString.make(/^\\/.*\\/(\\w*)$/, pattern);\r\n        const expression: RegExp = new RegExp(body, flags + (flags.indexOf('g') !== -1 ? '' : 'g'));\r\n\r\n        if (replace instanceof Function) {\r\n            this.#value.replace(expression, (matched: string): string => matched);\r\n        }\r\n\r\n        return new Stringable(this.#value.replace(expression, (replace as string)));\r\n    }\r\n\r\n    /**\r\n     * Remove all \"extra\" blank space from the given string.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    squish(): Stringable {\r\n        return new Stringable(Str.squish(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Begin a string with a single instance of a given value.\r\n     *\r\n     * @param { string } prefix\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    start(prefix: string): Stringable {\r\n        return new Stringable(Str.start(this.#value, prefix));\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to upper-case.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    upper(): Stringable {\r\n        return new Stringable(Str.upper(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to title case.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    title(): Stringable {\r\n        return new Stringable(Str.title(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to title case for each word.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    headline(): Stringable {\r\n        return new Stringable(Str.headline(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to APA-style title case.\r\n     *\r\n     * @see https://apastyle.apa.org/style-grammar-guidelines/capitalization/title-case\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    apa(): Stringable {\r\n        return new Stringable(Str.apa(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Get the singular form of an English word.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    singular(): Stringable {\r\n        return new Stringable(Str.singular(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Generate a URL friendly \"slug\" from a given string.\r\n     *\r\n     * @param { string } separator\r\n     * @param { object } dictionary\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    slug(separator: string = '-', dictionary: { [key: string]: string } = { '@': 'at' }): Stringable {\r\n        return new Stringable(Str.slug(this.#value, separator, dictionary));\r\n    }\r\n\r\n    /**\r\n     * Convert a string to snake case.\r\n     *\r\n     * @param { string } delimiter\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    snake(delimiter: string = '_'): Stringable {\r\n        return new Stringable(Str.snake(this.#value, delimiter));\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string starts with a given substring.\r\n     *\r\n     * @param { string | string[] } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    startsWith(needles: string | string[]): boolean {\r\n        return Str.startsWith(this.#value, needles);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string doesn't start with a given substring.\r\n     *\r\n     * @param { string | string[] } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    doesntStartWith(needles: string | string[]): boolean {\r\n        return Str.doesntStartWith(this.#value, needles);\r\n    }\r\n\r\n    /**\r\n     * Convert a value to studly caps case.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    studly(): Stringable {\r\n        return new Stringable(Str.studly(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Convert a value to Pascal case.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    pascal(): Stringable {\r\n        return new Stringable(Str.pascal(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Returns the portion of the string specified by the start and length parameters.\r\n     *\r\n     * @param { number } start\r\n     * @param { number | null } length\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    substr(start: number, length: number | null = null): Stringable {\r\n        return new Stringable(Str.substr(this.#value, start, length));\r\n    }\r\n\r\n    /**\r\n     * Returns the number of substring occurrences.\r\n     *\r\n     * @param { string } needle\r\n     * @param { number } offset\r\n     * @param { number | null } length\r\n     *\r\n     * @return { number }\r\n     */\r\n    substrCount(needle: string, offset: number = 0, length: number | null = null): number {\r\n        return Str.substrCount(this.#value, needle, offset, length);\r\n    }\r\n\r\n    /**\r\n     * Replace text within a portion of a string.\r\n     *\r\n     * @param { string } replace\r\n     * @param { number } offset\r\n     * @param { number | null } length\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    substrReplace(replace: string, offset: number = 0, length: number | null = null): Stringable {\r\n        return new Stringable(Str.substrReplace(this.#value, replace, offset, length));\r\n    }\r\n\r\n    /**\r\n     * Swap multiple keywords in a string with other keywords.\r\n     *\r\n     * @param { Record<string, string> } map\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    swap(map: Record<string, string>): Stringable {\r\n        return new Stringable(Str.swap(map, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Take the first or last {limit} characters.\r\n     *\r\n     * @param { number } limit\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    take(limit: number): Stringable {\r\n        if (limit < 0) {\r\n            return this.substr(limit);\r\n        }\r\n\r\n        return this.substr(0, limit);\r\n    }\r\n\r\n    /**\r\n     * Call the given Closure with this instance then return the instance.\r\n     *\r\n     * @param { ((instance: this) => any) } callback\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    tap(callback: ((instance: this) => any)): this {\r\n        callback(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Trim the string of the given characters.\r\n     *\r\n     * @param { string | null } characters\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    trim(characters: string | null = null): Stringable {\r\n        return new Stringable(Str.trim(this.#value, characters));\r\n    }\r\n\r\n    /**\r\n     * Left trim the string of the given characters.\r\n     *\r\n     * @param { string | string[]|null } characters\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    ltrim(characters: string | null = null): Stringable {\r\n        return new Stringable(Str.ltrim(this.#value, characters));\r\n    }\r\n\r\n    /**\r\n     * Right trim the string of the given characters.\r\n     *\r\n     * @param { string | string[]|null } characters\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    rtrim(characters: string | null = null): Stringable {\r\n        return new Stringable(Str.rtrim(this.#value, characters));\r\n    }\r\n\r\n    /**\r\n     * Make a string's first character lowercase.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    lcfirst(): Stringable {\r\n        return new Stringable(Str.lcfirst(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Make a string's first character uppercase.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    ucfirst(): Stringable {\r\n        return new Stringable(Str.ucfirst(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Split a string by uppercase characters.\r\n     *\r\n     * @return { string[] }\r\n     */\r\n    ucsplit(): string[] {\r\n        return Str.ucsplit(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Apply the callback if the given \"value\" is (or resolves to) truthy.\r\n     *\r\n     * @param { Value<this> } value\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    when(value: Value<this>, callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        value = value instanceof Function ? value(this) : value;\r\n\r\n        if (value) {\r\n            return callback(this, value) ?? this;\r\n        } else if (fallback) {\r\n            return fallback(this, value) ?? this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Apply the callback if the given \"value\" is (or resolves to) falsy.\r\n     *\r\n     * @param { Value<this> } value\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    unless(value: Value<this>, callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        value = value instanceof Function ? value(this) : value;\r\n\r\n        if (!value) {\r\n            return callback(this, value) ?? this;\r\n        } else if (fallback) {\r\n            return fallback(this, value) ?? this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string contains a given substring.\r\n     *\r\n     * @param { string | string[] } needles\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenContains(needles: string | string[], callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.contains(needles), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string contains all array values.\r\n     *\r\n     * @param { string[] } needles\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenContainsAll(needles: string[], callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.containsAll(needles), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is empty.\r\n     *\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenEmpty(callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.isEmpty(), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is not empty.\r\n     *\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenNotEmpty(callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.isNotEmpty(), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string ends with a given substring.\r\n     *\r\n     * @param { string | string[] } needles\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenEndsWith(needles: string | string[], callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.endsWith(needles), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string doesn't end with a given substring.\r\n     *\r\n     * @param { string | string[] } needles\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenDoesntEndWith(needles: string | string[], callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.doesntEndWith(needles), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is an exact match with the given value.\r\n     *\r\n     * @param { string } value\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenExactly(value: string, callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.exactly(value), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is not an exact match with the given value.\r\n     *\r\n     * @param { string } value\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenNotExactly(value: string, callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(!this.exactly(value), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string matches a given pattern.\r\n     *\r\n     * @param { string | string[] } pattern\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenIs(pattern: string | string[], callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.is(pattern), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is 7-bit ASCII.\r\n     *\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenIsAscii(callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.isAscii(), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is a valid UUID.\r\n     *\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenIsUuid(callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.isUuid(), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is a valid ULID.\r\n     *\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenIsUlid(callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.isUlid(), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string starts with a given substring.\r\n     *\r\n     * @param { string | string[] } needles\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenStartsWith(needles: string | string[], callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.startsWith(needles), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string doesn't start with a given substring.\r\n     *\r\n     * @param { string | string[] } needles\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenDoesntStartWith(needles: string | string[], callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.doesntStartWith(needles), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string matches the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { Callback<this> } callback\r\n     * @param { Fallback<this> } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenTest(pattern: string, callback: Callback<this>, fallback: Fallback<this> = null): this {\r\n        return this.when(this.test(pattern), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Limit the number of words in a string.\r\n     *\r\n     * @param { number } words\r\n     * @param { string } end\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    words(words: number = 100, end: string = '...'): Stringable {\r\n        return new Stringable(Str.words(this.#value, words, end));\r\n    }\r\n\r\n    /**\r\n     * Get the number of words a string contains.\r\n     *\r\n     * @return { number }\r\n     */\r\n    wordCount(): number {\r\n        return Str.wordCount(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Wrap a string to a given number of characters.\r\n     *\r\n     * @param { number } characters\r\n     * @param { string } breakStr\r\n     * @param { boolean } cutLongWords\r\n     *\r\n     * @returns { this }\r\n     */\r\n    wordWrap(characters: number = 75, breakStr: string = '\\n', cutLongWords: boolean = false): Stringable {\r\n        return new Stringable(Str.wordWrap(this.#value, characters, breakStr, cutLongWords));\r\n    }\r\n\r\n    /**\r\n     * Wrap the string with the given strings.\r\n     *\r\n     * @param { string } before\r\n     * @param { string | null } after\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    wrap(before: string, after: string | null = null): Stringable {\r\n        return new Stringable(Str.wrap(this.#value, before, after));\r\n    }\r\n\r\n    /**\r\n     * Unwrap the string with the given strings.\r\n     *\r\n     * @param { string } before\r\n     * @param { string | null } after\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    unwrap(before: string, after: string | null = null): Stringable {\r\n        return new Stringable(Str.unwrap(this.#value, before, after));\r\n    }\r\n\r\n    /**\r\n     * Convert the string into a `HtmlString` instance.\r\n     *\r\n     * @return { HtmlStringType }\r\n     */\r\n    toHtmlString(): HtmlStringType {\r\n        return new HtmlString(this.#value).toHtml();\r\n    }\r\n\r\n    /**\r\n     * Convert the string to Base64 encoding.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    toBase64(): Stringable {\r\n        return new Stringable(Str.toBase64(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Decode the Base64 encoded string.\r\n     *\r\n     * @return { Stringable }\r\n     */\r\n    fromBase64(): Stringable {\r\n        return new Stringable(Str.fromBase64(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Dump the string.\r\n     *\r\n     * @return { void }\r\n     */\r\n    dump(): void {\r\n        console.log(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Dump the string and end the script.\r\n     *\r\n     * @return { never }\r\n     */\r\n    dd(): never {\r\n        this.dump();\r\n\r\n        throw new Error('dd()');\r\n    }\r\n\r\n    /**\r\n     * Get the underlying string value.\r\n     *\r\n     * @return { string }\r\n     */\r\n    value(): string {\r\n        return this.toString();\r\n    }\r\n\r\n    /**\r\n     * Get the raw string value.\r\n     *\r\n     * @return { string }\r\n     */\r\n    toString(): string {\r\n        return this.#value;\r\n    }\r\n\r\n    /**\r\n     * Get the underlying string value as an integer.\r\n     *\r\n     * @param { number } base\r\n     *\r\n     * @return { number }\r\n     */\r\n    toInteger(base: number = 10): number {\r\n        const value: number = parseInt(this.#value, base);\r\n\r\n        return isNaN(value) || !isFinite(value) ? 0 : value;\r\n    }\r\n\r\n    /**\r\n     * Get the underlying string value as a float.\r\n     *\r\n     * @return { number }\r\n     */\r\n    toFloat(): number {\r\n        return !isNaN(parseFloat(this.#value)) ? parseFloat(this.#value) : 0;\r\n    }\r\n\r\n    /**\r\n     * Get the underlying string value as a boolean.\r\n     *\r\n     * Returns true when value is \"1\", \"true\", \"on\", and \"yes\". Otherwise, returns false.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    toBoolean(): boolean {\r\n        switch (this.#value) {\r\n            case '1':\r\n            case 'true':\r\n            case 'on':\r\n            case 'yes':\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the underlying string value as a formatted Date string.\r\n     *\r\n     * @param { string | null } format\r\n     * @param { string | null } tz\r\n     */\r\n    toDate(format: string | null = null, tz: string | null = null): string {\r\n        if (new Date(this.#value).toString() === 'Invalid Date') {\r\n            return 'Invalid Date';\r\n        }\r\n\r\n        if (format === null) {\r\n            return new Date(this.#value).toLocaleDateString('en-us', {\r\n                year    : 'numeric',\r\n                month   : 'numeric',\r\n                day     : 'numeric',\r\n                hour    : 'numeric',\r\n                minute  : 'numeric',\r\n                second  : 'numeric',\r\n                hour12  : false,\r\n                timeZone: tz ?? undefined,\r\n            });\r\n        }\r\n\r\n        let date: string = '';\r\n\r\n        const now: Date = new Date(new Date(this.#value).toLocaleString('en-US', {\r\n            year                  : 'numeric',\r\n            month                 : 'numeric',\r\n            day                   : 'numeric',\r\n            hour                  : 'numeric',\r\n            minute                : 'numeric',\r\n            second                : 'numeric',\r\n            fractionalSecondDigits: 3,\r\n            hour12                : false,\r\n            timeZone              : tz ?? undefined,\r\n        }));\r\n\r\n        const month: number = now.getMonth();\r\n        const dayOfTheWeek: number = now.getDay();\r\n        const dayOfTheMonth: number = now.getDate();\r\n        const year: number = now.getFullYear();\r\n        const hours: number = now.getHours();\r\n        const minutes: number = now.getMinutes();\r\n        const seconds: number = now.getSeconds();\r\n        const milliseconds: number = now.getMilliseconds();\r\n\r\n        const elements: RegExpMatchArray | null = format.match(/\\\\?.|./g);\r\n\r\n        for (const element of elements!) {\r\n            switch (element) {\r\n                // Day of the month, 2 digits with leading zeros (e.g., 01 to 31)\r\n                case 'd':\r\n                    date += Str.padLeft(dayOfTheMonth.toString(), 2, '0');\r\n\r\n                    break;\r\n\r\n                // A textual representation of a day, three letters (e.g., Mon through Sun)\r\n                case 'D':\r\n                    date += now.toLocaleString('en-US', { weekday: 'short' });\r\n\r\n                    break;\r\n\r\n                // Day of the month without leading zeros (e.g., 1 to 31)\r\n                case 'j':\r\n                    date += dayOfTheMonth;\r\n\r\n                    break;\r\n\r\n                // A full textual representation of the day of the week (e.g., Sunday through Saturday)\r\n                case 'l':\r\n                    date += now.toLocaleString('en-US', { weekday: 'long' });\r\n\r\n                    break;\r\n\r\n                // ISO 8601 numeric representation of the day of the week (e.g., 1 (for Monday) through 7 (for Sunday))\r\n                case 'N':\r\n                    date += dayOfTheWeek !== 0 ? dayOfTheWeek : 0;\r\n\r\n                    break;\r\n\r\n                // English ordinal suffix for the day of the month, 2 characters (e.g., st, nd, rd or th)\r\n                case 'S': {\r\n                    let suffix: { [key: number]: string } = {\r\n                        1 : 'st',\r\n                        2 : 'nd',\r\n                        3 : 'rd',\r\n                        21: 'st',\r\n                        22: 'nd',\r\n                        23: 'rd',\r\n                        31: 'st'\r\n                    };\r\n                    date += suffix[dayOfTheMonth] ?? 'th';\r\n\r\n                    break;\r\n                }\r\n                // Numeric representation of the day of the week (e.g., 0 (for Sunday) through 6 (for Saturday))\r\n                case 'w':\r\n                    date += dayOfTheWeek;\r\n\r\n                    break;\r\n\r\n                // Numeric representation of the day of the week (e.g., The day of the year (starting from 0))\r\n                case 'z': {\r\n                    let start: Date = new Date(year, 0, 0);\r\n                    let diff: number = ((now as unknown as number) - (start as unknown as number)) + ((start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000);\r\n                    let day: number = 86400000;\r\n                    const currentDay: number = Math.floor(diff / day);\r\n\r\n                    date += currentDay;\r\n\r\n                    break;\r\n                }\r\n                // ISO 8601 week number of year, weeks starting on Monday (e.g., 42 (the 42nd week in the year))\r\n                case 'W': {\r\n                    let parsedDate: Date = new Date(Date.UTC(year, month, dayOfTheMonth));\r\n                    let weekDay: number = parsedDate.getUTCDay() || 7;\r\n\r\n                    parsedDate.setUTCDate(parsedDate.getUTCDate() + 4 - weekDay);\r\n\r\n                    let yearStart: Date = new Date(Date.UTC(parsedDate.getUTCFullYear(), 0, 1));\r\n                    let weekNumber: number = Math.ceil(((((parsedDate as unknown as number) - (yearStart as unknown as number)) / 86400000) + 1) / 7);\r\n\r\n                    date += Str.padLeft((weekNumber.toString()), 2, '0');\r\n\r\n                    break;\r\n                }\r\n                // A full textual representation of a month, such as January or March (e.g., January through December)\r\n                case 'F':\r\n                    date += now.toLocaleString('en-US', { month: 'long' });\r\n\r\n                    break;\r\n\r\n                // Numeric representation of a month, with leading zeros (e.g., 01 through 12)\r\n                case 'm': {\r\n                    const currentMonth: number = month + 1;\r\n\r\n                    date += Str.padLeft(currentMonth.toString(), 2, '0');\r\n\r\n                    break;\r\n                }\r\n                // A short textual representation of a month, three letters (e.g., Jan through Dec)\r\n                case 'M':\r\n                    date += now.toLocaleString('en-US', { month: 'short' });\r\n\r\n                    break;\r\n\r\n                // Numeric representation of a month, without leading zeros (e.g., 1 through 12)\r\n                case 'n':\r\n                    date += month + 1;\r\n\r\n                    break;\r\n\r\n                // Number of days in the given month (e.g., 28 through 31)\r\n                case 't':\r\n                    date += new Date(year, month + 1, 0).getDate();\r\n\r\n                    break;\r\n\r\n                // Whether it's a leap year (e.g., 1 if it is a leap year, 0 otherwise)\r\n                case 'L':\r\n                    date += new Date(year, 1, 29).getMonth() === 1 ? '1' : '0';\r\n\r\n                    break;\r\n\r\n                // ISO 8601 week-numbering year. This has the same value as Y,\r\n                // except that if the ISO week number (W) belongs to the previous or next year,\r\n                // that year is used instead. (e.g., 1999 or 2003)\r\n                case 'o':\r\n                    date += now.toISOString().substring(0, 4);\r\n\r\n                    break;\r\n\r\n                // An expanded full numeric representation of a year, at least 4 digits, with - for years BCE, and + for years CE. (e.g., -0055, +0787, +1999, +10191)\r\n                case 'X':\r\n                    date += year < 0 ? '-' + year : '+' + year;\r\n\r\n                    break;\r\n\r\n                // An expanded full numeric representation if required,\r\n                // or a standard full numeral representation if possible (like Y).\r\n                // At least four digits. Years BCE are prefixed with a -.\r\n                // Years beyond (and including) 10000 are prefixed by a +. (e.g., -0055, 0787, 1999, +10191)\r\n                case 'x':\r\n                    date += year < 10000 ? year : '-' + year;\r\n\r\n                    break;\r\n\r\n                // A full numeric representation of a year, at least 4 digits, with - for years BCE. (e.g., -0055, 0787, 1999, 2003, 10191)\r\n                case 'Y':\r\n                    date += year;\r\n\r\n                    break;\r\n\r\n                // A two-digit representation of a year (e.g., 99 or 03)\r\n                case 'y':\r\n                    date += year.toString().substring(2);\r\n\r\n                    break;\r\n\r\n                // Lowercase Ante meridiem and Post meridiem (e.g., am or pm)\r\n                case 'a':\r\n                    date += hours < 12 ? 'am' : 'pm';\r\n\r\n                    break;\r\n\r\n                // Uppercase Ante meridiem and Post meridiem (e.g., AM or PM)\r\n                case 'A':\r\n                    date += hours < 12 ? 'AM' : 'PM';\r\n\r\n                    break;\r\n\r\n                // Swatch Internet time (e.g., 000 through 999)\r\n                case 'B': {\r\n                    const hours: number = now.getUTCHours();\r\n                    const minutes: number = now.getUTCMinutes();\r\n                    const seconds: number = now.getUTCSeconds();\r\n\r\n                    date += Math.floor((((hours + 1) % 24) + minutes / 60 + seconds / 3600) * 1000 / 24);\r\n\r\n                    break;\r\n                }\r\n                // 12-hour format of an hour without leading zeros (e.g., 1 through 12)\r\n                case 'g':\r\n                    date += hours > 12 ? hours - 12 : hours;\r\n\r\n                    break;\r\n\r\n                // 24-hour format of an hour without leading zeros (e.g., 0 through 23)\r\n                case 'G':\r\n                    date += hours;\r\n\r\n                    break;\r\n\r\n                // 12-hour format of an hour with leading zeros (e.g., 01 through 12)\r\n                case 'h':\r\n                    date += Str.padLeft((hours > 12 ? hours - 12 : hours).toString(), 2, '0');\r\n\r\n                    break;\r\n\r\n                // 24-hour format of an hour with leading zeros (e.g., 00 through 23)\r\n                case 'H':\r\n                    date += Str.padLeft(hours.toString(), 2, '0');\r\n\r\n                    break;\r\n\r\n                // Minutes with leading zeros (e.g., 00 to 59)\r\n                case 'i':\r\n                    date += Str.padLeft(minutes.toString(), 2, '0');\r\n\r\n                    break;\r\n\r\n                // Seconds with leading zeros (e.g., 00 to 59)\r\n                case 's':\r\n                    date += Str.padLeft(seconds.toString(), 2, '0');\r\n\r\n                    break;\r\n\r\n                // Microseconds. (e.g., 654321)\r\n                case 'u':\r\n                    throw new Error('Microseconds are not supported.');\r\n\r\n                // Milliseconds. (e.g., 654)\r\n                case 'v': {\r\n                    date += Str.padLeft(milliseconds.toString(), 3, '0');\r\n\r\n                    break;\r\n                }\r\n\r\n                // Timezone identifier (e.g., UTC, GMT, Atlantic/Azores)\r\n                case 'e': {\r\n                    date += Intl.DateTimeFormat('en-us', { timeZone: tz ?? undefined }).resolvedOptions().timeZone;\r\n\r\n                    break;\r\n                }\r\n\r\n                // Whether the date is in daylight saving time (e.g., 1 if Daylight Saving Time, 0 otherwise)\r\n                case 'I': {\r\n                    let january: number = new Date(year, 0, 1).getTimezoneOffset();\r\n                    let july: number = new Date(year, 6, 1).getTimezoneOffset();\r\n\r\n                    date += Math.max(january, july) !== now.getTimezoneOffset() ? '1' : '0';\r\n\r\n                    break;\r\n                }\r\n                // Difference to Greenwich time (GMT) without colon between hours and minutes (e.g., +0200)\r\n                case 'O': {\r\n                    const timeZoneData: string = now.toLocaleDateString('en-us', {\r\n                        timeZoneName: 'longOffset',\r\n                        timeZone    : tz ?? undefined,\r\n                    })\r\n                        .split(', ')\r\n                        .pop()!\r\n                        .trim();\r\n\r\n                    date += timeZoneData.length !== 3 ? timeZoneData.substring(3).replace(':', '') : '+0000';\r\n\r\n                    break;\r\n                }\r\n\r\n                // Difference to Greenwich time (GMT) with colon between hours and minutes (e.g., +02:00)\r\n                case 'P': {\r\n                    const timeZoneData: string = now.toLocaleDateString('en-us', {\r\n                        timeZoneName: 'longOffset',\r\n                        timeZone    : tz ?? undefined,\r\n                    })\r\n                        .split(', ')\r\n                        .pop()!\r\n                        .trim();\r\n\r\n                    date += timeZoneData.length !== 3 ? timeZoneData.substring(3) : '+00:00';\r\n\r\n                    break;\r\n                }\r\n\r\n                // The same as P, but returns Z instead of +00:00 (e.g., +02:00)\r\n                case 'p': {\r\n                    const timeZoneData: string = now.toLocaleDateString('en-us', {\r\n                        timeZoneName: 'longOffset',\r\n                        timeZone    : tz ?? undefined,\r\n                    })\r\n                        .split(', ')\r\n                        .pop()!\r\n                        .trim();\r\n\r\n                    date += timeZoneData === 'GMT' ? 'Z' : timeZoneData.substring(3);\r\n\r\n                    break;\r\n                }\r\n\r\n                // Timezone abbreviation, if known; otherwise the GMT offset (e.g., EST, MDT, +05)\r\n                case 'T': {\r\n                    const timeZoneData: string = now.toLocaleDateString('en-us', {\r\n                        timeZoneName: 'short',\r\n                        timeZone    : tz ?? undefined,\r\n                    })\r\n                        .split(', ')\r\n                        .pop()!\r\n                        .trim();\r\n\r\n                    date += tz ?? timeZoneData.replace('GMT', 'UTC').split(/[+-]/)[0];\r\n\r\n                    break;\r\n                }\r\n\r\n                // Timezone offset in seconds.\r\n                // The offset for timezones west of UTC is always negative,\r\n                // and for those east of UTC is always positive. (e.g., -43200 through 50400)\r\n                case 'Z': {\r\n                    const timezone: string = now.toLocaleDateString('en-us', {\r\n                        timeZoneName: 'longOffset',\r\n                        timeZone    : tz ?? undefined\r\n                    });\r\n                    const symbol: RegExpMatchArray | null = timezone.match(/[+-]/);\r\n                    const data: string[] = timezone.split(/[+-]/);\r\n\r\n                    const sign: string = symbol ? symbol.pop()! : '+';\r\n                    const offset: string = data.length === 2 ? (data[1] as string) : '0:00';\r\n\r\n                    const hours: number = parseInt(offset.split(':')[0] as string);\r\n                    const minutes: number = parseInt(offset.split(':')[1] as string);\r\n\r\n                    const offsetInSeconds: number = hours * 3600 + minutes * 60;\r\n\r\n                    date += `${sign}${offsetInSeconds}`;\r\n\r\n                    break;\r\n                }\r\n\r\n                // ISO 8601 date (e.g., 2004-02-12T15:19:21+00:00)\r\n                case 'c': {\r\n                    date += `${this.toDate('Y-m-d\\\\TH:i:sP')}`;\r\n\r\n                    break;\r\n                }\r\n                // RFC 2822/RFC 5322 formatted date (e.g., Thu, 21 Dec 2000 16:01:07 +0200)\r\n                case 'r': {\r\n                    date += new Stringable(this.#value).toDate('D, d M Y H:i:s O', tz);\r\n\r\n                    break;\r\n                }\r\n\r\n                // Seconds since the Unix Epoch (e.g., January 1, 1970 00:00:00 GMT)\r\n                case 'U': {\r\n                    date += Math.floor(now.getTime() / 1000);\r\n\r\n                    break;\r\n                }\r\n\r\n                default:\r\n                    date += element.length >= 2 && element.indexOf('\\\\') > -1 ? element.replace('\\\\', '') : element;\r\n            }\r\n        }\r\n\r\n        return date;\r\n    }\r\n}\r\n\r\nexport class HtmlString {\r\n    /**\r\n     * The HTML string.\r\n     *\r\n     * @type { string }\r\n     */\r\n    readonly #html: string;\r\n\r\n    /**\r\n     * Create a new HTML string instance.\r\n     *\r\n     * @param { string } html\r\n     *\r\n     * @return void\r\n     */\r\n    constructor(html: string = '') {\r\n        this.#html = html;\r\n    }\r\n\r\n    /**\r\n     * Get the HTML string.\r\n     *\r\n     * @return { HtmlStringType }\r\n     */\r\n    toHtml(): HtmlStringType {\r\n        const pattern: RegExp = /(?!<!DOCTYPE)<([^\\s>]+)(\\s|>)+/;\r\n        const tag: RegExpExecArray | null = RegExp(pattern).exec(this.#html);\r\n\r\n        if (tag === null) {\r\n            return this.#html;\r\n        }\r\n\r\n        const DOM: HTMLElement = document.createElement(tag[1] as string);\r\n\r\n        DOM.innerHTML = this.#html;\r\n\r\n        return tag[1] === 'html' ? DOM : DOM.firstChild as HtmlStringType;\r\n    }\r\n\r\n    /**\r\n     * Determine if the given HTML string is empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isEmpty(): boolean {\r\n        return this.#html === '';\r\n    }\r\n\r\n    /**\r\n     * Determine if the given HTML string is not empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isNotEmpty(): boolean {\r\n        return !this.isEmpty();\r\n    }\r\n\r\n    /**\r\n     * Get the HTML string.\r\n     *\r\n     * @return { string }\r\n     */\r\n    toString(): string {\r\n        const html: HtmlStringType = this.toHtml();\r\n\r\n        if (html instanceof HTMLElement) {\r\n            return html.outerHTML;\r\n        }\r\n\r\n        if (html instanceof Node) {\r\n            return html.textContent as string;\r\n        }\r\n\r\n        return html;\r\n    }\r\n}\r\n\r\nclass RegExpString {\r\n    /**\r\n     * Build the Regular Expression string from the given parameter.\r\n     *\r\n     * @param { RegExp } pattern\r\n     * @param { string } string\r\n     *\r\n     * @return { string }\r\n     */\r\n    static make(pattern: RegExp, string: string): string {\r\n        if (string === '') {\r\n            throw new Error('Empty regular expression.');\r\n        }\r\n\r\n        if (!string.startsWith('/')) {\r\n            throw new Error('Delimiter must not be alphanumeric, backslash, or NUL.');\r\n        }\r\n\r\n        if (string.startsWith('/') && string.length === 1 || !string.endsWith('/')) {\r\n            throw new Error('No ending delimiter \\'/\\'.');\r\n        }\r\n\r\n        const expression: RegExpExecArray | null = new RegExp(pattern).exec(string);\r\n\r\n        return expression ? expression[1]! : '';\r\n    }\r\n}\r\n\r\n/**\r\n * Get a new Stringable object from the given string.\r\n *\r\n * @param { string } string\r\n *\r\n * @return Stringable\r\n */\r\nexport function str(string: string = ''): Stringable {\r\n    return Str.of(string);\r\n}\r\n\r\n/**\r\n * Quote regular expression characters.\r\n *\r\n * @param { string } string The input string.\r\n * @param { string | null } delimiter If the optional delimiter is specified, it will also be escaped.\r\n * This is useful for escaping the delimiter that is required by the PCRE functions.\r\n * The / is the most commonly used delimiter.\r\n *\r\n * @return { string } The quoted (escaped) string.\r\n */\r\nfunction preg_quote(string: string, delimiter: string | null = null): string {\r\n    const characters: (string | null)[] = [\r\n        '-', '.', '\\\\', '+', '*', '?', '[', '^', ']',\r\n        '$', '(', ')', '{', '}', '=', '!', '<', '>',\r\n        '|', ':', delimiter\r\n    ];\r\n\r\n    const escaped: string = characters.filter(Boolean).map((character: string): string => `\\\\${character}`).join('');\r\n\r\n    return string.replace(new RegExp(`[${escaped}]`, 'g'), '\\\\$&');\r\n}\r\n\r\n/**\r\n * Uppercase the first character of each word in a string\r\n *\r\n * @param { string } string The input string.\r\n * @param { string } separators The optional separators contains the word separator characters.\r\n\r\n * @return { string } String the modified string.\r\n */\r\nfunction ucwords(string: string, separators: string = ' \\t\\r\\n\\f\\v'): string {\r\n    return string.split(separators).map((word: string): string => word[0]?.toUpperCase() + word.substring(1)).join(' ');\r\n}\r\n\r\n/**\r\n * Attempt to match the case on two strings.\r\n *\r\n * @param { string} value\r\n * @param { string } comparison\r\n *\r\n * @return { string }\r\n */\r\nfunction matchCase(value: string, comparison: string): string {\r\n    const cases: ((value: string) => string)[] = [\r\n        (value: string): string => value.toLowerCase(),\r\n        (value: string): string => value.toUpperCase(),\r\n        (value: string): string => value.charAt(0).toUpperCase() + value.slice(1),\r\n        (value: string): string => value.replace(/\\b\\w/g, (char: string): string => char.toUpperCase())\r\n    ];\r\n\r\n    for (const matcher of cases) {\r\n        if (matcher(comparison) === comparison) {\r\n            return matcher(value);\r\n        }\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nif (typeof exports != 'undefined') {\r\n    module.exports.Mode = Mode;\r\n    module.exports.Str = Str;\r\n    module.exports.Stringable = Stringable;\r\n    module.exports.HtmlString = HtmlString;\r\n    module.exports.str = str;\r\n}\r\n\r\nif (typeof global !== 'undefined') {\r\n    const _global: any = global;\r\n\r\n    _global.Mode = Mode;\r\n    _global.Str = Str;\r\n    _global.Stringable = Stringable;\r\n    _global.HtmlString = HtmlString;\r\n    _global.str = str;\r\n}\r\n"],"names":[],"mappings":"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"}