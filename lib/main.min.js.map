{"version":3,"file":"main.min.js","sources":["../src/main.ts"],"sourcesContent":["type CharacterType = string | string[] | null;\r\n\r\ntype HtmlStringType = HTMLElement | Node | string;\r\n\r\ntype ExcerptOptions = { radius?: number, omission?: string }\r\n\r\nenum Mode {\r\n    MB_CASE_UPPER        = 0,\r\n    MB_CASE_LOWER        = 1,\r\n    MB_CASE_TITLE        = 2,\r\n    MB_CASE_FOLD         = 3,\r\n    MB_CASE_UPPER_SIMPLE = 4,\r\n    MB_CASE_LOWER_SIMPLE = 5,\r\n    MB_CASE_TITLE_SIMPLE = 6,\r\n    MB_CASE_FOLD_SIMPLE  = 7\r\n}\r\n\r\nclass Str {\r\n    /**\r\n     * Get a new Stringable object from the given string.\r\n     *\r\n     * @param { string } string\r\n     */\r\n    static of(string: string): Stringable {\r\n        return new Stringable(string);\r\n    }\r\n\r\n    /**\r\n     * Return the remainder of a string after the first occurrence of a given value.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } search\r\n     *\r\n     * @return { string }\r\n     */\r\n    static after(subject: string, search: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        return subject.slice(subject.indexOf(search) + search.length);\r\n    }\r\n\r\n    /**\r\n     * Return the remainder of a string after the last occurrence of a given value.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } search\r\n     *\r\n     * @return { string }\r\n     */\r\n    static afterLast(subject: string, search: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        const position: number = subject.lastIndexOf(search);\r\n\r\n        if (position === -1) {\r\n            return subject;\r\n        }\r\n\r\n        return subject.substring(position + search.length);\r\n    }\r\n\r\n    /**\r\n     * Transliterate a UTF-8 value to ASCII.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static ascii(value: string): string {\r\n        return value.normalize('NFD')\r\n            .replace(/[\\u0300-\\u036f]/g, '')\r\n            .replace(/[^a-zA-Z0-9]/g, '');\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string before the first occurrence of a given value.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } search\r\n     *\r\n     * @return { string }\r\n     */\r\n    static before(subject: string, search: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        const result: string = subject.substring(0, subject.indexOf(search));\r\n\r\n        if (result === '') {\r\n            return subject;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string before the last occurrence of a given value.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } search\r\n     *\r\n     * @return { string }\r\n     */\r\n    static beforeLast(subject: string, search: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        const position: number | null = subject.lastIndexOf(search) ?? null;\r\n\r\n        if (position === -1) {\r\n            return subject;\r\n        }\r\n\r\n        return this.substr(subject, 0, position);\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string between two given values.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } from\r\n     * @param { string } to\r\n     *\r\n     * @return { string }\r\n     */\r\n    static between(subject: string, from: string, to: string): string {\r\n        if (from === '' || to === '') {\r\n            return subject;\r\n        }\r\n\r\n        return this.beforeLast(this.after(subject, from), to);\r\n    }\r\n\r\n    /**\r\n     * Get the smallest possible portion of a string between two given values.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string } from\r\n     * @param { string } to\r\n     *\r\n     * @return { string }\r\n     */\r\n    static betweenFirst(subject: string, from: string, to: string): string {\r\n        if (from === '' || to === '') {\r\n            return subject;\r\n        }\r\n\r\n        return this.before(this.after(subject, from), to);\r\n    }\r\n\r\n    /**\r\n     * Convert a value to camel case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static camel(value: string): string {\r\n        return this.lcfirst(this.studly(value));\r\n    }\r\n\r\n    /**\r\n     * Get the character at the specified index.\r\n     *\r\n     * @param { string } subject\r\n     * @param { number } index\r\n     *\r\n     * @return { string | false }\r\n     */\r\n    static charAt(subject: string, index: number): string | false {\r\n        return subject.charAt(index);\r\n    }\r\n\r\n    /**\r\n     * Remove the given string(s) if it exists at the start of the haystack.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string | string[] } needle\r\n     *\r\n     * @return string\r\n     */\r\n    static chopStart(subject: string, needle: string | string[]): string {\r\n        let results: string = subject;\r\n\r\n        needle = Array.isArray(needle) ? needle : [needle];\r\n\r\n        needle.forEach((word: string) => {\r\n            if (subject.startsWith(word)) {\r\n                results = subject.substring(word.length);\r\n            }\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Remove the given string(s) if it exists at the end of the haystack.\r\n     *\r\n     * @param { string } subject\r\n     * @param { string | string[] } needle\r\n     *\r\n     * @return string\r\n     *\r\n     */\r\n    static chopEnd(subject: string, needle: string | string[]): string {\r\n        let results: string = subject;\r\n\r\n        needle = Array.isArray(needle) ? needle : [needle];\r\n\r\n        needle.forEach((word: string) => {\r\n            if (subject.endsWith(word)) {\r\n                results = subject.substring(0, subject.length - word.length);\r\n            }\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string contains a given substring.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string | array } needles\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static contains(haystack: string, needles: string | string[], ignoreCase: boolean = false): boolean {\r\n        let result: boolean = false;\r\n\r\n        if (ignoreCase) {\r\n            haystack = haystack.toLowerCase();\r\n        }\r\n\r\n        if (!(needles instanceof Array)) {\r\n            needles = [needles];\r\n        }\r\n\r\n        needles.forEach((needle: string) => {\r\n            if (ignoreCase) {\r\n                needle = needle.toLowerCase();\r\n            }\r\n\r\n            if (needle !== '' && haystack.includes(needle)) {\r\n                result = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string contains all array values.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { array } needles\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static containsAll(haystack: string, needles: string[], ignoreCase: boolean = false): boolean {\r\n        let result: boolean = true;\r\n\r\n        needles.forEach((needle: string) => {\r\n            if (!this.contains(haystack, needle, ignoreCase)) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string doesn't contain a given substring.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string | array } needles\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static doesntContain(haystack: string, needles: string | string[], ignoreCase: boolean = false): boolean {\r\n        return !this.contains(haystack, needles, ignoreCase);\r\n    }\r\n\r\n    /**\r\n     * Convert the case of a string.\r\n     *\r\n     * @param { string } string\r\n     * @param { Mode | number } mode\r\n     *\r\n     * @return { string }\r\n     */\r\n    static convertCase(string: string, mode: Mode | number = Mode.MB_CASE_FOLD): string {\r\n        switch (mode) {\r\n            case Mode.MB_CASE_UPPER: {\r\n                string = string.toLocaleUpperCase();\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_LOWER: {\r\n                string = string.toLocaleLowerCase();\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_TITLE: {\r\n                string = this.title(string);\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_FOLD: {\r\n                string = string.toLocaleLowerCase();\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_UPPER_SIMPLE: {\r\n                string = string.toUpperCase();\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_LOWER_SIMPLE: {\r\n                string = string.toLowerCase();\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_TITLE_SIMPLE: {\r\n                string = this.title(string);\r\n\r\n                break;\r\n            }\r\n            case Mode.MB_CASE_FOLD_SIMPLE: {\r\n                string = string.toLowerCase();\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        return string;\r\n    }\r\n\r\n    /**\r\n     * Replace consecutive instances of a given character with a single character in the given string.\r\n     *\r\n     * @param { string } string\r\n     * @param { string | string[] } characters\r\n     *\r\n     * @return { string }\r\n     */\r\n    static deduplicate(string: string, characters: string | string[] = ' '): string {\r\n        if (Array.isArray(characters)) {\r\n            return characters.reduce((carry: string, character: string): string => carry.replace(new RegExp(`${character.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}+`, 'gu'), character), string);\r\n        }\r\n\r\n        return string.replace(new RegExp(`${preg_quote(characters)}+`, 'gu'), characters);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string ends with a given substring.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string | array } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static endsWith(haystack: string, needles: string | string[]): boolean {\r\n        let result: boolean = false;\r\n\r\n        if (!(needles instanceof Array)) {\r\n            needles = [needles];\r\n        }\r\n\r\n        needles.forEach((needle: string) => {\r\n            if (needle !== '' && haystack.endsWith(needle)) {\r\n                result = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Extracts an excerpt from text that matches the first instance of a phrase.\r\n     *\r\n     * @param { string } text\r\n     * @param { string } phrase\r\n     * @param { object } options\r\n     *\r\n     * @return { string | null }\r\n     */\r\n    static excerpt(text: string, phrase: string = '', options: ExcerptOptions = {}): string | null {\r\n        const radius: number = options.radius ?? 100;\r\n        const omission: string = options.omission ?? '...';\r\n        const results: string[] = text.split(phrase);\r\n\r\n        if (results.length === 1) {\r\n            return null;\r\n        }\r\n\r\n        const matches: string[] = [text, (results[0] as string), phrase, results.splice(1).join(phrase)];\r\n\r\n        let start: string = (matches[1] as string).trimStart();\r\n        let end: string = (matches[3] as string).trimEnd();\r\n\r\n        start = this.of(this.substr(start, Math.max((start.length - radius), 0), radius))\r\n            .ltrim()\r\n            .unless(\r\n                (startWithRadius: Stringable) => startWithRadius.exactly(start),\r\n                (startWithRadius: Stringable) => startWithRadius.prepend(omission))\r\n            .toString();\r\n\r\n        end = this.of(this.substr(end, 0, radius))\r\n            .rtrim()\r\n            .unless(\r\n                (endWithRadius: Stringable) => endWithRadius.exactly(end),\r\n                (endWithRadius: Stringable) => endWithRadius.append(omission))\r\n            .toString();\r\n\r\n        return (start + ' ' + matches[2] + end).replace(/\\s+/g, ' ').trim();\r\n    }\r\n\r\n    /**\r\n     * Cap a string with a single instance of a given value.\r\n     *\r\n     * @param { string } value\r\n     * @param { string } cap\r\n     *\r\n     * @return { string }\r\n     */\r\n    static finish(value: string, cap: string): string {\r\n        return value.endsWith(cap) ? value : value + cap;\r\n    }\r\n\r\n    /**\r\n     * Wrap the string with the given strings.\r\n     *\r\n     * @param { string } value\r\n     * @param { string } before\r\n     * @param { string | null } after\r\n     *\r\n     * @return string\r\n     */\r\n    static wrap(value: string, before: string, after: string | null = null): string {\r\n        return before + value + (after ?? before);\r\n    }\r\n\r\n    /**\r\n     * Unwrap the string with the given strings.\r\n     *\r\n     * @param { string } value\r\n     * @param { string } before\r\n     * @param { string | null } after\r\n     *\r\n     * @return { string }\r\n     */\r\n    static unwrap(value: string, before: string, after: string | null = null): string {\r\n        if (this.startsWith(value, before)) {\r\n            value = this.replaceFirst(before, '', value);\r\n        }\r\n\r\n        if (this.endsWith(value, after ?? before)) {\r\n            value = this.replaceLast(after ?? before, '', value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string matches a given pattern.\r\n     *\r\n     * @param { string | array } pattern\r\n     * @param { string } value\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static is(pattern: string | string[], value: string, ignoreCase: boolean = false): boolean {\r\n        let patterns: string[] = Array.isArray(pattern) ? pattern : [pattern];\r\n\r\n        for (let pattern of patterns) {\r\n            if (pattern === value) {\r\n                return true;\r\n            }\r\n\r\n            if (ignoreCase && pattern.toLowerCase() === value.toLowerCase()) {\r\n                return true;\r\n            }\r\n\r\n            pattern = pattern.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&').replace(/\\\\\\*/g, '.*');\r\n\r\n            const regex: RegExp = new RegExp('^' + pattern + '$', ignoreCase ? 'iu' : 'u');\r\n\r\n            if (regex.test(value)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is 7-bit ASCII.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isAscii(value: string): boolean {\r\n        return !/[^ -~\\t\\r\\n]/.test(value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is valid JSON.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isJson(value: string): boolean {\r\n        try {\r\n            JSON.parse(value);\r\n        } catch (JsonException) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given value is a valid URL.\r\n     *\r\n     * @param { string } value\r\n     * @param { string[] } protocols\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isUrl(value: string, protocols: string[] = []): boolean {\r\n        const protocolPattern: string = protocols.length === 0 ? 'https?|ftp|file|mailto|tel|data|irc|magnet' : protocols.join('|');\r\n\r\n        const pattern: RegExp = new RegExp(`^(?:${protocolPattern}):\\\\/\\\\/(?:[\\\\w-]+(?:\\\\.[\\\\w-]+)+|localhost|\\\\d{1,3}(?:\\\\.\\\\d{1,3}){3})(?::\\\\d+)?(?:\\\\S*)?$`, 'i');\r\n\r\n        return pattern.test(value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is a valid UUID.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isUuid(value: string): boolean {\r\n        return new RegExp(/^[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/).test(value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is a valid ULID.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isUlid(value: string): boolean {\r\n        if (value.length !== 26) {\r\n            return false;\r\n        }\r\n\r\n        if (value.length !== value.match(/[0123456789ABCDEFGHJKMNPQRSTVWXYZabcdefghjkmnpqrstvwxyz]/g)?.length) {\r\n            return false;\r\n        }\r\n\r\n        return Number(value.charAt(0)) <= 7;\r\n    }\r\n\r\n    /**\r\n     * Convert a string to kebab case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static kebab(value: string): string {\r\n        return this.snake(value, '-');\r\n    }\r\n\r\n    /**\r\n     * Return the length of the given string.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { number }\r\n     */\r\n    static length(value: string): number {\r\n        return value.length;\r\n    }\r\n\r\n    /**\r\n     * Limit the number of characters in a string.\r\n     *\r\n     * @param { string } value\r\n     * @param { number } limit\r\n     * @param { string } end\r\n     * @param { boolean } preserveWords\r\n     *\r\n     * @return { string }\r\n     */\r\n    static limit(value: string, limit: number = 100, end: string = '...', preserveWords: boolean = false): string {\r\n        if (value.length <= limit) {\r\n            return value;\r\n        }\r\n\r\n        if (!preserveWords) {\r\n            return this.substr(value, 0, limit).trim() + end;\r\n        }\r\n\r\n        value = value.replace(/[\\n\\r]+/, ' ');\r\n\r\n        const trimmed: string = this.substr(value, 0, limit).trim();\r\n\r\n        if (this.substr(value, limit, 1) === ' ') {\r\n            return `${trimmed}${end}`;\r\n        }\r\n\r\n        return `${trimmed.replace(/(.*)\\s.*/, '$1')}${end}`;\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to lower-case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static lower(value: string): string {\r\n        return value.toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Limit the number of words in a string.\r\n     *\r\n     * @param { string } value\r\n     * @param { number } words\r\n     * @param { string } end\r\n     *\r\n     * @return { string }\r\n     */\r\n    static words(value: string, words: number = 100, end: string = '...'): string {\r\n        const wordsArray: string[] = value.match(/\\S+\\s*/g)?.splice(0, words) ?? [];\r\n\r\n        const result: string = wordsArray.join('');\r\n\r\n        if (wordsArray.length === 1 || this.length(value) === this.length(result)) {\r\n            return value;\r\n        }\r\n\r\n        return result.trim() + end;\r\n    }\r\n\r\n    /**\r\n     * Masks a portion of a string with a repeated character.\r\n     *\r\n     * @param { string } string\r\n     * @param { string } character\r\n     * @param { number } index\r\n     * @param { number | null } length\r\n     *\r\n     * @return { string }\r\n     */\r\n    static mask(string: string, character: string, index: number, length: number | null = null): string {\r\n        if (character === '') {\r\n            return string;\r\n        }\r\n\r\n        let start: number | string = index;\r\n        let endIndex: number = length ?? string.length;\r\n\r\n        if (start < 0) {\r\n            start = string.length + start;\r\n            endIndex = start + (length ?? 0);\r\n        }\r\n\r\n        if (endIndex === 0) {\r\n            endIndex = start;\r\n        }\r\n\r\n        let segment: string = string.substring(start, endIndex);\r\n\r\n        if (segment === '') {\r\n            return string;\r\n        }\r\n\r\n        let strLen: number = string.length;\r\n        let startIndex: number = index;\r\n\r\n        if (index < 0) {\r\n            startIndex = index < -strLen ? 0 : strLen + index;\r\n        }\r\n\r\n        start = string.substring(0, startIndex);\r\n\r\n        let segmentLen: number = segment.length;\r\n        let end: string = string.substring(startIndex + segmentLen);\r\n\r\n        return start + character.substring(0, 1).repeat(segmentLen) + end;\r\n    }\r\n\r\n    /**\r\n     * Get the string matching the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static match(pattern: string, subject: string): string {\r\n        const body: string = RegExpString.make(/^\\/(.*)\\/\\w*$/, pattern);\r\n        const flags: string = RegExpString.make(/^\\/.*\\/(\\w*)$/, pattern);\r\n        const expression: RegExp = new RegExp(body, flags);\r\n\r\n        const matches: RegExpMatchArray | null = RegExp(expression).exec(subject);\r\n\r\n        if (!matches) {\r\n            return '';\r\n        }\r\n\r\n        return matches[1] ?? matches[0];\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string matches a given pattern.\r\n     *\r\n     * @param { string | array } pattern\r\n     * @param { string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isMatch(pattern: string | string[], value: string): boolean {\r\n        let result: boolean = false;\r\n\r\n        if (!(pattern instanceof Array)) {\r\n            pattern = [pattern];\r\n        }\r\n\r\n        pattern.forEach(item => {\r\n            if (item === value) {\r\n                result = true;\r\n            }\r\n\r\n            // @ts-ignore\r\n            let body: string = /^\\/(.*)\\/\\w*$/.exec(item)[1];\r\n            // @ts-ignore\r\n            let flags: string = /^\\/.*\\/(\\w*)$/.exec(item)[1];\r\n            let expression: RegExp = new RegExp(body, flags);\r\n\r\n            if (RegExp(expression).exec(value)) {\r\n                result = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the string matching the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { string } subject\r\n     *\r\n     * @return { array }\r\n     */\r\n    static matchAll(pattern: string, subject: string): string[] {\r\n        const body: string = RegExpString.make(/^\\/(.*)\\/\\w*$/, pattern);\r\n        const flags: string = RegExpString.make(/^\\/.*\\/(\\w*)$/, pattern);\r\n\r\n        const expression: RegExp = new RegExp(body, flags + (flags.indexOf('g') !== -1 ? '' : 'g'));\r\n\r\n        const matches: RegExpMatchArray[] = [...subject.matchAll(new RegExp(expression, 'g'))];\r\n\r\n        if (matches.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        return matches.map((match: RegExpMatchArray) => String(match.length === 1 ? match[0] : match[1]));\r\n    }\r\n\r\n    /**\r\n     * Remove all non-numeric characters from a string.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static numbers(value: string): string {\r\n        return value.replace(/[^0-9]/g, '');\r\n    }\r\n\r\n    /**\r\n     * Pad both sides of a string with another.\r\n     *\r\n     * @param { string } value\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { string }\r\n     */\r\n    static padBoth(value: string, length: number, pad: string = ' '): string {\r\n        const short: number = Math.max(0, length - value.length);\r\n        const shortLeft: number = Math.floor(short / 2);\r\n        const shortRight: number = Math.ceil(short / 2);\r\n\r\n        return pad.repeat(shortLeft).substring(0, shortLeft) + value + pad.repeat(shortRight).substring(0, shortRight);\r\n    }\r\n\r\n    /**\r\n     * Pad the left side of a string with another.\r\n     *\r\n     * @param { string } value\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { string }\r\n     */\r\n    static padLeft(value: string, length: number, pad: string = ' '): string {\r\n        const short: number = Math.max(0, length - (value.length ?? 0));\r\n\r\n        return pad.repeat(short).substring(0, short) + value;\r\n    }\r\n\r\n    /**\r\n     * Pad the right side of a string with another.\r\n     *\r\n     * @param { string } value\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { string }\r\n     */\r\n    static padRight(value: string, length: number, pad: string = ' '): string {\r\n        const short: number = Math.max(0, length - value.length);\r\n\r\n        return value + pad.repeat(short).substring(0, short);\r\n    }\r\n\r\n    /**\r\n     * Get the plural form of an English word.\r\n     *\r\n     * @param { string } value\r\n     * @param { number | array } count\r\n     *\r\n     * @return { string }\r\n     */\r\n    static plural(value: string, count: number | number[] = 2): string {\r\n        if ((count !== undefined && count === 1) || value.trim() === '') {\r\n            return value;\r\n        }\r\n\r\n        // List of rules for plural words.\r\n        const plural: { [key: string]: string } = {\r\n            // Special cases (unchanged plurals)\r\n            '^(.*)menu$': '$1menus',\r\n            '^tights$'  : 'tights',\r\n            '^shorts$'  : 'shorts',\r\n            '^glasses$' : 'glasses',\r\n            '^pants$'   : 'pants',\r\n\r\n            // -us -> -i (second declension nouns)\r\n            '(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$': '$1i',\r\n            '(vir)us$'                                                           : '$1i',\r\n\r\n            // -um/on -> -a (neuter nouns)\r\n            '([ti])um$'   : '$1a',\r\n            '(tax)on$'    : '$1a',\r\n            '(criteri)on$': '$1a',\r\n\r\n            // -ix/ex -> -ices\r\n            '(matr)ix$'    : '$1ices',\r\n            '(vert|ind)ex$': '$1ices',\r\n\r\n            // -o -> -oes\r\n            '(buffal|her|potat|tomat|volcan)o$': '$1oes',\r\n\r\n            // -ouse -> -ouses\r\n            '(h|bl)ouse$': '$1ouses',\r\n            'ouse$'      : 'ouses',\r\n\r\n            // -y -> -ies\r\n            '([^aeiouy]|qu)y$': '$1ies',\r\n\r\n            // -f/fe -> -ves\r\n            '([lr])f$'             : '$1ves',\r\n            '([^fo])fe$'           : '$1ves',\r\n            '(shea|loa|lea|thie)f$': '$1ves',\r\n            '(li|wi|kni)fe$'       : '$1ves',\r\n\r\n            // -is -> -es\r\n            '(analys|ax|cris|test|thes)is$': '$1es',\r\n\r\n            // -e exceptions\r\n            '(alias|status|bus)$'          : '$1es',\r\n            '(shoe|slave)$'                : '$1s',\r\n            '(corpse)$'                    : '$1s',\r\n            '(drive|dive|hive|olive|tive)$': '$1s',\r\n\r\n            // -x -> -xes\r\n            '([ftw]ax)$': '$1es',\r\n\r\n            // -ouse -> -ice\r\n            '([m|l])ouse$': '$1ice',\r\n\r\n            // -e -> -es\r\n            '(x|ch|ss|sh)$': '$1es',\r\n            'o$'           : 'oes',\r\n\r\n            // -ze -> -zes\r\n            '(quiz)$': '$1zes',\r\n\r\n            // -ox -> -oxen\r\n            '^(ox)$': '$1en',\r\n\r\n            // -person -> -people\r\n            '(p)erson$': '$1eople',\r\n\r\n            // Irregular singulars\r\n            '(m)an$'  : '$1en',\r\n            '(c)hild$': '$1hildren',\r\n            '(f)oot$' : '$1eet',\r\n            '(m)ouse$': '$1ice',\r\n            '(t)ooth$': '$1eeth',\r\n            '(g)oose$': '$1eese',\r\n\r\n            // -news (unchanged)\r\n            '(n)ews$': '$1ews',\r\n\r\n            // -eau -> -eaus\r\n            'eau$': 'eaus',\r\n\r\n            // -sis -> -ses\r\n            '(^analy)sis$'                                                 : '$1ses',\r\n            '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)sis$': '$1$2ses',\r\n\r\n            // -ovie -> -ovies\r\n            '(m)ovie$': '$1ovies',\r\n\r\n            // -eries -> -eries (unchanged)\r\n            '(s)eries$': '$1eries',\r\n\r\n            // -us -> -uses\r\n            '([^a])us$': '$1uses',\r\n            'us$'      : 'uses',\r\n\r\n            // -status -> -statuses\r\n            '(s)tatus$': '$1tatuses',\r\n\r\n            // -campus -> -campuses\r\n            '(c)ampus$': '$1ampuses',\r\n\r\n            // General case (add -s)\r\n            '$': 's'\r\n        };\r\n\r\n        // List of words that change irregularly.\r\n        const irregular: { [key: string]: string } = {\r\n            // A\r\n            'abuse'    : 'abuses',\r\n            'alumna'   : 'alumnae',\r\n            'alumnus'  : 'alumni',\r\n            'analysis' : 'analyses',\r\n            'appendix' : 'appendices',\r\n            'atlas'    : 'atlases',\r\n            'avalanche': 'avalanches',\r\n            'axis'     : 'axes',\r\n            'axe'      : 'axes',\r\n\r\n            // B\r\n            'bacillus' : 'bacilli',\r\n            'bacterium': 'bacteria',\r\n            'basis'    : 'bases',\r\n            'beau'     : 'beaux',\r\n            'beef'     : 'beefs',\r\n            'blouse'   : 'blouses',\r\n            'brother'  : 'brothers',\r\n            'brownie'  : 'brownies',\r\n            'bureau'   : 'bureaux',\r\n\r\n            // C\r\n            'cache'     : 'caches',\r\n            'cactus'    : 'cacti',\r\n            'cafe'      : 'cafes',\r\n            'calf'      : 'calves',\r\n            'canvas'    : 'canvases',\r\n            'cave'      : 'caves',\r\n            'chateau'   : 'chateaux',\r\n            'child'     : 'children',\r\n            'cookie'    : 'cookies',\r\n            'corpus'    : 'corpuses',\r\n            'cow'       : 'cows',\r\n            'crisis'    : 'crises',\r\n            'criterion' : 'criteria',\r\n            'curriculum': 'curricula',\r\n            'curve'     : 'curves',\r\n\r\n            // D\r\n            'datum'    : 'data',\r\n            'deer'     : 'deer',\r\n            'demo'     : 'demos',\r\n            'diagnosis': 'diagnoses',\r\n            'domino'   : 'dominoes',\r\n\r\n            // E\r\n            'echo'    : 'echoes',\r\n            'elf'     : 'elves',\r\n            'ellipsis': 'ellipses',\r\n            'emphasis': 'emphases',\r\n            'epoch'   : 'epochs',\r\n\r\n            // F\r\n            'fish'   : 'fish',\r\n            'focus'  : 'foci',\r\n            'foe'    : 'foes',\r\n            'foot'   : 'feet',\r\n            'formula': 'formulae',\r\n            'fungus' : 'fungi',\r\n\r\n            // G\r\n            'ganglion': 'ganglions',\r\n            'gas'     : 'gases',\r\n            'genie'   : 'genies',\r\n            'genus'   : 'genera',\r\n            'goose'   : 'geese',\r\n            'graffito': 'graffiti',\r\n            'grave'   : 'graves',\r\n\r\n            // H\r\n            'half'        : 'halves',\r\n            'hippopotamus': 'hippopotami',\r\n            'hoax'        : 'hoaxes',\r\n            'hoof'        : 'hoofs',\r\n            'human'       : 'humans',\r\n\r\n            // I\r\n            'iris': 'irises',\r\n\r\n            // K\r\n            'knife': 'knives',\r\n\r\n            // L\r\n            'larva': 'larvae',\r\n            'leaf' : 'leaves',\r\n            'lens' : 'lenses',\r\n            'life' : 'lives',\r\n            'loaf' : 'loaves',\r\n\r\n            // M\r\n            'man'       : 'men',\r\n            'matrix'    : 'matrices',\r\n            'means'     : 'means',\r\n            'medium'    : 'media',\r\n            'memorandum': 'memoranda',\r\n            'money'     : 'monies',\r\n            'mongoose'  : 'mongooses',\r\n            'mouse'     : 'mice',\r\n            'motto'     : 'mottoes',\r\n            'move'      : 'moves',\r\n            'mythos'    : 'mythoi',\r\n\r\n            // N\r\n            'nebula'  : 'nebulae',\r\n            'neurosis': 'neuroses',\r\n            'niche'   : 'niches',\r\n            'niveau'  : 'niveaux',\r\n            'nucleus' : 'nuclei',\r\n            'numen'   : 'numina',\r\n\r\n            // O\r\n            'oasis'    : 'oases',\r\n            'occiput'  : 'occiputs',\r\n            'octopus'  : 'octopuses',\r\n            'offspring': 'offspring',\r\n            'opus'     : 'opuses',\r\n            'ox'       : 'oxen',\r\n\r\n            // P\r\n            'parenthesis': 'parentheses', 'passerby': 'passersby',\r\n            'penis'      : 'penises',\r\n            'person'     : 'people',\r\n            'phenomenon' : 'phenomena',\r\n            'plateau'    : 'plateaux',\r\n\r\n            // R\r\n            'radius'   : 'radii',\r\n            'runner-up': 'runners-up',\r\n\r\n            // S\r\n            'safe'      : 'safes',\r\n            'save'      : 'saves',\r\n            'scarf'     : 'scarves',\r\n            'self'      : 'selves',\r\n            'series'    : 'series',\r\n            'sex'       : 'sexes',\r\n            'sheep'     : 'sheep',\r\n            'shelf'     : 'shelves',\r\n            'sieve'     : 'sieves',\r\n            'soliloquy' : 'soliloquies',\r\n            'son-in-law': 'sons-in-law',\r\n            'species'   : 'species',\r\n            'stadium'   : 'stadiums',\r\n            'stimulus'  : 'stimuli',\r\n            'stratum'   : 'strata',\r\n            'swine'     : 'swine',\r\n            'syllabus'  : 'syllabi',\r\n            'synthesis' : 'syntheses',\r\n\r\n            // T\r\n            'testis' : 'testes',\r\n            'thesis' : 'theses',\r\n            'thief'  : 'thieves',\r\n            'tooth'  : 'teeth',\r\n            'tornado': 'tornadoes',\r\n            'trilby' : 'trilbys',\r\n            'turf'   : 'turfs',\r\n\r\n            // V\r\n            'valve'  : 'valves',\r\n            'volcano': 'volcanoes',\r\n\r\n            // W\r\n            'wave': 'waves',\r\n            'wife': 'wives',\r\n            'wolf': 'wolves',\r\n\r\n            // Z\r\n            'zombie': 'zombies'\r\n        };\r\n\r\n        // List of words that do not change.\r\n        const uncountable: string[] = [\r\n            // A\r\n            'advice',\r\n            'aircraft',\r\n            'amoyese',\r\n            'art',\r\n            'audio',\r\n\r\n            // B\r\n            'baggage',\r\n            'bison',\r\n            'borghese',\r\n            'bream',\r\n            'breeches',\r\n            'britches',\r\n            'buffalo',\r\n            'butter',\r\n\r\n            // C\r\n            'cantus',\r\n            'carp',\r\n            'cattle',\r\n            'chassis',\r\n            'clippers',\r\n            'clothing',\r\n            'coal',\r\n            'cod',\r\n            'coitus',\r\n            'compensation',\r\n            'congoese',\r\n            'contretemps',\r\n            'coreopsis',\r\n            'corps',\r\n            'cotton',\r\n\r\n            // D\r\n            'data',\r\n            'debris',\r\n            'deer',\r\n            'diabetes',\r\n            'djinn',\r\n\r\n            // E\r\n            'education',\r\n            'eland',\r\n            'elk',\r\n            'emoji',\r\n            'equipment',\r\n            'evidence',\r\n\r\n            // F\r\n            'faroese',\r\n            'feedback',\r\n            'fish',\r\n            'flounder',\r\n            'flour',\r\n            'foochowese',\r\n            'food',\r\n            'furniture',\r\n\r\n            // G\r\n            'gallows',\r\n            'genevese',\r\n            'genoese',\r\n            'gilbertese',\r\n            'gold',\r\n\r\n            // H\r\n            'headquarters',\r\n            'herpes',\r\n            'hijinks',\r\n            'homework',\r\n            'hovercraft',\r\n            'hottentotese',\r\n\r\n            // I\r\n            'impatience',\r\n            'information',\r\n            'innings',\r\n\r\n            // J\r\n            'jackanapes',\r\n            'jeans',\r\n            'jedi',\r\n\r\n            // K\r\n            'kin',\r\n            'kiplingese',\r\n            'knowledge',\r\n            'kongoese',\r\n\r\n            // L\r\n            'leather',\r\n            'love',\r\n            'lucchese',\r\n            'luggage',\r\n\r\n            // M\r\n            'mackerel',\r\n            'Maltese',\r\n            'management',\r\n            'metadata',\r\n            'mews',\r\n            'money',\r\n            'moose',\r\n            'mumps',\r\n            'music',\r\n\r\n            // N\r\n            'nankingese',\r\n            'news',\r\n            'nexus',\r\n            'niasese',\r\n            'nutrition',\r\n\r\n            // O\r\n            'oil',\r\n            'offspring',\r\n\r\n            // P\r\n            'patience',\r\n            'pekingese',\r\n            'piedmontese',\r\n            'pike',\r\n            'pincers',\r\n            'pistoiese',\r\n            'plankton',\r\n            'pliers',\r\n            'pokemon',\r\n            'police',\r\n            'polish',\r\n            'portuguese',\r\n            'proceedings',\r\n            'progress',\r\n\r\n            // Q\r\n            // (none yet)\r\n\r\n            // R\r\n            'rabies',\r\n            'rain',\r\n            'research',\r\n            'rhinoceros',\r\n            'rice',\r\n\r\n            // S\r\n            'salmon',\r\n            'sand',\r\n            'sarawakese',\r\n            'scissors',\r\n            'sea[- ]bass',\r\n            'series',\r\n            'shavese',\r\n            'shears',\r\n            'sheep',\r\n            'shrimp',\r\n            'siemens',\r\n            'silk',\r\n            'sms',\r\n            'soap',\r\n            'social media',\r\n            'spacecraft',\r\n            'spam',\r\n            'species',\r\n            'staff',\r\n            'sugar',\r\n            'swine',\r\n\r\n            // T\r\n            'talent',\r\n            'toothpaste',\r\n            'traffic',\r\n            'travel',\r\n            'trousers',\r\n            'trout',\r\n            'tuna',\r\n\r\n            // U\r\n            'us',\r\n\r\n            // V\r\n            'vermontese',\r\n            'vinegar',\r\n\r\n            // W\r\n            'weather',\r\n            'wenchowese',\r\n            'wheat',\r\n            'whiting',\r\n            'wildebeest',\r\n            'wood',\r\n            'wool',\r\n\r\n            // Y\r\n            'yengeese',\r\n            'you'\r\n        ];\r\n\r\n        if (uncountable.indexOf(value.toLowerCase()) >= 0) {\r\n            return matchCase(value, value);\r\n        }\r\n\r\n        for (const word in irregular) {\r\n            const pattern: RegExp = new RegExp(`${word}$`, 'i');\r\n\r\n            if (pattern.test(value)) {\r\n                return matchCase(value.replace(pattern, (irregular[word] as string)), value);\r\n            }\r\n        }\r\n\r\n        for (const word in plural) {\r\n            const pattern: RegExp = new RegExp(word, 'i');\r\n\r\n            if (pattern.test(value)) {\r\n                return matchCase(value.replace(pattern, (plural[word] as string)), value);\r\n            }\r\n        }\r\n\r\n        return matchCase(value, value);\r\n    }\r\n\r\n    /**\r\n     * Pluralize the last word of an English, studly caps case string.\r\n     *\r\n     * @param { string } value\r\n     * @param { number | array } count\r\n     *\r\n     * @return { string }\r\n     */\r\n    static pluralStudly(value: string, count: number | number[] = 2): string {\r\n        const parts: string[] = value.split(/(.)(?=[A-Z])/);\r\n\r\n        const lastWord: string = (parts.pop() as string);\r\n\r\n        return parts.join('') + this.ucfirst(this.plural(lastWord, count));\r\n    }\r\n\r\n    /**\r\n     * Pluralize the last word of an English, Pascal case string.\r\n     *\r\n     * @param { string } value\r\n     * @param { number | array } count\r\n     *\r\n     * @return { string }\r\n     */\r\n    static pluralPascal(value: string, count: number | number[] = 2): string {\r\n        return this.pluralStudly(value, count);\r\n    }\r\n\r\n    /**\r\n     * Generate a random, secure password.\r\n     *\r\n     * @param { number } length\r\n     * @param { boolean } letters\r\n     * @param { boolean } numbers\r\n     * @param { boolean } symbols\r\n     * @param { boolean } spaces\r\n     *\r\n     * @return { string }\r\n     */\r\n    static password(length: number = 32, letters: boolean = true, numbers: boolean = true, symbols: boolean = true, spaces: boolean = false): string {\r\n        let password: string[] = [];\r\n        let collection: string[] = [];\r\n\r\n        while (password.length < length) {\r\n            if (letters) {\r\n                collection = collection.concat([\r\n                    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\r\n                    'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\r\n                    'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\r\n                    'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\r\n                    'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\r\n                ]);\r\n            }\r\n\r\n            if (numbers) {\r\n                collection = collection.concat([\r\n                    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\r\n                ]);\r\n            }\r\n\r\n            if (symbols) {\r\n                collection = collection.concat([\r\n                    '~', '!', '#', '$', '%', '^', '&', '*', '(', ')', '-',\r\n                    '_', '.', ',', '<', '>', '?', '/', '\\\\', '{', '}', '[',\r\n                    ']', '|', ':', ';',\r\n                ]);\r\n            }\r\n\r\n            if (spaces) {\r\n                collection = collection.concat([' ']);\r\n            }\r\n\r\n            password.push((collection[Math.floor(Math.random() * collection.length)] as string));\r\n        }\r\n\r\n        return password.join('');\r\n    }\r\n\r\n    /**\r\n     * Find the position of the first occurrence of a given substring in a string.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string } needle\r\n     * @param { number } offset\r\n     *\r\n     * @return { number | false }\r\n     */\r\n    static position(haystack: string, needle: string, offset: number = 0): number | false {\r\n        const position: number = haystack.indexOf(needle, Math.max(offset, 0));\r\n\r\n        return position !== -1 ? position : false;\r\n    }\r\n\r\n    /**\r\n     * Generate a more truly \"random\" alpha-numeric string.\r\n     *\r\n     * @param { number } length\r\n     *\r\n     * @return { string }\r\n     */\r\n    static random(length: number = 16): string {\r\n        let byteSize: number = Math.ceil((length) / 3) * 3;\r\n\r\n        let bytes: string = crypto.getRandomValues(new Uint8Array(byteSize)).join('');\r\n\r\n        let string: string = btoa(bytes);\r\n\r\n        ['/', '+', '='].forEach((char: string) => string = string.replace(char, ''));\r\n\r\n        return string.substring(0, length);\r\n    }\r\n\r\n    /**\r\n     * Repeat the given string.\r\n     *\r\n     * @param { string } string\r\n     * @param { number } times\r\n     *\r\n     * @return { string }\r\n     */\r\n    static repeat(string: string, times: number = 1): string {\r\n        return string.repeat(times);\r\n    }\r\n\r\n    /**\r\n     * Replace a given value in the string sequentially with an array.\r\n     *\r\n     * @param { string[] } replace\r\n     * @param { string } subject\r\n     * @param { string } search\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceArray(search: string, replace: string[], subject: string): string {\r\n        const segments: string[] = subject.split(search);\r\n\r\n        let result: string = segments.shift()!;\r\n\r\n        segments.forEach((segment: string) => result += Str.toStringOr(replace.shift() ?? search, search) + segment);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Convert the given value to a string or return the given fallback on failure.\r\n     *\r\n     * @param { * } value\r\n     * @param { string } fallback\r\n     *\r\n     * @return { string }\r\n     */\r\n    static toStringOr(value: any, fallback: string): string {\r\n        try {\r\n            let result: string = String(value);\r\n\r\n            if (result === 'undefined' || result === 'null') {\r\n                return fallback;\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            return fallback;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replace the given value in the given string.\r\n     *\r\n     * @param { string | string[] } search\r\n     * @param { string } replace\r\n     * @param { string } subject\r\n     * @param { boolean } caseSensitive\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replace(search: string | string[], replace: string, subject: string, caseSensitive: boolean = true): string {\r\n        if (!(search instanceof Array)) {\r\n            search = [search];\r\n        }\r\n\r\n        search.forEach((term: string | RegExp) => {\r\n            if (!caseSensitive) {\r\n                term = new RegExp(term, 'gi');\r\n            }\r\n\r\n            subject = subject.replaceAll(term, replace);\r\n        });\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Replace the first occurrence of a given value in the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceFirst(search: string, replace: string, subject: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        let position: number = subject.indexOf(search);\r\n\r\n        if (position !== undefined) {\r\n            return subject.replace(search, replace);\r\n        }\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Replace the first occurrence of the given value if it appears at the start of the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceStart(search: string, replace: string, subject: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        if (this.startsWith(subject, search)) {\r\n            return this.replaceFirst(search, replace, subject);\r\n        }\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Replace the last occurrence of a given value in the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceLast(search: string, replace: string, subject: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        let position: number = subject.lastIndexOf(search);\r\n\r\n        if (position !== 0) {\r\n            return subject.substring(0, position) + replace + subject.substring(position + search.length);\r\n        }\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Replace the last occurrence of a given value if it appears at the end of the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceEnd(search: string, replace: string, subject: string): string {\r\n        if (search === '') {\r\n            return subject;\r\n        }\r\n\r\n        if (this.endsWith(subject, search)) {\r\n            return this.replaceLast(search, replace, subject);\r\n        }\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Replace the patterns matching the given regular expression.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { string | function } replace\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static replaceMatches(pattern: string, replace: string | Function, subject: string): string {\r\n        const body: string = RegExpString.make(/^\\/(.*)\\/\\w*$/, pattern);\r\n        const flags: string = RegExpString.make(/^\\/.*\\/(\\w*)$/, pattern);\r\n        const expression: RegExp = new RegExp(body, flags + (flags.indexOf('g') !== -1 ? '' : 'g'));\r\n\r\n        if (replace instanceof Function) {\r\n            subject = subject.replace(expression, (matched) => matched);\r\n        }\r\n\r\n        return subject.replace(expression, (replace as string));\r\n    }\r\n\r\n    /**\r\n     * Remove any occurrence of the given string in the subject.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } subject\r\n     * @param { boolean } caseSensitive\r\n     *\r\n     * @return { string }\r\n     */\r\n    static remove(search: string, subject: string, caseSensitive: boolean = true): string {\r\n        return subject.replace(new RegExp(search, caseSensitive ? 'g' : 'gi'), '');\r\n    }\r\n\r\n    /**\r\n     * Reverse the given string.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static reverse(value: string): string {\r\n        return value.split('').reverse().join('');\r\n    }\r\n\r\n    /**\r\n     * Begin a string with a single instance of a given value.\r\n     *\r\n     * @param { string } value\r\n     * @param { string } prefix\r\n     *\r\n     * @return { string }\r\n     */\r\n    static start(value: string, prefix: string): string {\r\n        const quoted: string = preg_quote(prefix, '/');\r\n\r\n        return prefix + value.replace(new RegExp(`^(?:${quoted})+`, 'u'), '');\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to upper-case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static upper(value: string): string {\r\n        return value.toUpperCase();\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to title case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static title(value: string): string {\r\n        return value.split(/[^A-Za-z]/)\r\n            .map((word: string) => {\r\n                return this.ucfirst(word[0] + word.substring(1).toLowerCase());\r\n            })\r\n            .join(' ');\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to title case for each word.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static headline(value: string): string {\r\n        let parts: string[] = value.split(' ');\r\n\r\n        parts = parts.length > 1\r\n            ? parts.map((part: string) => this.title(part))\r\n            : this.ucsplit(parts.join('_')).map((part: string) => this.title(part));\r\n\r\n        let collapsed: string = this.replace(['-', '_', ' '], '_', parts.join('_'));\r\n\r\n        return collapsed.split('_').join(' ').trim();\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to APA-style title case.\r\n     *\r\n     * @see https://apastyle.apa.org/style-grammar-guidelines/capitalization/title-case\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static apa(value: string): string {\r\n        if (value === '') {\r\n            return value;\r\n        }\r\n\r\n        const minorWords: string[] = [\r\n            'and', 'as', 'but', 'for', 'if', 'nor', 'or', 'so', 'yet', 'a', 'an',\r\n            'the', 'at', 'by', 'for', 'in', 'of', 'off', 'on', 'per', 'to', 'up', 'via',\r\n        ];\r\n\r\n        const endPunctuation: string[] = ['.', '!', '?', ':', '—', ','];\r\n\r\n        let words: string[] = value.split(/\\s+/).filter(Boolean);\r\n\r\n        words[0] = (words[0] as string).charAt(0).toUpperCase() + (words[0] as string).slice(1).toLowerCase();\r\n\r\n        for (let i = 0; i < words.length; i++) {\r\n            let lowercaseWord: string = (words[i] as string).toLowerCase();\r\n\r\n            if (lowercaseWord.includes('-')) {\r\n                let hyphenatedWords: string[] = lowercaseWord.split('-');\r\n\r\n                hyphenatedWords = hyphenatedWords.map((part: string) =>\r\n                    (minorWords.includes(part) && part.length <= 3) ? part : this.ucfirst(part)\r\n                );\r\n\r\n                words[i] = hyphenatedWords.join('-');\r\n            } else if (minorWords.includes(lowercaseWord) &&\r\n                lowercaseWord.length <= 3 &&\r\n                !(i === 0 || endPunctuation.includes((words[i - 1] as string).slice(-1)))) {\r\n                words[i] = lowercaseWord;\r\n            } else {\r\n                words[i] = this.ucfirst(lowercaseWord);\r\n            }\r\n        }\r\n\r\n        return words.join(' ');\r\n    }\r\n\r\n    /**\r\n     * Get the singular form of an English word.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static singular(value: string): string {\r\n        // List of rules for singular words.\r\n        const singular: { [key: string]: string } = {\r\n            // Special cases\r\n            '^(.*)(menu)s$': '$1$2',\r\n            '^tights$'     : 'tights',\r\n            '^shorts$'     : 'shorts',\r\n            '^glasses$'    : 'glasses',\r\n            '^pants$'      : 'pants',\r\n\r\n            // -us -> -i (second declension nouns)\r\n            '(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|viri?)i$': '$1us',\r\n            '(vir)i$'                                                             : '$1us',\r\n\r\n            // -a -> -um/on (neuter nouns)\r\n            '([ti])a$'            : '$1um',\r\n            '([ti])a(?<!regatta)$': '$1um',\r\n            '(tax)a$'             : '$1on',\r\n            '(c)riteria$'         : '$1riterion',\r\n\r\n            // -ices -> -ex/ix\r\n            '(matr)ices$'    : '$1ix',\r\n            '(vert|ind)ices$': '$1ex',\r\n\r\n            // -oes -> -o\r\n            '(buffal|her|potat|tomat|volcan)oes$': '$1o',\r\n\r\n            // -ouses -> -ouse\r\n            '(h|bl)ouses$': '$1ouse',\r\n            'ouses$'      : 'ouse',\r\n\r\n            // -ies -> -y\r\n            '([^aeiouy]|qu)ies$': '$1y',\r\n\r\n            // -ves -> -f/fe\r\n            '([lr])ves$'             : '$1f',\r\n            '([^fo])ves$'            : '$1fe',\r\n            '(shea|loa|lea|thie)ves$': '$1f',\r\n            '(li|wi|kni)ves$'        : '$1fe',\r\n\r\n            // -es -> -is\r\n            '(analys|ax|cris|test|thes)es$': '$1is',\r\n            '(cris|ax|test)es$'            : '$1is',\r\n\r\n            // -es exceptions\r\n            '(alias|status|bus)es$'         : '$1',\r\n            '(shoe|slave)s$'                : '$1',\r\n            '(corpse)s$'                    : '$1',\r\n            '(drive|dive|hive|olive|tive)s$': '$1',\r\n\r\n            // -xes\r\n            '([ftw]ax)es': '$1',\r\n\r\n            // -ices -> -ouse\r\n            '([m|l])ice$': '$1ouse',\r\n\r\n            // -es -> -e\r\n            '(o)es$'         : '$1',\r\n            '(x|ch|ss|sh)es$': '$1',\r\n\r\n            // -zes -> -ze\r\n            '(quiz)zes$': '$1',\r\n\r\n            // -en -> - (oxen -> ox)\r\n            '^(ox)en$': '$1',\r\n\r\n            // -people -> -person\r\n            '(p)eople$': '$1erson',\r\n\r\n            // Irregular plurals\r\n            '(m)en$'     : '$1an',\r\n            '(c)hildren$': '$1hild',\r\n            '(f)eet$'    : '$1oot',\r\n            '(m)ice$'    : '$1ouse',\r\n            '(t)eeth$'   : '$1ooth',\r\n            '(g)eese$'   : '$1oose',\r\n\r\n            // -news\r\n            '(n)ews$': '$1ews',\r\n\r\n            // -eau\r\n            'eaus$': 'eau',\r\n\r\n            // -ses -> -sis\r\n            '(^analy)ses$'                                                 : '$1sis',\r\n            '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$': '$1$2sis',\r\n\r\n            // -movies\r\n            '(m)ovies$': '$1ovie',\r\n\r\n            // -series\r\n            '(s)eries$': '$1eries',\r\n\r\n            // -us\r\n            '([^a])uses$': '$1us',\r\n            '(us)es$'    : '$1',\r\n\r\n            // -status\r\n            '(s)tatus(es)?$': '$1tatus',\r\n\r\n            // -campus\r\n            '(c)ampus$': '$1ampus',\r\n\r\n            // General case\r\n            's$': ''\r\n        };\r\n\r\n        // List of words that change irregularly.\r\n        const irregular: { [key: string]: string } = {\r\n            // A\r\n            'abuses'    : 'abuse',\r\n            'alumnae'   : 'alumna',\r\n            'alumni'    : 'alumnus',\r\n            'analyses'  : 'analysis',\r\n            'appendices': 'appendix',\r\n            'atlases'   : 'atlas',\r\n            'avalanches': 'avalanche',\r\n            'axes'      : 'axis',  // Also covers 'axe'\r\n\r\n            // B\r\n            'bacilli' : 'bacillus',\r\n            'bacteria': 'bacterium',\r\n            'bases'   : 'basis',\r\n            'beaux'   : 'beau',\r\n            'beefs'   : 'beef',\r\n            'blouses' : 'blouse',\r\n            'brothers': 'brother',\r\n            'brownies': 'brownie',\r\n            'bureaux' : 'bureau',\r\n\r\n            // C\r\n            'caches'   : 'cache',\r\n            'cacti'    : 'cactus',\r\n            'cafes'    : 'cafe',\r\n            'calves'   : 'calf',\r\n            'canvases' : 'canvas',\r\n            'caves'    : 'cave',\r\n            'chateaux' : 'chateau',\r\n            'children' : 'child',\r\n            'cookies'  : 'cookie',\r\n            'corpuses' : 'corpus',\r\n            'cows'     : 'cow',\r\n            'crises'   : 'crisis',\r\n            'criteria' : 'criterion',\r\n            'curricula': 'curriculum',\r\n            'curves'   : 'curve',\r\n\r\n            // D\r\n            'deer'     : 'deer',\r\n            'demos'    : 'demo',\r\n            'diagnoses': 'diagnosis',\r\n            'dominoes' : 'domino',\r\n\r\n            // E\r\n            'echoes'  : 'echo',\r\n            'elves'   : 'elf',\r\n            'ellipses': 'ellipsis',\r\n            'emphases': 'emphasis',\r\n            'epochs'  : 'epoch',\r\n\r\n            // F\r\n            'fish'    : 'fish',\r\n            'foci'    : 'focus',\r\n            'foes'    : 'foe',\r\n            'feet'    : 'foot',\r\n            'formulae': 'formula',\r\n            'fungi'   : 'fungus',\r\n\r\n            // G\r\n            'ganglions': 'ganglion',\r\n            'gases'    : 'gas',\r\n            'genies'   : 'genie',\r\n            'genera'   : 'genus',\r\n            'geese'    : 'goose',\r\n            'graffiti' : 'graffito',\r\n            'graves'   : 'grave',\r\n\r\n            // H\r\n            'halves'     : 'half',\r\n            'hippopotami': 'hippopotamus',\r\n            'hoaxes'     : 'hoax',\r\n            'hoofs'      : 'hoof',  // Also acceptable: 'hooves'\r\n            'humans'     : 'human',\r\n\r\n            // I\r\n            'irises': 'iris',\r\n\r\n            // K\r\n            'knives': 'knife',\r\n\r\n            // L\r\n            'larvae': 'larva',\r\n            'leaves': 'leaf',\r\n            'lenses': 'lens',\r\n            'lives' : 'life',\r\n            'loaves': 'loaf',\r\n\r\n            // M\r\n            'men'      : 'man',\r\n            'matrices' : 'matrix',\r\n            'means'    : 'means',\r\n            'media'    : 'medium',\r\n            'memoranda': 'memorandum',\r\n            'monies'   : 'money',\r\n            'mongooses': 'mongoose',\r\n            'mice'     : 'mouse',\r\n            'mottoes'  : 'motto',\r\n            'moves'    : 'move',\r\n            'mythoi'   : 'mythos',\r\n\r\n            // N\r\n            'nebulae' : 'nebula',\r\n            'neuroses': 'neurosis',\r\n            'niches'  : 'niche',\r\n            'niveaux' : 'niveau',\r\n            'nuclei'  : 'nucleus',\r\n            'numina'  : 'numen',\r\n\r\n            // O\r\n            'oases'    : 'oasis',\r\n            'occiputs' : 'occiput',\r\n            'octopuses': 'octopus',\r\n            'offspring': 'offspring',\r\n            'opuses'   : 'opus',\r\n            'oxen'     : 'ox',\r\n\r\n            // P\r\n            'parentheses': 'parenthesis',\r\n            'passersby'  : 'passerby',\r\n            'penises'    : 'penis',\r\n            'people'     : 'person',\r\n            'phenomena'  : 'phenomenon',\r\n            'plateaux'   : 'plateau',\r\n\r\n            // R\r\n            'radii'     : 'radius',\r\n            'runners-up': 'runner-up',\r\n\r\n            // S\r\n            'safes'      : 'safe',\r\n            'saves'      : 'save',\r\n            'scarves'    : 'scarf',\r\n            'selves'     : 'self',\r\n            'series'     : 'series',\r\n            'sexes'      : 'sex',\r\n            'sheep'      : 'sheep',\r\n            'shelves'    : 'shelf',\r\n            'sieves'     : 'sieve',\r\n            'soliloquies': 'soliloquy',\r\n            'sons-in-law': 'son-in-law',\r\n            'species'    : 'species',\r\n            'stadiums'   : 'stadium',\r\n            'stimuli'    : 'stimulus',\r\n            'strata'     : 'stratum',\r\n            'swine'      : 'swine',\r\n            'syllabi'    : 'syllabus',\r\n            'syntheses'  : 'synthesis',\r\n\r\n            // T\r\n            'testes'   : 'testis',\r\n            'theses'   : 'thesis',\r\n            'thieves'  : 'thief',\r\n            'teeth'    : 'tooth',\r\n            'tornadoes': 'tornado',\r\n            'trilbys'  : 'trilby',\r\n            'turfs'    : 'turf',  // Also acceptable: 'turves'\r\n\r\n            // V\r\n            'valves'   : 'valve',\r\n            'volcanoes': 'volcano',\r\n\r\n            // W\r\n            'waves' : 'wave',\r\n            'wives' : 'wife',\r\n            'wolves': 'wolf',\r\n\r\n            // Z\r\n            'zombies': 'zombie'\r\n        };\r\n\r\n        // List of words that do not change.\r\n        const uncountable: string[] = [\r\n            // A\r\n            'advice',\r\n            'aircraft',\r\n            'amoyese',\r\n            'art',\r\n            'audio',\r\n\r\n            // B\r\n            'baggage',\r\n            'bison',\r\n            'borghese',\r\n            'bream',\r\n            'breeches',\r\n            'britches',\r\n            'buffalo',\r\n            'butter',\r\n\r\n            // C\r\n            'cantus',\r\n            'carp',\r\n            'cattle',\r\n            'chassis',\r\n            'clippers',\r\n            'clothing',\r\n            'coal',\r\n            'cod',\r\n            'coitus',\r\n            'compensation',\r\n            'congoese',\r\n            'contretemps',\r\n            'coreopsis',\r\n            'corps',\r\n            'cotton',\r\n\r\n            // D\r\n            'data',\r\n            'debris',\r\n            'deer',\r\n            'diabetes',\r\n            'djinn',\r\n\r\n            // E\r\n            'education',\r\n            'eland',\r\n            'elk',\r\n            'emoji',\r\n            'equipment',\r\n            'evidence',\r\n\r\n            // F\r\n            'faroese',\r\n            'feedback',\r\n            'fish',\r\n            'flounder',\r\n            'flour',\r\n            'foochowese',\r\n            'food',\r\n            'furniture',\r\n\r\n            // G\r\n            'gallows',\r\n            'genevese',\r\n            'genoese',\r\n            'gilbertese',\r\n            'gold',\r\n\r\n            // H\r\n            'headquarters',\r\n            'herpes',\r\n            'hijinks',\r\n            'homework',\r\n            'hovercraft',\r\n            'hottentotese',\r\n\r\n            // I\r\n            'impatience',\r\n            'information',\r\n            'innings',\r\n\r\n            // J\r\n            'jackanapes',\r\n            'jeans',\r\n            'jedi',\r\n\r\n            // K\r\n            'kin',\r\n            'kiplingese',\r\n            'knowledge',\r\n            'kongoese',\r\n\r\n            // L\r\n            'leather',\r\n            'love',\r\n            'lucchese',\r\n            'luggage',\r\n\r\n            // M\r\n            'mackerel',\r\n            'Maltese',\r\n            'management',\r\n            'metadata',\r\n            'mews',\r\n            'money',\r\n            'moose',\r\n            'mumps',\r\n            'music',\r\n\r\n            // N\r\n            'nankingese',\r\n            'news',\r\n            'nexus',\r\n            'niasese',\r\n            'nutrition',\r\n\r\n            // O\r\n            'oil',\r\n            'offspring',\r\n\r\n            // P\r\n            'patience',\r\n            'pekingese',\r\n            'piedmontese',\r\n            'pike',\r\n            'pincers',\r\n            'pistoiese',\r\n            'plankton',\r\n            'pliers',\r\n            'pokemon',\r\n            'police',\r\n            'polish',\r\n            'portuguese',\r\n            'proceedings',\r\n            'progress',\r\n\r\n            // Q\r\n            // (none yet)\r\n\r\n            // R\r\n            'rabies',\r\n            'rain',\r\n            'research',\r\n            'rhinoceros',\r\n            'rice',\r\n\r\n            // S\r\n            'salmon',\r\n            'sand',\r\n            'sarawakese',\r\n            'scissors',\r\n            'sea[- ]bass',\r\n            'series',\r\n            'shavese',\r\n            'shears',\r\n            'sheep',\r\n            'shrimp',\r\n            'siemens',\r\n            'silk',\r\n            'sms',\r\n            'soap',\r\n            'social media',\r\n            'spacecraft',\r\n            'spam',\r\n            'species',\r\n            'staff',\r\n            'sugar',\r\n            'swine',\r\n\r\n            // T\r\n            'talent',\r\n            'toothpaste',\r\n            'traffic',\r\n            'travel',\r\n            'trousers',\r\n            'trout',\r\n            'tuna',\r\n\r\n            // U\r\n            'us',\r\n\r\n            // V\r\n            'vermontese',\r\n            'vinegar',\r\n\r\n            // W\r\n            'weather',\r\n            'wenchowese',\r\n            'wheat',\r\n            'whiting',\r\n            'wildebeest',\r\n            'wood',\r\n            'wool',\r\n\r\n            // Y\r\n            'yengeese',\r\n            'you'\r\n        ];\r\n\r\n        if (uncountable.indexOf(value.toLowerCase()) >= 0) {\r\n            return matchCase(value, value);\r\n        }\r\n\r\n        for (const word in irregular) {\r\n            const pattern: RegExp = new RegExp(`${word}$`, 'i');\r\n\r\n            if (pattern.test(value)) {\r\n                return matchCase(value.replace(pattern, (irregular[word] as string)), value);\r\n            }\r\n        }\r\n\r\n        for (const word in singular) {\r\n            const pattern: RegExp = new RegExp(word, 'i');\r\n\r\n            if (pattern.test(value)) {\r\n                return matchCase(value.replace(pattern, (singular[word] as string)), value);\r\n            }\r\n        }\r\n\r\n        return matchCase(value, value);\r\n    }\r\n\r\n    /**\r\n     * Generate a URL friendly \"slug\" from a given string.\r\n     *\r\n     * @param { string } title\r\n     * @param { string } separator\r\n     * @param { object } dictionary\r\n     *\r\n     * @return { string }\r\n     */\r\n    static slug(title: string, separator: string = '-', dictionary: { [key: string]: string } = { '@': 'at' }): string {\r\n        let flip: string = separator === '-' ? '_' : '-';\r\n\r\n        title = title.replace('![' + preg_quote(flip) + ']+!u', separator);\r\n\r\n        for (let value in dictionary) {\r\n            dictionary[value] = separator + dictionary[value] + separator;\r\n        }\r\n\r\n        for (let value in dictionary) {\r\n            title = title.replaceAll(value, (dictionary[value] as string));\r\n        }\r\n\r\n        title = this.lower(title).replace('![^' + preg_quote(separator) + 'pLpNs]+!u', '');\r\n\r\n        return title.replaceAll(/\\s/g, separator).replace(new RegExp('\\\\' + separator + '+', 'g'), separator);\r\n    }\r\n\r\n    /**\r\n     * Convert a string to snake case.\r\n     *\r\n     * @param { string } value\r\n     * @param { string } delimiter\r\n     *\r\n     * @return { string }\r\n     */\r\n    static snake(value: string, delimiter: string = '_'): string {\r\n        value = ucwords(value).replace(new RegExp(/\\s+/, 'u'), '');\r\n\r\n        value = this.lower(value.replace(new RegExp(/(.)(?=[A-Z])/, 'ug'), `$1${delimiter}`));\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Remove all whitespace from both ends of a string.\r\n     *\r\n     * @param { string } value\r\n     * @param { string | null } charlist\r\n     *\r\n     * @return { string }\r\n     */\r\n    static trim(value: string, charlist: string | null = null): string {\r\n        if (charlist === null) {\r\n            return value.trim();\r\n        }\r\n\r\n        if (charlist === '') {\r\n            return value;\r\n        }\r\n\r\n        if (charlist === ' ') {\r\n            return value.replaceAll(' ', '');\r\n        }\r\n\r\n        charlist = charlist.split('').join('|');\r\n\r\n        const regex: RegExp = new RegExp(`${charlist}+`, 'g');\r\n\r\n        return value.replace(regex, '') ?? value;\r\n    }\r\n\r\n    /**\r\n     * Remove all whitespace from the beginning of a string.\r\n     *\r\n     * @param { string } value\r\n     * @param { string | null } charlist\r\n     *\r\n     * @return { string }\r\n     */\r\n    static ltrim(value: string, charlist: string | null = null): string {\r\n        if (charlist === null) {\r\n            return value.trimStart();\r\n        }\r\n\r\n        if (charlist === '') {\r\n            return value;\r\n        }\r\n\r\n        if (charlist === ' ') {\r\n            return this.replaceStart(' ', '', value);\r\n        }\r\n\r\n        charlist.split('').forEach((chararacter: string) => value = this.replaceStart(chararacter, '', value));\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Remove all whitespace from the end of a string.\r\n     *\r\n     * @param { string } value\r\n     * @param { string | null } charlist\r\n     *\r\n     * @return { string }\r\n     */\r\n    static rtrim(value: string, charlist: string | null = null): string {\r\n        if (charlist === null) {\r\n            return value.trimEnd();\r\n        }\r\n\r\n        if (charlist === '') {\r\n            return value;\r\n        }\r\n\r\n        if (charlist === ' ') {\r\n            return this.replaceEnd(' ', '', value);\r\n        }\r\n\r\n        charlist.split('').forEach((chararacter: string) => value = this.replaceEnd(chararacter, '', value));\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Remove all \"extra\" blank space from the given string.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static squish(value: string): string {\r\n        return value.replace(/\\s\\s+/g, ' ').trim();\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string starts with a given substring.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string | array } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static startsWith(haystack: string, needles: string | string[]): boolean {\r\n        let result: boolean = false;\r\n\r\n        if (!(needles instanceof Array)) {\r\n            needles = [needles];\r\n        }\r\n\r\n        needles.forEach((needle: string) => {\r\n            if (needle !== '' && haystack.startsWith(needle)) {\r\n                result = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Convert a value to studly caps case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static studly(value: string): string {\r\n        const words: string[] = this.replace(['-', '_'], ' ', value).split(' ');\r\n\r\n        const studlyWords: string[] = words.map((word: string) => this.ucfirst(word));\r\n\r\n        return studlyWords.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert a value to Pascal case.\r\n     *\r\n     * @param { string } value\r\n     *\r\n     * @return { string }\r\n     */\r\n    static pascal(value: string): string {\r\n        return this.studly(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the portion of the string specified by the start and length parameters.\r\n     *\r\n     * @param { string } string\r\n     * @param { number } start\r\n     * @param { number | null } length\r\n     *\r\n     * @return { string }\r\n     */\r\n    static substr(string: string, start: number, length: number | null = null): string {\r\n        if (start < 0) {\r\n            start = string.length + start;\r\n\r\n            if (start < 0) {\r\n                start = 0;\r\n            }\r\n        }\r\n\r\n        if (length !== null && length < 0) {\r\n            return '';\r\n        }\r\n\r\n        if (length === 0 || length === null) {\r\n            return string.substring(start, length ?? string.length);\r\n        }\r\n\r\n        return string.substring(start, start + length);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of substring occurrences.\r\n     *\r\n     * @param { string } haystack\r\n     * @param { string } needle\r\n     * @param { number } offset\r\n     * @param { number | null } length\r\n     *\r\n     * @return { number }\r\n     */\r\n    static substrCount(haystack: string, needle: string, offset: number = 0, length: number | null = null): number {\r\n        if (length) {\r\n            return haystack.substring(offset).substring(0, length).split(needle).length - 1;\r\n        }\r\n\r\n        return haystack.substring(offset).split(needle).length - 1;\r\n    }\r\n\r\n    /**\r\n     * Replace text within a portion of a string.\r\n     *\r\n     * @param { string } string\r\n     * @param { string } replace\r\n     * @param { number } offset\r\n     * @param { number | null } length\r\n     *\r\n     * @return { string }\r\n     */\r\n    static substrReplace(string: string, replace: string, offset: number = 0, length: number | null = null): string {\r\n        if (length !== null) {\r\n            return string.substring(0, offset) + replace + string.substring(offset);\r\n        }\r\n\r\n        return string.substring(0, offset) + replace;\r\n    }\r\n\r\n    /**\r\n     * Swap multiple keywords in a string with other keywords.\r\n     *\r\n     * @param { object } map\r\n     * @param { string } subject\r\n     *\r\n     * @return { string }\r\n     */\r\n    static swap(map: { [key: string]: string }, subject: string): string {\r\n        for (const value in map) {\r\n            subject = subject.replace(value, (map[value] as string));\r\n        }\r\n\r\n        return subject;\r\n    }\r\n\r\n    /**\r\n     * Take the first or last {limit} characters of a string.\r\n     *\r\n     * @param { string } string\r\n     * @param { number } limit\r\n     *\r\n     * @return { string }\r\n     */\r\n    static take(string: string, limit: number): string {\r\n        if (limit < 0) {\r\n            return this.substr(string, limit);\r\n        }\r\n\r\n        return this.substr(string, 0, limit);\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to Base64 encoding.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { string }\r\n     */\r\n    static toBase64(string: string): string {\r\n        return btoa(string);\r\n    }\r\n\r\n    /**\r\n     * Decode the given Base64 encoded string.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { string }\r\n     */\r\n    static fromBase64(string: string): string {\r\n        return atob(string);\r\n    }\r\n\r\n    /**\r\n     * Make a string's first character lowercase.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { string }\r\n     */\r\n    static lcfirst(string: string): string {\r\n        return this.lower(this.substr(string, 0, 1)) + this.substr(string, 1, string.length);\r\n    }\r\n\r\n    /**\r\n     * Make a string's first character uppercase.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { string }\r\n     */\r\n    static ucfirst(string: string): string {\r\n        return this.upper(this.substr(string, 0, 1)) + this.substr(string, 1, string.length);\r\n    }\r\n\r\n    /**\r\n     * Split a string into pieces by uppercase characters.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { array }\r\n     */\r\n    static ucsplit(string: string): string[] {\r\n        return string.split(new RegExp(/(?=\\p{Lu})/u));\r\n    }\r\n\r\n    /**\r\n     * Get the number of words a string contains.\r\n     *\r\n     * @param { string } string\r\n     *\r\n     * @return { number }\r\n     */\r\n    static wordCount(string: string): number {\r\n        return string.split(/\\s+/).length;\r\n    }\r\n\r\n    /**\r\n     * Wrap a string to a given number of characters.\r\n     *\r\n     * @param { string } string\r\n     * @param { number } characters\r\n     * @param { string } breakStr\r\n     * @param { boolean } cutLongWords\r\n     *\r\n     * @returns { string }\r\n     */\r\n    static wordWrap(string: string, characters: number = 75, breakStr: string = '\\n', cutLongWords: boolean = false): string {\r\n        const breakWithSpace: string = cutLongWords ? breakStr + '\\u00ad' : breakStr;\r\n        const regex: RegExp = new RegExp(`.{1,${characters}}`, 'g');\r\n        const result: string = string.replace(regex, (substr: string) => substr.trim() + breakWithSpace);\r\n\r\n        return this.replaceLast(breakStr, '', result);\r\n    }\r\n\r\n    /**\r\n     * Generate a UUID (version 4).\r\n     *\r\n     * @return { string }\r\n     */\r\n    static uuid(): string {\r\n        let time: number = parseInt((Math.random() * Number.MAX_SAFE_INTEGER + 1).toString().substring(0, 13));\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (character: string): string {\r\n            let randomChar: number = (time + Math.random() * 16) % 16 | 0;\r\n            time = Math.floor(time / 16);\r\n\r\n            return (character === 'x' ? randomChar : (randomChar & 0x3 | 0x8)).toString(16);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generate a UUID (version 7).\r\n     *\r\n     * @return { string }\r\n     */\r\n    static uuid7(time: Date | null = null): string {\r\n        const values = new Uint32Array(3);\r\n\r\n        crypto.getRandomValues(values);\r\n\r\n        const timestamp: number = time ? time.getTime() : Date.now();\r\n\r\n        if (timestamp < 0 || timestamp > 281474976710655) {\r\n            throw new RangeError('Timestamp must be a 48-bit positive integer');\r\n        }\r\n\r\n        const [r1, r2, r3] = values;\r\n\r\n        const randomA: number = (r1 as number) & 0xfff;\r\n        const randomBHi: number = (r2 as number) & 0x3fffffff;\r\n        const randomBLo: number = r3 as number;\r\n\r\n        const bytes = new Uint8Array(16);\r\n\r\n        bytes[0] = timestamp / 2 ** 40;\r\n        bytes[1] = timestamp / 2 ** 32;\r\n        bytes[2] = timestamp / 2 ** 24;\r\n        bytes[3] = timestamp / 2 ** 16;\r\n        bytes[4] = timestamp / 2 ** 8;\r\n        bytes[5] = timestamp;\r\n        bytes[6] = 0x70 | (randomA >>> 8);\r\n        bytes[7] = randomA;\r\n        bytes[8] = 0x80 | (randomBHi >>> 24);\r\n        bytes[9] = randomBHi >>> 16;\r\n        bytes[10] = randomBHi >>> 8;\r\n        bytes[11] = randomBHi;\r\n        bytes[12] = randomBLo >>> 24;\r\n        bytes[13] = randomBLo >>> 16;\r\n        bytes[14] = randomBLo >>> 8;\r\n        bytes[15] = randomBLo;\r\n\r\n        const digits = '0123456789abcdef';\r\n\r\n        let result: string = '';\r\n\r\n        for (let i = 0; i < 16; i++) {\r\n            result += digits.charAt(bytes[i]! >>> 4);\r\n            result += digits.charAt(bytes[i]! & 0xf);\r\n\r\n            if (i === 3 || i === 5 || i === 7 || i === 9) {\r\n                result += '-';\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Generate a time-ordered UUID (version 4).\r\n     *\r\n     * @return { string }\r\n     */\r\n    static orderedUuid(): string {\r\n        let time: number = new Date().getTime();\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (character: string): string {\r\n            let randomChar: number = (time + Math.random() * 16) % 16 | 0;\r\n            time = Math.floor(time / 16);\r\n\r\n            return (character === 'x' ? randomChar : (randomChar & 0x3 | 0x8)).toString(16);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generate a ULID.\r\n     *\r\n     * @return { string }\r\n     */\r\n    static ulid(): string {\r\n        const encoding: string = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\r\n        const encodingLength: number = encoding.length;\r\n        const timeLength: number = 10;\r\n        const randomLength: number = 16;\r\n\r\n        /**\r\n         * Generate random Encoding Time.\r\n         *\r\n         * @return { string }\r\n         */\r\n        function generateEncodedTime(): string {\r\n            let encodedTime: string = '';\r\n            let now: number = new Date().getTime();\r\n\r\n            for (let length: number = timeLength; length > 0; length--) {\r\n                const mod: number = now % encodingLength;\r\n                encodedTime = encoding.charAt(mod) + encodedTime;\r\n                now = (now - mod) / encodingLength;\r\n            }\r\n\r\n            return encodedTime;\r\n        }\r\n\r\n        /**\r\n         * Generate random Number.\r\n         *\r\n         * @return { number }\r\n         */\r\n        function generateRandomNumber(): number {\r\n            const buffer: Uint8Array = new Uint8Array(1);\r\n\r\n            crypto.getRandomValues(buffer);\r\n\r\n            // @ts-ignore\r\n            return buffer[0] / 0xff;\r\n        }\r\n\r\n        /**\r\n         * Generate random String.\r\n         *\r\n         * @return { string }\r\n         */\r\n        function generateRandomString(): string {\r\n            let string: string = '';\r\n\r\n            for (let length: number = randomLength; length > 0; length--) {\r\n                let randomNumber: number = Math.floor(generateRandomNumber() * encodingLength);\r\n\r\n                if (randomNumber === encodingLength) {\r\n                    randomNumber = encodingLength - 1;\r\n                }\r\n\r\n                string += encoding.charAt(randomNumber);\r\n            }\r\n\r\n            return string;\r\n        }\r\n\r\n        return generateEncodedTime() + generateRandomString();\r\n    }\r\n}\r\n\r\nclass Stringable {\r\n    /**\r\n     * The underlying string value.\r\n     *\r\n     * @private\r\n     *\r\n     * @type { string }\r\n     */\r\n    #value: string;\r\n\r\n    /**\r\n     * Create a new instance of the class.\r\n     *\r\n     * @param { string } value\r\n     */\r\n    constructor(value: string = '') {\r\n        this.#value = value;\r\n    }\r\n\r\n    /**\r\n     * Return the remainder of a string after the first occurrence of a given value.\r\n     *\r\n     * @param { string } search\r\n     *\r\n     * @return { this }\r\n     */\r\n    after(search: string): Stringable {\r\n        return new Stringable(Str.after(this.#value, search));\r\n    }\r\n\r\n    /**\r\n     * Return the remainder of a string after the last occurrence of a given value.\r\n     *\r\n     * @param { string } search\r\n     *\r\n     * @return { this }\r\n     */\r\n    afterLast(search: string): Stringable {\r\n        return new Stringable(Str.afterLast(this.#value, search));\r\n    }\r\n\r\n    /**\r\n     * Append the given values to the string.\r\n     *\r\n     * @param { string | string[] } values\r\n     *\r\n     * @return { this }\r\n     */\r\n    append(...values: string[]): Stringable {\r\n        return new Stringable(this.#value + values.join(''));\r\n    }\r\n\r\n    /**\r\n     * Append a new line to the string.\r\n     *\r\n     * @param { number } count\r\n     *\r\n     * @return { this }\r\n     */\r\n    newLine(count: number = 1): Stringable {\r\n        return this.append('\\n'.repeat(count));\r\n    }\r\n\r\n    /**\r\n     * Transliterate a UTF-8 value to ASCII.\r\n     *\r\n     * @return { this }\r\n     */\r\n    ascii(): Stringable {\r\n        return new Stringable(Str.ascii(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Get the trailing name component of the path.\r\n     *\r\n     * @param { string } suffix\r\n     *\r\n     * @return { this }\r\n     */\r\n    basename(suffix: string = ''): Stringable {\r\n        let basename: string = this.#value;\r\n\r\n        if (this.#value.split('/')[0] !== this.#value) {\r\n            basename = (this.#value.split('/').pop() as string);\r\n        }\r\n\r\n        if (this.#value.split('\\\\')[0] !== this.#value) {\r\n            basename = (this.#value.split('\\\\').pop() as string);\r\n        }\r\n\r\n        if (suffix !== '') {\r\n            basename = basename.replace(suffix, '');\r\n        }\r\n\r\n        return new Stringable(basename);\r\n    }\r\n\r\n    /**\r\n     * Get the character at the specified index.\r\n     *\r\n     * @param { number } index\r\n     *\r\n     * @return { string | false }\r\n     */\r\n    charAt(index: number): string | false {\r\n        return Str.charAt(this.#value, index);\r\n    }\r\n\r\n    /**\r\n     * Remove the given string if it exists at the start of the current string.\r\n     *\r\n     * @param { string | string[] }  needle\r\n     *\r\n     * @return { this }\r\n     */\r\n    chopStart(needle: string | string[]): Stringable {\r\n        return new Stringable(Str.chopStart(this.#value, needle));\r\n    }\r\n\r\n    /**\r\n     * Remove the given string if it exists at the end of the current string.\r\n     *\r\n     * @param { string | string[] }  needle\r\n     *\r\n     * @return { this }\r\n     */\r\n    chopEnd(needle: string | string[]): Stringable {\r\n        return new Stringable(Str.chopEnd(this.#value, needle));\r\n    }\r\n\r\n    /**\r\n     * Get the basename of the class path.\r\n     *\r\n     * @return { this }\r\n     */\r\n    classBasename(): Stringable {\r\n        return this.basename();\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string before the first occurrence of a given value.\r\n     *\r\n     * @param { string } search\r\n     *\r\n     * @return { this }\r\n     */\r\n    before(search: string): Stringable {\r\n        return new Stringable(Str.before(this.#value, search));\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string before the last occurrence of a given value.\r\n     *\r\n     * @param { string } search\r\n     *\r\n     * @return { this }\r\n     */\r\n    beforeLast(search: string): Stringable {\r\n        return new Stringable(Str.beforeLast(this.#value, search));\r\n    }\r\n\r\n    /**\r\n     * Get the portion of a string between two given values.\r\n     *\r\n     * @param { string } from\r\n     * @param { string } to\r\n     *\r\n     * @return { this }\r\n     */\r\n    between(from: string, to: string): Stringable {\r\n        return new Stringable(Str.between(this.#value, from, to));\r\n    }\r\n\r\n    /**\r\n     * Get the smallest possible portion of a string between two given values.\r\n     *\r\n     * @param { string } from\r\n     * @param { string } to\r\n     *\r\n     * @return { this }\r\n     */\r\n    betweenFirst(from: string, to: string): Stringable {\r\n        return new Stringable(Str.betweenFirst(this.#value, from, to));\r\n    }\r\n\r\n    /**\r\n     * Convert a value to camel case.\r\n     *\r\n     * @return { this }\r\n     */\r\n    camel(): Stringable {\r\n        return new Stringable(Str.camel(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string contains a given substring.\r\n     *\r\n     * @param  { string | array } needles\r\n     * @param  { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    contains(needles: string | string[], ignoreCase: boolean = false): boolean {\r\n        return Str.contains(this.#value, needles, ignoreCase);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string contains all array values.\r\n     *\r\n     * @param { array } needles\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    containsAll(needles: string[], ignoreCase: boolean = false): boolean {\r\n        return Str.containsAll(this.#value, needles, ignoreCase);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string doesn't contain a given substring.\r\n     *\r\n     * @param  { string | array } needles\r\n     * @param  { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    doesntContain(needles: string | string[], ignoreCase: boolean = false): boolean {\r\n        return !this.contains(needles, ignoreCase);\r\n    }\r\n\r\n    /**\r\n     * Convert the case of a string.\r\n     *\r\n     * @param { Mode | number } mode\r\n     *\r\n     * @return { this }\r\n     */\r\n    convertCase(mode: Mode | number = Mode.MB_CASE_FOLD): Stringable {\r\n        return new Stringable(Str.convertCase(this.#value, mode));\r\n    }\r\n\r\n    /**\r\n     * Replace consecutive instances of a given character with a single character in the given string.\r\n     *\r\n     * @param { string | string[] } characters\r\n     *\r\n     * @return { string }\r\n     */\r\n    deduplicate(characters: string | string[] = ' '): Stringable {\r\n        return new Stringable(Str.deduplicate(this.#value, characters));\r\n    }\r\n\r\n    /**\r\n     * Get the parent directory's path.\r\n     *\r\n     * @param { number } levels\r\n     *\r\n     * @return { this }\r\n     */\r\n    dirname(levels: number = 1): Stringable {\r\n        let dirname: string = this.#value;\r\n        let parts: string[] = [];\r\n        let isValidDirname: boolean = false;\r\n        let hasValidLevels: boolean = false;\r\n\r\n        if (this.#value.split('/')[0] !== this.#value) {\r\n            parts = this.#value.split('/');\r\n            dirname = parts.slice(0, parts.length - levels).join('/');\r\n            isValidDirname = true;\r\n            hasValidLevels = parts.length <= levels + 1;\r\n        }\r\n\r\n        if (this.#value.split('\\\\')[0] !== this.#value) {\r\n            parts = this.#value.split('\\\\');\r\n            dirname = parts.slice(0, parts.length - levels).join('\\\\');\r\n            isValidDirname = true;\r\n            hasValidLevels = parts.length <= levels + 1;\r\n        }\r\n\r\n        if (!isValidDirname) {\r\n            dirname = '.';\r\n        }\r\n\r\n        if (isValidDirname && hasValidLevels) {\r\n            dirname = '\\\\';\r\n        }\r\n\r\n        return new Stringable(dirname);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string ends with a given substring.\r\n     *\r\n     * @param { string | array } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    endsWith(needles: string | string[]): boolean {\r\n        return Str.endsWith(this.#value, needles);\r\n    }\r\n\r\n    /**\r\n     * Determine if the string is an exact match with the given value.\r\n     *\r\n     * @param { Stringable|string } value\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    exactly(value: string | object): boolean {\r\n        if (value instanceof Stringable) {\r\n            value = value.toString();\r\n        }\r\n\r\n        return this.#value === value;\r\n    }\r\n\r\n    /**\r\n     * Extracts an excerpt from text that matches the first instance of a phrase.\r\n     *\r\n     * @param { string } phrase\r\n     * @param { object } options\r\n     *\r\n     * @return { string | null }\r\n     */\r\n    excerpt(phrase: string = '', options: ExcerptOptions = {}): string | null {\r\n        return Str.excerpt(this.#value, phrase, options);\r\n    }\r\n\r\n    /**\r\n     * Explode the string into an array.\r\n     *\r\n     * @param { string } delimiter\r\n     * @param { number } limit\r\n     *\r\n     * @return { array }\r\n     */\r\n    explode(delimiter: string, limit: number = 0): string[] {\r\n        let wordsArray: string[] = this.#value.split(delimiter);\r\n\r\n        const position: number = limit - 1 >= wordsArray.length\r\n            ? wordsArray.length - 1\r\n            : limit - 1;\r\n\r\n        wordsArray = [...wordsArray.slice(0, position), wordsArray.splice(position).join(' ')];\r\n\r\n        return wordsArray;\r\n    }\r\n\r\n    /**\r\n     * Split a string using a regular expression or by length.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { number } limit\r\n     *\r\n     * @return { array }\r\n     */\r\n    split(pattern: string, limit: number = -1): string[] {\r\n        const body: string = RegExpString.make(/^\\/(.*)\\/\\w*$/, pattern);\r\n        const flags: string = RegExpString.make(/^\\/.*\\/(\\w*)$/, pattern);\r\n        const expression: RegExp = new RegExp(body, flags + (flags.indexOf('g') !== -1 ? '' : 'g'));\r\n\r\n        let segments: string[] = this.#value.split(expression);\r\n\r\n        if (limit !== -1) {\r\n            const position: number = limit - 1 >= segments.length\r\n                ? segments.length - 1\r\n                : limit - 1;\r\n\r\n            segments = [...segments.slice(0, position), segments.splice(position).join('')];\r\n        }\r\n\r\n        return segments.map((segment: string) => segment.trim()) ?? [];\r\n    }\r\n\r\n    /**\r\n     * Cap a string with a single instance of a given value.\r\n     *\r\n     * @param { string } cap\r\n     *\r\n     * @return { this }\r\n     */\r\n    finish(cap: string): Stringable {\r\n        return new Stringable(Str.finish(this.#value, cap));\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string matches a given pattern.\r\n     *\r\n     * @param { string | array } pattern\r\n     * @param { boolean } ignoreCase\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    is(pattern: string | string[], ignoreCase: boolean = false): boolean {\r\n        return Str.is(pattern, this.#value, ignoreCase);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is 7-bit ASCII.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isAscii(): boolean {\r\n        return Str.isAscii(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is valid JSON.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isJson(): boolean {\r\n        return Str.isJson(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given value is a valid URL.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isUrl(): boolean {\r\n        return Str.isUrl(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is a valid UUID.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isUuid(): boolean {\r\n        return Str.isUuid(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string is a valid ULID.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isUlid(): boolean {\r\n        return Str.isUlid(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if the given string is empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isEmpty(): boolean {\r\n        return this.#value.trim() === '';\r\n    }\r\n\r\n    /**\r\n     * Determine if the given string is not empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isNotEmpty(): boolean {\r\n        return !this.isEmpty();\r\n    }\r\n\r\n    /**\r\n     * Convert a string to kebab case.\r\n     *\r\n     * @return { this }\r\n     */\r\n    kebab(): Stringable {\r\n        return new Stringable(Str.kebab(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Return the length of the given string.\r\n     *\r\n     * @return { number }\r\n     */\r\n    length(): number {\r\n        return Str.length(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Limit the number of characters in a string.\r\n     *\r\n     * @param { number } limit\r\n     * @param { string } end\r\n     * @param { boolean } preserveWords\r\n     *\r\n     * @return { this }\r\n     */\r\n    limit(limit: number = 100, end: string = '...', preserveWords: boolean = false): Stringable {\r\n        return new Stringable(Str.limit(this.#value, limit, end, preserveWords));\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to lower-case.\r\n     *\r\n     * @return { this }\r\n     */\r\n    lower(): Stringable {\r\n        return new Stringable(Str.lower(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Masks a portion of a string with a repeated character.\r\n     *\r\n     * @param { string } character\r\n     * @param { number } index\r\n     * @param { number | null }length\r\n     *\r\n     * @return { this }\r\n     */\r\n    mask(character: string, index: number, length: number | null = null): Stringable {\r\n        return new Stringable(Str.mask(this.#value, character, index, length));\r\n    }\r\n\r\n    /**\r\n     * Get the string matching the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     *\r\n     * @return { this }\r\n     */\r\n    match(pattern: string): Stringable {\r\n        return new Stringable(Str.match(pattern, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string matches a given pattern.\r\n     *\r\n     * @param { string | string[] } pattern\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isMatch(...pattern: string[]): boolean {\r\n        return Str.isMatch(pattern, this.#value);\r\n    }\r\n\r\n    /**\r\n     * Get the string matching the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     *\r\n     * @return { array }\r\n     */\r\n    matchAll(pattern: string): string[] {\r\n        return Str.matchAll(pattern, this.#value);\r\n    }\r\n\r\n    /**\r\n     * Determine if the string matches the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    test(pattern: string): boolean {\r\n        return this.match(pattern).isNotEmpty();\r\n    }\r\n\r\n    /**\r\n     * Remove all non-numeric characters from a string.\r\n     *\r\n     * @return { this }\r\n     */\r\n    numbers(): Stringable {\r\n        return new Stringable(Str.numbers(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Pad both sides of the string with another.\r\n     *\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { this }\r\n     */\r\n    padBoth(length: number, pad: string = ' '): Stringable {\r\n        return new Stringable(Str.padBoth(this.#value, length, pad));\r\n    }\r\n\r\n    /**\r\n     * Pad the left side of the string with another.\r\n     *\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { this }\r\n     */\r\n    padLeft(length: number, pad: string = ' '): Stringable {\r\n        return new Stringable(Str.padLeft(this.#value, length, pad));\r\n    }\r\n\r\n    /**\r\n     * Pad the right side of the string with another.\r\n     *\r\n     * @param { number } length\r\n     * @param { string } pad\r\n     *\r\n     * @return { this }\r\n     */\r\n    padRight(length: number, pad: string = ' '): Stringable {\r\n        return new Stringable(Str.padRight(this.#value, length, pad));\r\n    }\r\n\r\n    /**\r\n     * Call the given callback and return a new string.\r\n     *\r\n     * @param { string | function } callback\r\n     *\r\n     * @return { this }\r\n     */\r\n    pipe(callback: string | Function): Stringable {\r\n        // @ts-ignore\r\n        if (this.#value[callback] instanceof Function) {\r\n            // @ts-ignore\r\n            return new Stringable(this.#value[callback]());\r\n        }\r\n\r\n        // @ts-ignore\r\n        if (window[callback] instanceof Function) {\r\n            // @ts-ignore\r\n            return new Stringable(window[callback](this.#value));\r\n        }\r\n\r\n        // @ts-ignore\r\n        return new Stringable(callback(this).toString());\r\n    }\r\n\r\n    /**\r\n     * Get the plural form of an English word.\r\n     *\r\n     * @param { number } count\r\n     *\r\n     * @return { this }\r\n     */\r\n    plural(count: number = 2): Stringable {\r\n        return new Stringable(Str.plural(this.#value, count));\r\n    }\r\n\r\n    /**\r\n     * Pluralize the last word of an English, studly caps case string.\r\n     *\r\n     * @param { number } count\r\n     *\r\n     * @return { this }\r\n     */\r\n    pluralStudly(count: number = 2): Stringable {\r\n        return new Stringable(Str.pluralStudly(this.#value, count));\r\n    }\r\n\r\n    /**\r\n     * Pluralize the last word of an English, Pascal case string.\r\n     *\r\n     * @param { number } count\r\n     *\r\n     * @return { this }\r\n     */\r\n    pluralPascal(count: number = 2): Stringable {\r\n        return new Stringable(Str.pluralPascal(this.#value, count));\r\n    }\r\n\r\n    /**\r\n     * Find the multibyte safe position of the first occurrence of the given substring.\r\n     *\r\n     * @param { string } needle\r\n     * @param { number } offset\r\n     *\r\n     * @return { number | false }\r\n     */\r\n    position(needle: string, offset: number = 0): number | false {\r\n        return Str.position(this.#value, needle, offset);\r\n    }\r\n\r\n    /**\r\n     * Prepend the given values to the string.\r\n     *\r\n     * @param { string | string[] } values\r\n     *\r\n     * @return { this }\r\n     */\r\n    prepend(...values: string[]): Stringable {\r\n        return new Stringable(values.join('') + this.#value);\r\n    }\r\n\r\n    /**\r\n     * Remove any occurrence of the given string in the subject.\r\n     *\r\n     * @param { string } search\r\n     * @param { boolean } caseSensitive\r\n     *\r\n     * @return { this }\r\n     */\r\n    remove(search: string, caseSensitive: boolean = true): Stringable {\r\n        return new Stringable(Str.remove(search, this.#value, caseSensitive));\r\n    }\r\n\r\n    /**\r\n     * Reverse the string.\r\n     *\r\n     * @return { this }\r\n     */\r\n    reverse(): Stringable {\r\n        return new Stringable(Str.reverse(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Repeat the string.\r\n     *\r\n     * @param { number } times\r\n     *\r\n     * @return { this }\r\n     */\r\n    repeat(times: number): Stringable {\r\n        return new Stringable(Str.repeat(this.#value, times));\r\n    }\r\n\r\n    /**\r\n     * Replace the given value in the given string.\r\n     *\r\n     * @param { string | array } search\r\n     * @param { string } replace\r\n     * @param { boolean } caseSensitive\r\n     *\r\n     * @return { this }\r\n     */\r\n    replace(search: string | string[], replace: string, caseSensitive: boolean = true): Stringable {\r\n        return new Stringable(Str.replace(search, replace, this.#value, caseSensitive));\r\n    }\r\n\r\n    /**\r\n     * Replace a given value in the string sequentially with an array.\r\n     *\r\n     * @param { string } search\r\n     * @param { array } replace\r\n     *\r\n     * @return { this }\r\n     */\r\n    replaceArray(search: string, replace: string[]): Stringable {\r\n        return new Stringable(Str.replaceArray(search, replace, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Replace the first occurrence of a given value in the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     *\r\n     * @return { this }\r\n     */\r\n    replaceFirst(search: string, replace: string): Stringable {\r\n        return new Stringable(Str.replaceFirst(search, replace, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Replace the first occurrence of the given value if it appears at the start of the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     *\r\n     * @return { this }\r\n     */\r\n    replaceStart(search: string, replace: string): Stringable {\r\n        return new Stringable(Str.replaceStart(search, replace, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Replace the last occurrence of a given value in the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     *\r\n     * @return { this }\r\n     */\r\n    replaceLast(search: string, replace: string): Stringable {\r\n        return new Stringable(Str.replaceLast(search, replace, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Replace the last occurrence of a given value if it appears at the end of the string.\r\n     *\r\n     * @param { string } search\r\n     * @param { string } replace\r\n     *\r\n     * @return { this }\r\n     */\r\n    replaceEnd(search: string, replace: string): Stringable {\r\n        return new Stringable(Str.replaceEnd(search, replace, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Replace the patterns matching the given regular expression.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { string | function } replace\r\n     *\r\n     * @return { this }\r\n     */\r\n    replaceMatches(pattern: string, replace: string | Function): Stringable {\r\n        const body: string = RegExpString.make(/^\\/(.*)\\/\\w*$/, pattern);\r\n        const flags: string = RegExpString.make(/^\\/.*\\/(\\w*)$/, pattern);\r\n        const expression: RegExp = new RegExp(body, flags + (flags.indexOf('g') !== -1 ? '' : 'g'));\r\n\r\n        if (replace instanceof Function) {\r\n            // @ts-ignore\r\n            this.#value.replace(expression, (matched) => matched);\r\n        }\r\n\r\n        return new Stringable(this.#value.replace(expression, (replace as string)));\r\n    }\r\n\r\n    /**\r\n     * Remove all \"extra\" blank space from the given string.\r\n     *\r\n     * @return { this }\r\n     */\r\n    squish(): Stringable {\r\n        return new Stringable(Str.squish(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Begin a string with a single instance of a given value.\r\n     *\r\n     * @param { string } prefix\r\n     *\r\n     * @return { this }\r\n     */\r\n    start(prefix: string): Stringable {\r\n        return new Stringable(Str.start(this.#value, prefix));\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to upper-case.\r\n     *\r\n     * @return { this }\r\n     */\r\n    upper(): Stringable {\r\n        return new Stringable(Str.upper(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to title case.\r\n     *\r\n     * @return { this }\r\n     */\r\n    title(): Stringable {\r\n        return new Stringable(Str.title(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to title case for each word.\r\n     *\r\n     * @return { this }\r\n     */\r\n    headline(): Stringable {\r\n        return new Stringable(Str.headline(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Convert the given string to APA-style title case.\r\n     *\r\n     * @see https://apastyle.apa.org/style-grammar-guidelines/capitalization/title-case\r\n     *\r\n     * @return { this }\r\n     */\r\n    apa(): Stringable {\r\n        return new Stringable(Str.apa(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Get the singular form of an English word.\r\n     *\r\n     * @return { this }\r\n     */\r\n    singular(): Stringable {\r\n        return new Stringable(Str.singular(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Generate a URL friendly \"slug\" from a given string.\r\n     *\r\n     * @param { string } separator\r\n     * @param { object } dictionary\r\n     *\r\n     * @return { this }\r\n     */\r\n    slug(separator: string = '-', dictionary: { [key: string]: string } = { '@': 'at' }): Stringable {\r\n        return new Stringable(Str.slug(this.#value, separator, dictionary));\r\n    }\r\n\r\n    /**\r\n     * Convert a string to snake case.\r\n     *\r\n     * @param { string } delimiter\r\n     *\r\n     * @return { this }\r\n     */\r\n    snake(delimiter: string = '_'): Stringable {\r\n        return new Stringable(Str.snake(this.#value, delimiter));\r\n    }\r\n\r\n    /**\r\n     * Determine if a given string starts with a given substring.\r\n     *\r\n     * @param { string | array } needles\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    startsWith(needles: string | string[]): boolean {\r\n        return Str.startsWith(this.#value, needles);\r\n    }\r\n\r\n    /**\r\n     * Convert a value to studly caps case.\r\n     *\r\n     * @return { this }\r\n     */\r\n    studly(): Stringable {\r\n        return new Stringable(Str.studly(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Convert a value to Pascal case.\r\n     *\r\n     * @return { this }\r\n     */\r\n    pascal(): Stringable {\r\n        return new Stringable(Str.pascal(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Returns the portion of the string specified by the start and length parameters.\r\n     *\r\n     * @param { number } start\r\n     * @param { number | null } length\r\n     *\r\n     * @return { this }\r\n     */\r\n    substr(start: number, length: number | null = null): Stringable {\r\n        return new Stringable(Str.substr(this.#value, start, length));\r\n    }\r\n\r\n    /**\r\n     * Returns the number of substring occurrences.\r\n     *\r\n     * @param { string } needle\r\n     * @param { number } offset\r\n     * @param { number | null } length\r\n     *\r\n     * @return { number }\r\n     */\r\n    substrCount(needle: string, offset: number = 0, length: number | null = null): number {\r\n        return Str.substrCount(this.#value, needle, offset, length);\r\n    }\r\n\r\n    /**\r\n     * Replace text within a portion of a string.\r\n     *\r\n     * @param { string } replace\r\n     * @param { number } offset\r\n     * @param { number | null } length\r\n     *\r\n     * @return { this }\r\n     */\r\n    substrReplace(replace: string, offset: number = 0, length: number | null = null): Stringable {\r\n        return new Stringable(Str.substrReplace(this.#value, replace, offset, length));\r\n    }\r\n\r\n    /**\r\n     * Swap multiple keywords in a string with other keywords.\r\n     *\r\n     * @param { object } map\r\n     *\r\n     * @return { this }\r\n     */\r\n    swap(map: { [key: string]: string }): Stringable {\r\n        return new Stringable(Str.swap(map, this.#value));\r\n    }\r\n\r\n    /**\r\n     * Take the first or last {limit} characters.\r\n     *\r\n     * @param { number } limit\r\n     *\r\n     * @return { this }\r\n     */\r\n    take(limit: number): Stringable {\r\n        if (limit < 0) {\r\n            return this.substr(limit);\r\n        }\r\n\r\n        return this.substr(0, limit);\r\n    }\r\n\r\n    /**\r\n     * Call the given Closure with this instance then return the instance.\r\n     *\r\n     * @param { Function } callback\r\n     *\r\n     * @return { this }\r\n     */\r\n    tap(callback: Function): this {\r\n        callback(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Trim the string of the given characters.\r\n     *\r\n     * @param { string | string[]|null } characters\r\n     *\r\n     * @return { this }\r\n     */\r\n    trim(characters: CharacterType = null): Stringable {\r\n        let characterArray = characters instanceof Array\r\n            ? characters\r\n            : [...arguments];\r\n\r\n        characters = characterArray.filter(char => char.match('[^A-Za-z0-9_]') !== null);\r\n\r\n        characters.forEach(term => this.#value = this.#value.replaceAll(term, ''));\r\n\r\n        return new Stringable(this.#value.trim());\r\n    }\r\n\r\n    /**\r\n     * Left trim the string of the given characters.\r\n     *\r\n     * @param { string | string[]|null } characters\r\n     *\r\n     * @return { this }\r\n     */\r\n    ltrim(characters: CharacterType = null): Stringable {\r\n        let characterArray = characters instanceof Array\r\n            ? characters\r\n            : [...arguments];\r\n\r\n        characters = characterArray.filter(char => char.match('[^A-Za-z0-9_]') !== null);\r\n\r\n        characters.forEach(term => this.#value = Str.replaceFirst(term, '', this.#value));\r\n\r\n        return new Stringable(this.#value.trimStart());\r\n    }\r\n\r\n    /**\r\n     * Right trim the string of the given characters.\r\n     *\r\n     * @param { string | string[]|null } characters\r\n     *\r\n     * @return { this }\r\n     */\r\n    rtrim(characters: CharacterType = null): Stringable {\r\n        let characterArray = characters instanceof Array\r\n            ? characters\r\n            : [...arguments];\r\n\r\n        characters = characterArray.filter(char => char.match('[^A-Za-z0-9_]') !== null);\r\n\r\n        characters.forEach(term => this.#value = Str.replaceLast(term, '', this.#value));\r\n\r\n        return new Stringable(this.#value.trimEnd());\r\n    }\r\n\r\n    /**\r\n     * Make a string's first character lowercase.\r\n     *\r\n     * @return { this }\r\n     */\r\n    lcfirst(): Stringable {\r\n        return new Stringable(Str.lcfirst(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Make a string's first character uppercase.\r\n     *\r\n     * @return { this }\r\n     */\r\n    ucfirst(): Stringable {\r\n        return new Stringable(Str.ucfirst(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Split a string by uppercase characters.\r\n     *\r\n     * @return { array }\r\n     */\r\n    ucsplit(): string[] {\r\n        return Str.ucsplit(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Apply the callback if the given \"value\" is (or resolves to) truthy.\r\n     *\r\n     * @param { boolean|Function } value\r\n     * @param { Function } callback\r\n     * @param { Function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    when(value: boolean | Function, callback: Function, fallback: Function | null = null): this {\r\n        value = value instanceof Function ? value(this) : value;\r\n\r\n        if (value) {\r\n            return callback(this, value) ?? this;\r\n        } else if (fallback) {\r\n            return fallback(this, value) ?? this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Apply the callback if the given \"value\" is (or resolves to) falsy.\r\n     *\r\n     *\r\n     * @param { boolean|Function } value\r\n     * @param { Function } callback\r\n     * @param { Function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    unless(value: boolean | Function, callback: Function, fallback: Function | null = null): this {\r\n        value = value instanceof Function ? value(this) : value;\r\n\r\n        if (!value) {\r\n            return callback(this, value) ?? this;\r\n        } else if (fallback) {\r\n            return fallback(this, value) ?? this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string contains a given substring.\r\n     *\r\n     * @param { string | array } needles\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenContains(needles: string | string[], callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.contains(needles), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string contains all array values.\r\n     *\r\n     * @param { array } needles\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenContainsAll(needles: string[], callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.containsAll(needles), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is empty.\r\n     *\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenEmpty(callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.isEmpty(), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is not empty.\r\n     *\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenNotEmpty(callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.isNotEmpty(), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string ends with a given substring.\r\n     *\r\n     * @param { string | array } needles\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenEndsWith(needles: string | string[], callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.endsWith(needles), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is an exact match with the given value.\r\n     *\r\n     * @param { string } value\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenExactly(value: string, callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.exactly(value), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is not an exact match with the given value.\r\n     *\r\n     * @param { string } value\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenNotExactly(value: string, callback: Function, fallback: Function | null = null): this {\r\n        return this.when(!this.exactly(value), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string matches a given pattern.\r\n     *\r\n     * @param { string | array } pattern\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenIs(pattern: string | string[], callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.is(pattern), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is 7-bit ASCII.\r\n     *\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenIsAscii(callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.isAscii(), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is a valid UUID.\r\n     *\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenIsUuid(callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.isUuid(), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string is a valid ULID.\r\n     *\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenIsUlid(callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.isUlid(), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string starts with a given substring.\r\n     *\r\n     * @param { string | array } needles\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenStartsWith(needles: string | string[], callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.startsWith(needles), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Execute the given callback if the string matches the given pattern.\r\n     *\r\n     * @param { string } pattern\r\n     * @param { function } callback\r\n     * @param { function|null } fallback\r\n     *\r\n     * @return { this }\r\n     */\r\n    whenTest(pattern: string, callback: Function, fallback: Function | null = null): this {\r\n        return this.when(this.test(pattern), callback, fallback);\r\n    }\r\n\r\n    /**\r\n     * Limit the number of words in a string.\r\n     *\r\n     * @param { number } words\r\n     * @param { string } end\r\n     *\r\n     * @return { this }\r\n     */\r\n    words(words: number = 100, end: string = '...'): Stringable {\r\n        return new Stringable(Str.words(this.#value, words, end));\r\n    }\r\n\r\n    /**\r\n     * Get the number of words a string contains.\r\n     *\r\n     * @return { number }\r\n     */\r\n    wordCount(): number {\r\n        return Str.wordCount(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Wrap a string to a given number of characters.\r\n     *\r\n     * @param { number } characters\r\n     * @param { string } breakStr\r\n     * @param { boolean } cutLongWords\r\n     *\r\n     * @returns { this }\r\n     */\r\n    wordWrap(characters: number = 75, breakStr: string = '\\n', cutLongWords: boolean = false): Stringable {\r\n        return new Stringable(Str.wordWrap(this.#value, characters, breakStr, cutLongWords));\r\n    }\r\n\r\n    /**\r\n     * Wrap the string with the given strings.\r\n     *\r\n     * @param { string } before\r\n     * @param { string | null } after\r\n     *\r\n     * @return { this }\r\n     */\r\n    wrap(before: string, after: string | null = null): Stringable {\r\n        return new Stringable(Str.wrap(this.#value, before, after));\r\n    }\r\n\r\n    /**\r\n     * Unwrap the string with the given strings.\r\n     *\r\n     * @param { string } before\r\n     * @param { string | null } after\r\n     *\r\n     * @return { this }\r\n     */\r\n    unwrap(before: string, after: string | null = null): Stringable {\r\n        return new Stringable(Str.unwrap(this.#value, before, after));\r\n    }\r\n\r\n    /**\r\n     * Convert the string into a `HtmlString` instance.\r\n     *\r\n     * @return { HTMLElement | Node | string }\r\n     */\r\n    toHtmlString(): HtmlStringType {\r\n        return new HtmlString(this.#value).toHtml();\r\n    }\r\n\r\n    /**\r\n     * Convert the string to Base64 encoding.\r\n     *\r\n     * @return { this }\r\n     */\r\n    toBase64(): Stringable {\r\n        return new Stringable(Str.toBase64(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Decode the Base64 encoded string.\r\n     *\r\n     * @return { this }\r\n     */\r\n    fromBase64(): Stringable {\r\n        return new Stringable(Str.fromBase64(this.#value));\r\n    }\r\n\r\n    /**\r\n     * Dump the string.\r\n     *\r\n     * @return { void }\r\n     */\r\n    dump(): void {\r\n        console.log(this.#value);\r\n    }\r\n\r\n    /**\r\n     * Dump the string and end the script.\r\n     *\r\n     * @return { void }\r\n     */\r\n    dd(): void {\r\n        this.dump();\r\n\r\n        throw new Error('dd()');\r\n    }\r\n\r\n    /**\r\n     * Get the underlying string value.\r\n     *\r\n     * @return { string }\r\n     */\r\n    value(): string {\r\n        return this.toString();\r\n    }\r\n\r\n    /**\r\n     * Get the raw string value.\r\n     *\r\n     * @return { string }\r\n     */\r\n    toString(): string {\r\n        return this.#value;\r\n    }\r\n\r\n    /**\r\n     * Get the underlying string value as an integer.\r\n     *\r\n     * @param { number } base\r\n     *\r\n     * @return { number }\r\n     */\r\n    toInteger(base: number = 10): number {\r\n        const value: number = parseInt(this.#value, base);\r\n\r\n        return isNaN(value) || !isFinite(value) ? 0 : value;\r\n    }\r\n\r\n    /**\r\n     * Get the underlying string value as a float.\r\n     *\r\n     * @return { number }\r\n     */\r\n    toFloat(): number {\r\n        return !isNaN(parseFloat(this.#value)) ? parseFloat(this.#value) : 0;\r\n    }\r\n\r\n    /**\r\n     * Get the underlying string value as a boolean.\r\n     *\r\n     * Returns true when value is \"1\", \"true\", \"on\", and \"yes\". Otherwise, returns false.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    toBoolean(): boolean {\r\n        switch (this.#value) {\r\n            case '1':\r\n            case 'true':\r\n            case 'on':\r\n            case 'yes':\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the underlying string value as a formatted Date string.\r\n     *\r\n     * @param { string | null } format\r\n     * @param { string | null } tz\r\n     */\r\n    toDate(format: string | null = null, tz: string | null = null): string {\r\n        if (new Date(this.#value).toString() === 'Invalid Date') {\r\n            return 'Invalid Date';\r\n        }\r\n\r\n        if (format === null) {\r\n            return new Date(this.#value).toLocaleDateString('en-us', {\r\n                year    : 'numeric',\r\n                month   : 'numeric',\r\n                day     : 'numeric',\r\n                hour    : 'numeric',\r\n                minute  : 'numeric',\r\n                second  : 'numeric',\r\n                hour12  : false,\r\n                timeZone: tz ?? undefined,\r\n            });\r\n        }\r\n\r\n        let date: string = '';\r\n\r\n        const now: Date = new Date(new Date(this.#value).toLocaleString('en-US', {\r\n            year                  : 'numeric',\r\n            month                 : 'numeric',\r\n            day                   : 'numeric',\r\n            hour                  : 'numeric',\r\n            minute                : 'numeric',\r\n            second                : 'numeric',\r\n            fractionalSecondDigits: 3,\r\n            hour12                : false,\r\n            timeZone              : tz ?? undefined,\r\n        }));\r\n\r\n        const month: number = now.getMonth();\r\n        const dayOfTheWeek: number = now.getDay();\r\n        const dayOfTheMonth: number = now.getDate();\r\n        const year: number = now.getFullYear();\r\n        const hours: number = now.getHours();\r\n        const minutes: number = now.getMinutes();\r\n        const seconds: number = now.getSeconds();\r\n        const milliseconds: number = now.getMilliseconds();\r\n\r\n        const elements: RegExpMatchArray | null = format.match(/\\\\?.|./g);\r\n\r\n        for (const element of elements!) {\r\n            switch (element) {\r\n                // Day of the month, 2 digits with leading zeros (e.g., 01 to 31)\r\n                case 'd':\r\n                    date += Str.padLeft(dayOfTheMonth.toString(), 2, '0');\r\n\r\n                    break;\r\n\r\n                // A textual representation of a day, three letters (e.g., Mon through Sun)\r\n                case 'D':\r\n                    date += now.toLocaleString('en-US', { weekday: 'short' });\r\n\r\n                    break;\r\n\r\n                // Day of the month without leading zeros (e.g., 1 to 31)\r\n                case 'j':\r\n                    date += dayOfTheMonth;\r\n\r\n                    break;\r\n\r\n                // A full textual representation of the day of the week (e.g., Sunday through Saturday)\r\n                case 'l':\r\n                    date += now.toLocaleString('en-US', { weekday: 'long' });\r\n\r\n                    break;\r\n\r\n                // ISO 8601 numeric representation of the day of the week (e.g., 1 (for Monday) through 7 (for Sunday))\r\n                case 'N':\r\n                    date += dayOfTheWeek !== 0 ? dayOfTheWeek : 0;\r\n\r\n                    break;\r\n\r\n                // English ordinal suffix for the day of the month, 2 characters (e.g., st, nd, rd or th)\r\n                case 'S': {\r\n                    let suffix: { [key: number]: string } = {\r\n                        1 : 'st',\r\n                        2 : 'nd',\r\n                        3 : 'rd',\r\n                        21: 'st',\r\n                        22: 'nd',\r\n                        23: 'rd',\r\n                        31: 'st'\r\n                    };\r\n                    date += suffix[dayOfTheMonth] ?? 'th';\r\n\r\n                    break;\r\n                }\r\n                // Numeric representation of the day of the week (e.g., 0 (for Sunday) through 6 (for Saturday))\r\n                case 'w':\r\n                    date += dayOfTheWeek;\r\n\r\n                    break;\r\n\r\n                // Numeric representation of the day of the week (e.g., The day of the year (starting from 0))\r\n                case 'z': {\r\n                    let start: Date = new Date(year, 0, 0);\r\n                    let diff: number = ((now as unknown as number) - (start as unknown as number)) + ((start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000);\r\n                    let day: number = 86400000;\r\n                    const currentDay: number = Math.floor(diff / day);\r\n\r\n                    date += currentDay;\r\n\r\n                    break;\r\n                }\r\n                // ISO 8601 week number of year, weeks starting on Monday (e.g., 42 (the 42nd week in the year))\r\n                case 'W': {\r\n                    let parsedDate: Date = new Date(Date.UTC(year, month, dayOfTheMonth));\r\n                    let weekDay: number = parsedDate.getUTCDay() || 7;\r\n\r\n                    parsedDate.setUTCDate(parsedDate.getUTCDate() + 4 - weekDay);\r\n\r\n                    let yearStart: Date = new Date(Date.UTC(parsedDate.getUTCFullYear(), 0, 1));\r\n                    let weekNumber: number = Math.ceil(((((parsedDate as unknown as number) - (yearStart as unknown as number)) / 86400000) + 1) / 7);\r\n\r\n                    date += Str.padLeft((weekNumber.toString()), 2, '0');\r\n\r\n                    break;\r\n                }\r\n                // A full textual representation of a month, such as January or March (e.g., January through December)\r\n                case 'F':\r\n                    date += now.toLocaleString('en-US', { month: 'long' });\r\n\r\n                    break;\r\n\r\n                // Numeric representation of a month, with leading zeros (e.g., 01 through 12)\r\n                case 'm': {\r\n                    const currentMonth: number = month + 1;\r\n\r\n                    date += Str.padLeft(currentMonth.toString(), 2, '0');\r\n\r\n                    break;\r\n                }\r\n                // A short textual representation of a month, three letters (e.g., Jan through Dec)\r\n                case 'M':\r\n                    date += now.toLocaleString('en-US', { month: 'short' });\r\n\r\n                    break;\r\n\r\n                // Numeric representation of a month, without leading zeros (e.g., 1 through 12)\r\n                case 'n':\r\n                    date += month + 1;\r\n\r\n                    break;\r\n\r\n                // Number of days in the given month (e.g., 28 through 31)\r\n                case 't':\r\n                    date += new Date(year, month + 1, 0).getDate();\r\n\r\n                    break;\r\n\r\n                // Whether it's a leap year (e.g., 1 if it is a leap year, 0 otherwise)\r\n                case 'L':\r\n                    date += new Date(year, 1, 29).getMonth() === 1 ? '1' : '0';\r\n\r\n                    break;\r\n\r\n                // ISO 8601 week-numbering year. This has the same value as Y,\r\n                // except that if the ISO week number (W) belongs to the previous or next year,\r\n                // that year is used instead. (e.g., 1999 or 2003)\r\n                case 'o':\r\n                    date += now.toISOString().substring(0, 4);\r\n\r\n                    break;\r\n\r\n                // An expanded full numeric representation of a year, at least 4 digits, with - for years BCE, and + for years CE. (e.g., -0055, +0787, +1999, +10191)\r\n                case 'X':\r\n                    date += year < 0 ? '-' + year : '+' + year;\r\n\r\n                    break;\r\n\r\n                // An expanded full numeric representation if required,\r\n                // or a standard full numeral representation if possible (like Y).\r\n                // At least four digits. Years BCE are prefixed with a -.\r\n                // Years beyond (and including) 10000 are prefixed by a +. (e.g., -0055, 0787, 1999, +10191)\r\n                case 'x':\r\n                    date += year < 10000 ? year : '-' + year;\r\n\r\n                    break;\r\n\r\n                // A full numeric representation of a year, at least 4 digits, with - for years BCE. (e.g., -0055, 0787, 1999, 2003, 10191)\r\n                case 'Y':\r\n                    date += year;\r\n\r\n                    break;\r\n\r\n                // A two-digit representation of a year (e.g., 99 or 03)\r\n                case 'y':\r\n                    date += year.toString().substring(2);\r\n\r\n                    break;\r\n\r\n                // Lowercase Ante meridiem and Post meridiem (e.g., am or pm)\r\n                case 'a':\r\n                    date += hours < 12 ? 'am' : 'pm';\r\n\r\n                    break;\r\n\r\n                // Uppercase Ante meridiem and Post meridiem (e.g., AM or PM)\r\n                case 'A':\r\n                    date += hours < 12 ? 'AM' : 'PM';\r\n\r\n                    break;\r\n\r\n                // Swatch Internet time (e.g., 000 through 999)\r\n                case 'B': {\r\n                    const hours: number = now.getUTCHours();\r\n                    const minutes: number = now.getUTCMinutes();\r\n                    const seconds: number = now.getUTCSeconds();\r\n\r\n                    date += Math.floor((((hours + 1) % 24) + minutes / 60 + seconds / 3600) * 1000 / 24);\r\n\r\n                    break;\r\n                }\r\n                // 12-hour format of an hour without leading zeros (e.g., 1 through 12)\r\n                case 'g':\r\n                    date += hours > 12 ? hours - 12 : hours;\r\n\r\n                    break;\r\n\r\n                // 24-hour format of an hour without leading zeros (e.g., 0 through 23)\r\n                case 'G':\r\n                    date += hours;\r\n\r\n                    break;\r\n\r\n                // 12-hour format of an hour with leading zeros (e.g., 01 through 12)\r\n                case 'h':\r\n                    date += Str.padLeft((hours > 12 ? hours - 12 : hours).toString(), 2, '0');\r\n\r\n                    break;\r\n\r\n                // 24-hour format of an hour with leading zeros (e.g., 00 through 23)\r\n                case 'H':\r\n                    date += Str.padLeft(hours.toString(), 2, '0');\r\n\r\n                    break;\r\n\r\n                // Minutes with leading zeros (e.g., 00 to 59)\r\n                case 'i':\r\n                    date += Str.padLeft(minutes.toString(), 2, '0');\r\n\r\n                    break;\r\n\r\n                // Seconds with leading zeros (e.g., 00 to 59)\r\n                case 's':\r\n                    date += Str.padLeft(seconds.toString(), 2, '0');\r\n\r\n                    break;\r\n\r\n                // Microseconds. (e.g., 654321)\r\n                case 'u':\r\n                    throw new Error('Microseconds are not supported.');\r\n\r\n                // Milliseconds. (e.g., 654)\r\n                case 'v': {\r\n                    date += Str.padLeft(milliseconds.toString(), 3, '0');\r\n\r\n                    break;\r\n                }\r\n\r\n                // Timezone identifier (e.g., UTC, GMT, Atlantic/Azores)\r\n                case 'e': {\r\n                    date += Intl.DateTimeFormat('en-us', { timeZone: tz ?? undefined }).resolvedOptions().timeZone;\r\n\r\n                    break;\r\n                }\r\n\r\n                // Whether the date is in daylight saving time (e.g., 1 if Daylight Saving Time, 0 otherwise)\r\n                case 'I': {\r\n                    let january: number = new Date(year, 0, 1).getTimezoneOffset();\r\n                    let july: number = new Date(year, 6, 1).getTimezoneOffset();\r\n\r\n                    date += Math.max(january, july) !== now.getTimezoneOffset() ? '1' : '0';\r\n\r\n                    break;\r\n                }\r\n                // Difference to Greenwich time (GMT) without colon between hours and minutes (e.g., +0200)\r\n                case 'O': {\r\n                    const timeZoneData: string = now.toLocaleDateString('en-us', {\r\n                        timeZoneName: 'longOffset',\r\n                        timeZone    : tz ?? undefined,\r\n                    })\r\n                        .split(', ')\r\n                        .pop()!\r\n                        .trim();\r\n\r\n                    date += timeZoneData.length !== 3 ? timeZoneData.substring(3).replace(':', '') : '+0000';\r\n\r\n                    break;\r\n                }\r\n\r\n                // Difference to Greenwich time (GMT) with colon between hours and minutes (e.g., +02:00)\r\n                case 'P': {\r\n                    const timeZoneData: string = now.toLocaleDateString('en-us', {\r\n                        timeZoneName: 'longOffset',\r\n                        timeZone    : tz ?? undefined,\r\n                    })\r\n                        .split(', ')\r\n                        .pop()!\r\n                        .trim();\r\n\r\n                    date += timeZoneData.length !== 3 ? timeZoneData.substring(3) : '+00:00';\r\n\r\n                    break;\r\n                }\r\n\r\n                // The same as P, but returns Z instead of +00:00 (e.g., +02:00)\r\n                case 'p': {\r\n                    const timeZoneData: string = now.toLocaleDateString('en-us', {\r\n                        timeZoneName: 'longOffset',\r\n                        timeZone    : tz ?? undefined,\r\n                    })\r\n                        .split(', ')\r\n                        .pop()!\r\n                        .trim();\r\n\r\n                    date += timeZoneData === 'GMT' ? 'Z' : timeZoneData.substring(3);\r\n\r\n                    break;\r\n                }\r\n\r\n                // Timezone abbreviation, if known; otherwise the GMT offset (e.g., EST, MDT, +05)\r\n                case 'T': {\r\n                    const timeZoneData: string = now.toLocaleDateString('en-us', {\r\n                        timeZoneName: 'short',\r\n                        timeZone    : tz ?? undefined,\r\n                    })\r\n                        .split(', ')\r\n                        .pop()!\r\n                        .trim();\r\n\r\n                    date += tz ?? timeZoneData.replace('GMT', 'UTC').split(/[+-]/)[0];\r\n\r\n                    break;\r\n                }\r\n\r\n                // Timezone offset in seconds.\r\n                // The offset for timezones west of UTC is always negative,\r\n                // and for those east of UTC is always positive. (e.g., -43200 through 50400)\r\n                case 'Z': {\r\n                    const timezone: string = now.toLocaleDateString('en-us', {\r\n                        timeZoneName: 'longOffset',\r\n                        timeZone    : tz ?? undefined\r\n                    });\r\n                    const symbol: RegExpMatchArray | null = timezone.match(/[+-]/);\r\n                    const data: string[] = timezone.split(/[+-]/);\r\n\r\n                    const sign: string = symbol ? symbol.pop()! : '+';\r\n                    const offset: string = data.length === 2 ? (data[1] as string) : '0:00';\r\n\r\n                    const hours: number = parseInt(offset.split(':')[0] as string);\r\n                    const minutes: number = parseInt(offset.split(':')[1] as string);\r\n\r\n                    const offsetInSeconds: number = hours * 3600 + minutes * 60;\r\n\r\n                    date += `${sign}${offsetInSeconds}`;\r\n\r\n                    break;\r\n                }\r\n\r\n                // ISO 8601 date (e.g., 2004-02-12T15:19:21+00:00)\r\n                case 'c': {\r\n                    date += `${this.toDate('Y-m-d\\\\TH:i:sP')}`;\r\n\r\n                    break;\r\n                }\r\n                // RFC 2822/RFC 5322 formatted date (e.g., Thu, 21 Dec 2000 16:01:07 +0200)\r\n                case 'r': {\r\n                    date += new Stringable(this.#value).toDate('D, d M Y H:i:s O', tz);\r\n\r\n                    break;\r\n                }\r\n\r\n                // Seconds since the Unix Epoch (e.g., January 1, 1970 00:00:00 GMT)\r\n                case 'U': {\r\n                    date += Math.floor(now.getTime() / 1000);\r\n\r\n                    break;\r\n                }\r\n\r\n                default:\r\n                    date += element.length >= 2 && element.indexOf('\\\\') > -1 ? element.replace('\\\\', '') : element;\r\n            }\r\n        }\r\n\r\n        return date;\r\n    }\r\n}\r\n\r\nclass HtmlString {\r\n    /**\r\n     * The HTML string.\r\n     *\r\n     * @type { string }\r\n     */\r\n    #html: string;\r\n\r\n    /**\r\n     * Create a new HTML string instance.\r\n     *\r\n     * @param { string } html\r\n     *\r\n     * @return void\r\n     */\r\n    constructor(html: string = '') {\r\n        this.#html = html;\r\n    }\r\n\r\n    /**\r\n     * Get the HTML string.\r\n     *\r\n     * @return { HtmlStringType }\r\n     */\r\n    toHtml(): HtmlStringType {\r\n        const pattern: RegExp = /(?!<!DOCTYPE)<([^\\s>]+)(\\s|>)+/;\r\n        const tag: RegExpExecArray | null = RegExp(pattern).exec(this.#html);\r\n\r\n        if (!tag) {\r\n            return this.#html;\r\n        }\r\n\r\n        const DOM: HTMLElement = document.createElement((tag[1] as string));\r\n\r\n        DOM.innerHTML = this.#html;\r\n\r\n        return (tag[1] as string) === 'html' ? DOM : DOM.firstChild as HtmlStringType;\r\n    }\r\n\r\n    /**\r\n     * Determine if the given HTML string is empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isEmpty(): boolean {\r\n        return this.#html === '';\r\n    }\r\n\r\n    /**\r\n     * Determine if the given HTML string is not empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    isNotEmpty(): boolean {\r\n        return !this.isEmpty();\r\n    }\r\n\r\n    /**\r\n     * Get the HTML string.\r\n     *\r\n     * @return { string }\r\n     */\r\n    toString(): string {\r\n        const html: HTMLElement | Node | string = this.toHtml();\r\n\r\n        if (html instanceof HTMLElement) {\r\n            return html.outerHTML;\r\n        }\r\n\r\n        if (html instanceof Node) {\r\n            return (html.textContent as string);\r\n        }\r\n\r\n        return html;\r\n    }\r\n}\r\n\r\n/**\r\n * Get a new Stringable object from the given string.\r\n *\r\n * @param { string } string\r\n *\r\n * @return Stringable\r\n */\r\nconst str: (string: string) => Stringable = function (string: string = ''): Stringable {\r\n    return Str.of(string);\r\n};\r\n\r\nclass RegExpString {\r\n    /**\r\n     * Build the Regular Expression string from the given parameter.\r\n     *\r\n     * @param { RegExp } pattern\r\n     * @param { string } string\r\n     *\r\n     * @return { string }\r\n     */\r\n    static make(pattern: RegExp, string: string): string {\r\n        if (string === '') {\r\n            throw new Error('Empty regular expression.');\r\n        }\r\n\r\n        if (!string.startsWith('/')) {\r\n            throw new Error('Delimiter must not be alphanumeric, backslash, or NUL.');\r\n        }\r\n\r\n        if (string.startsWith('/') && string.length === 1 || !string.endsWith('/')) {\r\n            throw new Error('No ending delimiter \\'/\\'.');\r\n        }\r\n\r\n        const expression: RegExpExecArray | null = new RegExp(pattern).exec(string);\r\n\r\n        return expression ? expression[1]! : '';\r\n    }\r\n}\r\n\r\n/**\r\n * Quote regular expression characters.\r\n *\r\n * @param { string } string The input string.\r\n * @param { string | null } delimiter If the optional delimiter is specified, it will also be escaped.\r\n * This is useful for escaping the delimiter that is required by the PCRE functions.\r\n * The / is the most commonly used delimiter.\r\n *\r\n * @return { string } The quoted (escaped) string.\r\n */\r\nfunction preg_quote(string: string, delimiter: string | null = null): string {\r\n    const characters: (string | null)[] = [\r\n        '-', '.', '\\\\', '+', '*', '?', '[', '^', ']',\r\n        '$', '(', ')', '{', '}', '=', '!', '<', '>',\r\n        '|', ':', delimiter\r\n    ];\r\n\r\n    const escaped: string = characters.filter(Boolean).map((character: string): string => `\\\\${character}`).join('');\r\n\r\n    return string.replace(new RegExp(`[${escaped}]`, 'g'), '\\\\$&');\r\n}\r\n\r\n/**\r\n * Uppercase the first character of each word in a string\r\n *\r\n * @param { string } string The input string.\r\n * @param { string } separators The optional separators contains the word separator characters.\r\n\r\n * @return { string } String the modified string.\r\n */\r\nfunction ucwords(string: string, separators: string = ' \\t\\r\\n\\f\\v'): string {\r\n    return string.split(separators).map((word: string) => word[0]?.toUpperCase() + word.substring(1)).join(' ');\r\n}\r\n\r\n/**\r\n * Attempt to match the case on two strings.\r\n *\r\n * @param { string} value\r\n * @param { string } comparison\r\n *\r\n * @return { string }\r\n */\r\nfunction matchCase(value: string, comparison: string): string {\r\n    const cases: ((str: string) => string)[] = [\r\n        str => str.toLowerCase(),\r\n        str => str.toUpperCase(),\r\n        str => str.charAt(0).toUpperCase() + str.slice(1),\r\n        str => str.replace(/\\b\\w/g, char => char.toUpperCase())\r\n    ];\r\n\r\n    for (const matcher of cases) {\r\n        if (matcher(comparison) === comparison) {\r\n            return matcher(value);\r\n        }\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nif (typeof exports != 'undefined') {\r\n    module.exports.Str = Str;\r\n    module.exports.str = str;\r\n}\r\n\r\n// Hack to test this code, global is not available in the browser.\r\nif (typeof global !== 'undefined') {\r\n    const _global: any = global;\r\n\r\n    _global.Mode = Mode;\r\n    _global.Str = Str;\r\n    _global.Stringable = Stringable;\r\n    _global.str = str;\r\n}"],"names":["Mode","Str","of","string","Stringable","after","subject","search","slice","indexOf","length","afterLast","position","lastIndexOf","substring","ascii","value","normalize","replace","before","result","beforeLast","_a","this","substr","between","from","to","betweenFirst","camel","lcfirst","studly","charAt","index","chopStart","needle","results","Array","isArray","forEach","word","startsWith","chopEnd","endsWith","contains","haystack","needles","ignoreCase","toLowerCase","includes","containsAll","doesntContain","convertCase","mode","MB_CASE_FOLD","MB_CASE_UPPER","toLocaleUpperCase","MB_CASE_LOWER","toLocaleLowerCase","MB_CASE_TITLE","title","MB_CASE_UPPER_SIMPLE","toUpperCase","MB_CASE_LOWER_SIMPLE","MB_CASE_TITLE_SIMPLE","MB_CASE_FOLD_SIMPLE","deduplicate","characters","reduce","carry","character","RegExp","preg_quote","excerpt","text","phrase","options","radius","omission","_b","split","matches","splice","join","start","trimStart","end","trimEnd","Math","max","ltrim","unless","startWithRadius","exactly","prepend","toString","rtrim","endWithRadius","append","trim","finish","cap","wrap","unwrap","replaceFirst","replaceLast","is","pattern","patterns","test","isAscii","isJson","JSON","parse","JsonException","isUrl","protocols","protocolPattern","isUuid","isUlid","match","Number","kebab","snake","limit","preserveWords","trimmed","lower","words","wordsArray","mask","endIndex","segment","strLen","startIndex","segmentLen","repeat","body","RegExpString","make","flags","expression","exec","isMatch","item","matchAll","map","String","numbers","padBoth","pad","short","shortLeft","floor","shortRight","ceil","padLeft","padRight","plural","count","undefined","ouse$","o$","eau$","us$","$","irregular","abuse","alumna","alumnus","analysis","appendix","atlas","avalanche","axis","axe","bacillus","bacterium","basis","beau","beef","blouse","brother","brownie","bureau","cache","cactus","cafe","calf","canvas","cave","chateau","child","cookie","corpus","cow","crisis","criterion","curriculum","curve","datum","deer","demo","diagnosis","domino","echo","elf","ellipsis","emphasis","epoch","fish","focus","foe","foot","formula","fungus","ganglion","gas","genie","genus","goose","graffito","grave","half","hippopotamus","hoax","hoof","human","iris","knife","larva","leaf","lens","life","loaf","man","matrix","means","medium","memorandum","money","mongoose","mouse","motto","move","mythos","nebula","neurosis","niche","niveau","nucleus","numen","oasis","occiput","octopus","offspring","opus","ox","parenthesis","passerby","penis","person","phenomenon","plateau","safe","save","scarf","self","series","sex","sheep","shelf","sieve","soliloquy","species","stadium","stimulus","stratum","swine","syllabus","synthesis","testis","thesis","thief","tooth","tornado","trilby","turf","valve","volcano","wave","wife","wolf","zombie","matchCase","pluralStudly","parts","lastWord","pop","ucfirst","pluralPascal","password","letters","symbols","spaces","collection","concat","push","random","offset","byteSize","bytes","crypto","getRandomValues","Uint8Array","btoa","char","times","replaceArray","segments","shift","toStringOr","fallback","e","caseSensitive","term","replaceAll","replaceStart","replaceEnd","replaceMatches","Function","matched","remove","reverse","prefix","quoted","upper","headline","part","ucsplit","apa","minorWords","endPunctuation","filter","Boolean","i","lowercaseWord","hyphenatedWords","singular","ouses$","eaus$","s$","abuses","alumnae","alumni","analyses","appendices","atlases","avalanches","axes","bacilli","bacteria","bases","beaux","beefs","blouses","brothers","brownies","bureaux","caches","cacti","cafes","calves","canvases","caves","chateaux","children","cookies","corpuses","cows","crises","criteria","curricula","curves","demos","diagnoses","dominoes","echoes","elves","ellipses","emphases","epochs","foci","foes","feet","formulae","fungi","ganglions","gases","genies","genera","geese","graffiti","graves","halves","hippopotami","hoaxes","hoofs","humans","irises","knives","larvae","leaves","lenses","lives","loaves","men","matrices","media","memoranda","monies","mongooses","mice","mottoes","moves","mythoi","nebulae","neuroses","niches","niveaux","nuclei","numina","oases","occiputs","octopuses","opuses","oxen","parentheses","passersby","penises","people","phenomena","plateaux","radii","safes","saves","scarves","selves","sexes","shelves","sieves","soliloquies","stadiums","stimuli","strata","syllabi","syntheses","testes","theses","thieves","teeth","tornadoes","trilbys","turfs","valves","volcanoes","waves","wives","wolves","zombies","slug","separator","dictionary","flip","delimiter","separators","ucwords","charlist","regex","chararacter","squish","pascal","substrCount","substrReplace","swap","take","toBase64","fromBase64","atob","wordCount","wordWrap","breakStr","cutLongWords","breakWithSpace","uuid","time","parseInt","MAX_SAFE_INTEGER","randomChar","uuid7","values","Uint32Array","timestamp","getTime","Date","now","RangeError","r1","r2","r3","randomA","randomBHi","randomBLo","pow","digits","orderedUuid","ulid","encoding","generateRandomNumber","buffer","encodedTime","mod","generateEncodedTime","randomNumber","encodingLength","generateRandomString","constructor","_Stringable_value","set","__classPrivateFieldSet","__classPrivateFieldGet","newLine","basename","suffix","classBasename","dirname","levels","isValidDirname","hasValidLevels","explode","isEmpty","isNotEmpty","pipe","callback","window","tap","arguments","when","whenContains","whenContainsAll","whenEmpty","whenNotEmpty","whenEndsWith","whenExactly","whenNotExactly","whenIs","whenIsAscii","whenIsUuid","whenIsUlid","whenStartsWith","whenTest","toHtmlString","HtmlString","toHtml","dump","console","log","dd","Error","toInteger","base","isNaN","isFinite","toFloat","parseFloat","toBoolean","toDate","format","tz","toLocaleDateString","year","month","day","hour","minute","second","hour12","timeZone","date","toLocaleString","fractionalSecondDigits","getMonth","dayOfTheWeek","getDay","dayOfTheMonth","getDate","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","elements","element","weekday","diff","getTimezoneOffset","parsedDate","UTC","weekDay","getUTCDay","setUTCDate","getUTCDate","yearStart","getUTCFullYear","weekNumber","currentMonth","toISOString","getUTCHours","getUTCMinutes","getUTCSeconds","Intl","DateTimeFormat","resolvedOptions","january","july","timeZoneData","timeZoneName","timezone","symbol","data","sign","html","_HtmlString_html","tag","DOM","document","createElement","innerHTML","firstChild","HTMLElement","outerHTML","Node","textContent","str","escaped","comparison","cases","matcher","exports","module","global","_global"],"mappings":"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C,UAAc,YAGdC,OAAW,SACXC,OAAW,SACXC,MAAW,UACXC,MAAW,QACXC,QAAW,YACXC,OAAW,UACXC,KAAW,QAGXC,MAAW,SACXC,QAAW,YAGXC,KAAQ,QACRC,KAAQ,QACRC,KAAQ,SAGRC,OAAU,WA0Md,GAtM8B,CAE1B,SACA,WACA,UACA,MACA,QAGA,UACA,QACA,WACA,QACA,WACA,WACA,UACA,SAGA,SACA,OACA,SACA,UACA,WACA,WACA,OACA,MACA,SACA,eACA,WACA,cACA,YACA,QACA,SAGA,OACA,SACA,OACA,WACA,QAGA,YACA,QACA,MACA,QACA,YACA,WAGA,UACA,WACA,OACA,WACA,QACA,aACA,OACA,YAGA,UACA,WACA,UACA,aACA,OAGA,eACA,SACA,UACA,WACA,aACA,eAGA,aACA,cACA,UAGA,aACA,QACA,OAGA,MACA,aACA,YACA,WAGA,UACA,OACA,WACA,UAGA,WACA,UACA,aACA,WACA,OACA,QACA,QACA,QACA,QAGA,aACA,OACA,QACA,UACA,YAGA,MACA,YAGA,WACA,YACA,cACA,OACA,UACA,YACA,WACA,SACA,UACA,SACA,SACA,aACA,cACA,WAMA,SACA,OACA,WACA,aACA,OAGA,SACA,OACA,aACA,WACA,cACA,SACA,UACA,SACA,QACA,SACA,UACA,OACA,MACA,OACA,eACA,aACA,OACA,UACA,QACA,QACA,QAGA,SACA,aACA,UACA,SACA,WACA,QACA,OAGA,KAGA,aACA,UAGA,UACA,aACA,QACA,UACA,aACA,OACA,OAGA,WACA,OAGY5R,QAAQO,EAAMgC,gBAAkB,EAC5C,OAAOsP,EAAUtR,EAAOA,GAG5B,IAAK,MAAMwB,KAAQ8H,EAAW,CAC1B,MAAM3D,EAAkB,IAAIpC,OAAO,GAAG/B,KAAS,KAE/C,GAAImE,EAAQE,KAAK7F,GACb,OAAOsR,EAAUtR,EAAME,QAAQyF,EAAU2D,EAAU9H,IAAmBxB,EAE9E,CAEA,IAAK,MAAMwB,KAAQsH,EAAQ,CACvB,MAAMnD,EAAkB,IAAIpC,OAAO/B,EAAM,KAEzC,GAAImE,EAAQE,KAA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Aa,WACbC,KAAa,QACbC,QAAa,QACbC,MAAa,OACbC,OAAa,SAGbC,QAAY,SACZC,SAAY,WACZC,OAAY,QACZC,QAAY,SACZC,OAAY,UACZC,OAAY,QAGZC,MAAa,QACbC,SAAa,UACbC,UAAa,UACbnL,UAAa,YACboL,OAAa,OACbC,KAAa,KAGbC,YAAe,cACfC,UAAe,WACfC,QAAe,QACfC,OAAe,SACfC,UAAe,aACfC,SAAe,UAGfC,MAAc,SACd,aAAc,YAGdC,MAAe,OACfC,MAAe,OACfC,QAAe,QACfC,OAAe,OACfnL,OAAe,SACfoL,MAAe,MACflL,MAAe,QACfmL,QAAe,QACfC,OAAe,QACfC,YAAe,YACf,cAAe,aACfjL,QAAe,UACfkL,SAAe,UACfC,QAAe,WACfC,OAAe,UACfhL,MAAe,QACfiL,QAAe,WACfC,UAAe,YAGfC,OAAa,SACbC,OAAa,SACbC,QAAa,QACbC,MAAa,QACbC,UAAa,UACbC,QAAa,SACbC,MAAa,OAGbC,OAAa,QACbC,UAAa,UAGbC,MAAU,OACVC,MAAU,OACVC,OAAU,OAGVC,QAAW,UA0Mf,GAtM8B,CAE1B,SACA,WACA,UACA,MACA,QAGA,UACA,QACA,WACA,QACA,WACA,WACA,UACA,SAGA,SACA,OACA,SACA,UACA,WACA,WACA,OACA,MACA,SACA,eACA,WACA,cACA,YACA,QACA,SAGA,OACA,SACA,OACA,WACA,QAGA,YACA,QACA,MACA,QACA,YACA,WAGA,UACA,WACA,OACA,WACA,QACA,aACA,OACA,YAGA,UACA,WACA,UACA,aACA,OAGA,eACA,SACA,UACA,WACA,aACA,eAGA,aACA,cACA,UAGA,aACA,QACA,OAGA,MACA,aACA,YACA,WAGA,UACA,OACA,WACA,UAGA,WACA,UACA,aACA,WACA,OACA,QACA,QACA,QACA,QAGA,aACA,OACA,QACA,UACA,YAGA,MACA,YAGA,WACA,YACA,cACA,OACA,UACA,YACA,WACA,SACA,UACA,SACA,SACA,aACA,cACA,WAMA,SACA,OACA,WACA,aACA,OAGA,SACA,OACA,aACA,WACA,cACA,SACA,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"}